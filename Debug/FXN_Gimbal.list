
FXN_Gimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001870  08010b98  08010b98  00011b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012408  08012408  00014230  2**0
                  CONTENTS
  4 .ARM          00000008  08012408  08012408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012410  08012410  00014230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012410  08012410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012414  08012414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08012418  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004454  20000230  08012648  00014230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004684  08012648  00014684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014230  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199dc  00000000  00000000  00014260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004395  00000000  00000000  0002dc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  00031fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001344  00000000  00000000  00033878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dce2  00000000  00000000  00034bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000202a4  00000000  00000000  0005289e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4624  00000000  00000000  00072b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b6c  00000000  00000000  001171ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0011ed18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000230 	.word	0x20000230
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010b7c 	.word	0x08010b7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000234 	.word	0x20000234
 80001dc:	08010b7c 	.word	0x08010b7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9b5 	b.w	8000fe4 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b96a 	b.w	8000fe4 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	460c      	mov	r4, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14e      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d34:	4694      	mov	ip, r2
 8000d36:	458c      	cmp	ip, r1
 8000d38:	4686      	mov	lr, r0
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	d962      	bls.n	8000e06 <__udivmoddi4+0xde>
 8000d40:	b14a      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d42:	f1c2 0320 	rsb	r3, r2, #32
 8000d46:	4091      	lsls	r1, r2
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	4319      	orrs	r1, r3
 8000d52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5a:	fa1f f68c 	uxth.w	r6, ip
 8000d5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d66:	fb07 1114 	mls	r1, r7, r4, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb04 f106 	mul.w	r1, r4, r6
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7e:	f080 8112 	bcs.w	8000fa6 <__udivmoddi4+0x27e>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 810f 	bls.w	8000fa6 <__udivmoddi4+0x27e>
 8000d88:	3c02      	subs	r4, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	fa1f f38e 	uxth.w	r3, lr
 8000d92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d96:	fb07 1110 	mls	r1, r7, r0, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f606 	mul.w	r6, r0, r6
 8000da2:	429e      	cmp	r6, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x94>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dae:	f080 80fc 	bcs.w	8000faa <__udivmoddi4+0x282>
 8000db2:	429e      	cmp	r6, r3
 8000db4:	f240 80f9 	bls.w	8000faa <__udivmoddi4+0x282>
 8000db8:	4463      	add	r3, ip
 8000dba:	3802      	subs	r0, #2
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa6>
 8000dc6:	40d3      	lsrs	r3, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	e9c5 3200 	strd	r3, r2, [r5]
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xba>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb4>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa6>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d146      	bne.n	8000e78 <__udivmoddi4+0x150>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0xcc>
 8000dee:	4290      	cmp	r0, r2
 8000df0:	f0c0 80f0 	bcc.w	8000fd4 <__udivmoddi4+0x2ac>
 8000df4:	1a86      	subs	r6, r0, r2
 8000df6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d0e6      	beq.n	8000dce <__udivmoddi4+0xa6>
 8000e00:	e9c5 6300 	strd	r6, r3, [r5]
 8000e04:	e7e3      	b.n	8000dce <__udivmoddi4+0xa6>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	f040 8090 	bne.w	8000f2c <__udivmoddi4+0x204>
 8000e0c:	eba1 040c 	sub.w	r4, r1, ip
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e22:	fb08 4416 	mls	r4, r8, r6, r4
 8000e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e2a:	fb07 f006 	mul.w	r0, r7, r6
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x11c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x11a>
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	f200 80cd 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e42:	4626      	mov	r6, r4
 8000e44:	1a1c      	subs	r4, r3, r0
 8000e46:	fa1f f38e 	uxth.w	r3, lr
 8000e4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb00 f707 	mul.w	r7, r0, r7
 8000e5a:	429f      	cmp	r7, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x148>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x146>
 8000e68:	429f      	cmp	r7, r3
 8000e6a:	f200 80b0 	bhi.w	8000fce <__udivmoddi4+0x2a6>
 8000e6e:	4620      	mov	r0, r4
 8000e70:	1bdb      	subs	r3, r3, r7
 8000e72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0x9c>
 8000e78:	f1c1 0620 	rsb	r6, r1, #32
 8000e7c:	408b      	lsls	r3, r1
 8000e7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e82:	431f      	orrs	r7, r3
 8000e84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e88:	fa04 f301 	lsl.w	r3, r4, r1
 8000e8c:	ea43 030c 	orr.w	r3, r3, ip
 8000e90:	40f4      	lsrs	r4, r6
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	0c38      	lsrs	r0, r7, #16
 8000e98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000ea0:	fa1f fc87 	uxth.w	ip, r7
 8000ea4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eac:	fb0e f90c 	mul.w	r9, lr, ip
 8000eb0:	45a1      	cmp	r9, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	d90a      	bls.n	8000ece <__udivmoddi4+0x1a6>
 8000eb8:	193c      	adds	r4, r7, r4
 8000eba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ebe:	f080 8084 	bcs.w	8000fca <__udivmoddi4+0x2a2>
 8000ec2:	45a1      	cmp	r9, r4
 8000ec4:	f240 8081 	bls.w	8000fca <__udivmoddi4+0x2a2>
 8000ec8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	eba4 0409 	sub.w	r4, r4, r9
 8000ed2:	fa1f f983 	uxth.w	r9, r3
 8000ed6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eda:	fb00 4413 	mls	r4, r0, r3, r4
 8000ede:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee6:	45a4      	cmp	ip, r4
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x1d2>
 8000eea:	193c      	adds	r4, r7, r4
 8000eec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ef0:	d267      	bcs.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d965      	bls.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef6:	3b02      	subs	r3, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efe:	fba0 9302 	umull	r9, r3, r0, r2
 8000f02:	eba4 040c 	sub.w	r4, r4, ip
 8000f06:	429c      	cmp	r4, r3
 8000f08:	46ce      	mov	lr, r9
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	d351      	bcc.n	8000fb2 <__udivmoddi4+0x28a>
 8000f0e:	d04e      	beq.n	8000fae <__udivmoddi4+0x286>
 8000f10:	b155      	cbz	r5, 8000f28 <__udivmoddi4+0x200>
 8000f12:	ebb8 030e 	subs.w	r3, r8, lr
 8000f16:	eb64 040c 	sbc.w	r4, r4, ip
 8000f1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1e:	40cb      	lsrs	r3, r1
 8000f20:	431e      	orrs	r6, r3
 8000f22:	40cc      	lsrs	r4, r1
 8000f24:	e9c5 6400 	strd	r6, r4, [r5]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	e750      	b.n	8000dce <__udivmoddi4+0xa6>
 8000f2c:	f1c2 0320 	rsb	r3, r2, #32
 8000f30:	fa20 f103 	lsr.w	r1, r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa24 f303 	lsr.w	r3, r4, r3
 8000f3c:	4094      	lsls	r4, r2
 8000f3e:	430c      	orrs	r4, r1
 8000f40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f48:	fa1f f78c 	uxth.w	r7, ip
 8000f4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f50:	fb08 3110 	mls	r1, r8, r0, r3
 8000f54:	0c23      	lsrs	r3, r4, #16
 8000f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f5a:	fb00 f107 	mul.w	r1, r0, r7
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x24c>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f6a:	d22c      	bcs.n	8000fc6 <__udivmoddi4+0x29e>
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d92a      	bls.n	8000fc6 <__udivmoddi4+0x29e>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1a5b      	subs	r3, r3, r1
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f84:	fb01 f307 	mul.w	r3, r1, r7
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x276>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f94:	d213      	bcs.n	8000fbe <__udivmoddi4+0x296>
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	d911      	bls.n	8000fbe <__udivmoddi4+0x296>
 8000f9a:	3902      	subs	r1, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	1ae4      	subs	r4, r4, r3
 8000fa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa4:	e739      	b.n	8000e1a <__udivmoddi4+0xf2>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	e6f0      	b.n	8000d8c <__udivmoddi4+0x64>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e706      	b.n	8000dbc <__udivmoddi4+0x94>
 8000fae:	45c8      	cmp	r8, r9
 8000fb0:	d2ae      	bcs.n	8000f10 <__udivmoddi4+0x1e8>
 8000fb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fba:	3801      	subs	r0, #1
 8000fbc:	e7a8      	b.n	8000f10 <__udivmoddi4+0x1e8>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	e7ed      	b.n	8000f9e <__udivmoddi4+0x276>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	e799      	b.n	8000efa <__udivmoddi4+0x1d2>
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	e7d4      	b.n	8000f74 <__udivmoddi4+0x24c>
 8000fca:	46d6      	mov	lr, sl
 8000fcc:	e77f      	b.n	8000ece <__udivmoddi4+0x1a6>
 8000fce:	4463      	add	r3, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	e74d      	b.n	8000e70 <__udivmoddi4+0x148>
 8000fd4:	4606      	mov	r6, r0
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e70f      	b.n	8000dfc <__udivmoddi4+0xd4>
 8000fdc:	3e02      	subs	r6, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	e730      	b.n	8000e44 <__udivmoddi4+0x11c>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <constrain>:
float accConfidence      = 1.0f;

#define HardFilter(O,N)  ((O)*0.9f+(N)*0.1f)

float constrain(float input, float minValue, float maxValue)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ff2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ff6:	ed87 1a01 	vstr	s2, [r7, #4]
    if (input < minValue)
 8000ffa:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ffe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	d501      	bpl.n	8001010 <constrain+0x28>
        return minValue;
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	e00b      	b.n	8001028 <constrain+0x40>
    else if (input > maxValue)
 8001010:	ed97 7a03 	vldr	s14, [r7, #12]
 8001014:	edd7 7a01 	vldr	s15, [r7, #4]
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	dd01      	ble.n	8001026 <constrain+0x3e>
        return maxValue;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	e000      	b.n	8001028 <constrain+0x40>
    else
        return input;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eeb0 0a67 	vmov.f32	s0, s15
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <calculateAccConfidence>:


void calculateAccConfidence(float accMag)
{
 800103c:	b5b0      	push	{r4, r5, r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	ed87 0a01 	vstr	s0, [r7, #4]
    // G.K. Egan (C) computes confidence in accelerometers when
    // aircraft is being accelerated over and above that due to gravity

    static float accMagP = 1.0f;

    accMag /= accelOneG;  // HJI Added to convert MPS^2 to G's
 8001046:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <calculateAccConfidence+0xc0>)
 8001048:	ed93 7a00 	vldr	s14, [r3]
 800104c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001054:	edc7 7a01 	vstr	s15, [r7, #4]

    accMag  = HardFilter(accMagP, accMag);
 8001058:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <calculateAccConfidence+0xc4>)
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001104 <calculateAccConfidence+0xc8>
 8001062:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001066:	edd7 7a01 	vldr	s15, [r7, #4]
 800106a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001108 <calculateAccConfidence+0xcc>
 800106e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001076:	edc7 7a01 	vstr	s15, [r7, #4]
    accMagP = accMag;
 800107a:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <calculateAccConfidence+0xc4>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6013      	str	r3, [r2, #0]

    accConfidence = constrain(1.0f - (accConfidenceDecay * sqrt(fabs(accMag - 1.0f))), 0.0f, 1.0f);
 8001080:	4b22      	ldr	r3, [pc, #136]	@ (800110c <calculateAccConfidence+0xd0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa67 	bl	8000558 <__aeabi_f2d>
 800108a:	4604      	mov	r4, r0
 800108c:	460d      	mov	r5, r1
 800108e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001092:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001096:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800109a:	eef0 7ae7 	vabs.f32	s15, s15
 800109e:	ee17 0a90 	vmov	r0, s15
 80010a2:	f7ff fa59 	bl	8000558 <__aeabi_f2d>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	ec43 2b10 	vmov	d0, r2, r3
 80010ae:	f00e f9e5 	bl	800f47c <sqrt>
 80010b2:	ec53 2b10 	vmov	r2, r3, d0
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff faa5 	bl	8000608 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	f04f 0000 	mov.w	r0, #0
 80010c6:	4912      	ldr	r1, [pc, #72]	@ (8001110 <calculateAccConfidence+0xd4>)
 80010c8:	f7ff f8e6 	bl	8000298 <__aeabi_dsub>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fd70 	bl	8000bb8 <__aeabi_d2f>
 80010d8:	4603      	mov	r3, r0
 80010da:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80010de:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8001114 <calculateAccConfidence+0xd8>
 80010e2:	ee00 3a10 	vmov	s0, r3
 80010e6:	f7ff ff7f 	bl	8000fe8 <constrain>
 80010ea:	eef0 7a40 	vmov.f32	s15, s0
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <calculateAccConfidence+0xdc>)
 80010f0:	edc3 7a00 	vstr	s15, [r3]
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bdb0      	pop	{r4, r5, r7, pc}
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000004 	.word	0x20000004
 8001104:	3f666666 	.word	0x3f666666
 8001108:	3dcccccd 	.word	0x3dcccccd
 800110c:	200002b4 	.word	0x200002b4
 8001110:	3ff00000 	.word	0x3ff00000
 8001114:	00000000 	.word	0x00000000
 8001118:	20000000 	.word	0x20000000
 800111c:	00000000 	.word	0x00000000

08001120 <MargAHRSinit>:
//====================================================================================================
// Initialization
//====================================================================================================
//航姿參考系統初始化
void MargAHRSinit(float ax, float ay, float az, float mx, float my, float mz)
{
 8001120:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001124:	b094      	sub	sp, #80	@ 0x50
 8001126:	af04      	add	r7, sp, #16
 8001128:	ed87 0a05 	vstr	s0, [r7, #20]
 800112c:	edc7 0a04 	vstr	s1, [r7, #16]
 8001130:	ed87 1a03 	vstr	s2, [r7, #12]
 8001134:	edc7 1a02 	vstr	s3, [r7, #8]
 8001138:	ed87 2a01 	vstr	s4, [r7, #4]
 800113c:	edc7 2a00 	vstr	s5, [r7]
    float cosRoll, sinRoll, cosPitch, sinPitch;
    float magX, magY;
    float initialHdg, cosHeading, sinHeading;

	//使用加速度數據計算歐拉角 ，滾轉角和俯仰角
    initialRoll  = atan2(-ay, -az);
 8001140:	edd7 7a04 	vldr	s15, [r7, #16]
 8001144:	eef1 7a67 	vneg.f32	s15, s15
 8001148:	ee17 3a90 	vmov	r3, s15
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fa03 	bl	8000558 <__aeabi_f2d>
 8001152:	4604      	mov	r4, r0
 8001154:	460d      	mov	r5, r1
 8001156:	edd7 7a03 	vldr	s15, [r7, #12]
 800115a:	eef1 7a67 	vneg.f32	s15, s15
 800115e:	ee17 3a90 	vmov	r3, s15
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f9f8 	bl	8000558 <__aeabi_f2d>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	ec43 2b11 	vmov	d1, r2, r3
 8001170:	ec45 4b10 	vmov	d0, r4, r5
 8001174:	f00e f980 	bl	800f478 <atan2>
 8001178:	ec53 2b10 	vmov	r2, r3, d0
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fd1a 	bl	8000bb8 <__aeabi_d2f>
 8001184:	4603      	mov	r3, r0
 8001186:	63fb      	str	r3, [r7, #60]	@ 0x3c
    initialPitch = atan2(ax, -az);
 8001188:	6978      	ldr	r0, [r7, #20]
 800118a:	f7ff f9e5 	bl	8000558 <__aeabi_f2d>
 800118e:	4604      	mov	r4, r0
 8001190:	460d      	mov	r5, r1
 8001192:	edd7 7a03 	vldr	s15, [r7, #12]
 8001196:	eef1 7a67 	vneg.f32	s15, s15
 800119a:	ee17 3a90 	vmov	r3, s15
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9da 	bl	8000558 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	ec43 2b11 	vmov	d1, r2, r3
 80011ac:	ec45 4b10 	vmov	d0, r4, r5
 80011b0:	f00e f962 	bl	800f478 <atan2>
 80011b4:	ec53 2b10 	vmov	r2, r3, d0
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fcfc 	bl	8000bb8 <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	63bb      	str	r3, [r7, #56]	@ 0x38

	//對歐拉角進行餘弦和正弦計算，分別把計算結果儲存下來
    cosRoll  = cosf(initialRoll);
 80011c4:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80011c8:	f00e f9ba 	bl	800f540 <cosf>
 80011cc:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
    sinRoll  = sinf(initialRoll);
 80011d0:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80011d4:	f00e fa00 	bl	800f5d8 <sinf>
 80011d8:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
    cosPitch = cosf(initialPitch);
 80011dc:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80011e0:	f00e f9ae 	bl	800f540 <cosf>
 80011e4:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
    sinPitch = sinf(initialPitch);
 80011e8:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80011ec:	f00e f9f4 	bl	800f5d8 <sinf>
 80011f0:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
//    magX = mx * cosPitch + my * sinRoll * sinPitch + mz * cosRoll * sinPitch;
//    magY = my * cosRoll - mz * sinRoll;

//    initialHdg = atan2f(-magY, magX);//解算航向角

    initialHdg = atan2f(my, mx);//解算航向角
 80011f4:	edd7 0a02 	vldr	s1, [r7, #8]
 80011f8:	ed97 0a01 	vldr	s0, [r7, #4]
 80011fc:	f00e f99e 	bl	800f53c <atan2f>
 8001200:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

    cosRoll = cosf(initialRoll * 0.5f);
 8001204:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001208:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800120c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001210:	eeb0 0a67 	vmov.f32	s0, s15
 8001214:	f00e f994 	bl	800f540 <cosf>
 8001218:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
    sinRoll = sinf(initialRoll * 0.5f);
 800121c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001220:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001228:	eeb0 0a67 	vmov.f32	s0, s15
 800122c:	f00e f9d4 	bl	800f5d8 <sinf>
 8001230:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

    cosPitch = cosf(initialPitch * 0.5f);
 8001234:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001238:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800123c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001240:	eeb0 0a67 	vmov.f32	s0, s15
 8001244:	f00e f97c 	bl	800f540 <cosf>
 8001248:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
    sinPitch = sinf(initialPitch * 0.5f);
 800124c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001250:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001258:	eeb0 0a67 	vmov.f32	s0, s15
 800125c:	f00e f9bc 	bl	800f5d8 <sinf>
 8001260:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

    cosHeading = cosf(initialHdg * 0.5f);
 8001264:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001268:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800126c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	f00e f964 	bl	800f540 <cosf>
 8001278:	ed87 0a08 	vstr	s0, [r7, #32]
    sinHeading = sinf(initialHdg * 0.5f);
 800127c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001280:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001288:	eeb0 0a67 	vmov.f32	s0, s15
 800128c:	f00e f9a4 	bl	800f5d8 <sinf>
 8001290:	ed87 0a07 	vstr	s0, [r7, #28]
printf("initialRoll=%f, initialPitch=%f, initialHdg=%f \r\n", initialRoll*57.3,initialPitch*57.3,initialHdg*57.3);
 8001294:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001296:	f7ff f95f 	bl	8000558 <__aeabi_f2d>
 800129a:	a38e      	add	r3, pc, #568	@ (adr r3, 80014d4 <MargAHRSinit+0x3b4>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	f7ff f9b2 	bl	8000608 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4690      	mov	r8, r2
 80012aa:	4699      	mov	r9, r3
 80012ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80012ae:	f7ff f953 	bl	8000558 <__aeabi_f2d>
 80012b2:	a388      	add	r3, pc, #544	@ (adr r3, 80014d4 <MargAHRSinit+0x3b4>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7ff f9a6 	bl	8000608 <__aeabi_dmul>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4614      	mov	r4, r2
 80012c2:	461d      	mov	r5, r3
 80012c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80012c6:	f7ff f947 	bl	8000558 <__aeabi_f2d>
 80012ca:	a382      	add	r3, pc, #520	@ (adr r3, 80014d4 <MargAHRSinit+0x3b4>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff f99a 	bl	8000608 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012dc:	e9cd 4500 	strd	r4, r5, [sp]
 80012e0:	4642      	mov	r2, r8
 80012e2:	464b      	mov	r3, r9
 80012e4:	486c      	ldr	r0, [pc, #432]	@ (8001498 <MargAHRSinit+0x378>)
 80012e6:	f00c f8e1 	bl	800d4ac <iprintf>
		//得到四元數
    q0 = cosRoll * cosPitch * cosHeading + sinRoll * sinPitch * sinHeading;
 80012ea:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80012ee:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80012fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012fe:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001302:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001306:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800130a:	edd7 7a07 	vldr	s15, [r7, #28]
 800130e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001316:	4b61      	ldr	r3, [pc, #388]	@ (800149c <MargAHRSinit+0x37c>)
 8001318:	edc3 7a00 	vstr	s15, [r3]
    q1 = sinRoll * cosPitch * cosHeading - cosRoll * sinPitch * sinHeading;
 800131c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001320:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001328:	edd7 7a08 	vldr	s15, [r7, #32]
 800132c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001330:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001334:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001338:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800133c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001348:	4b55      	ldr	r3, [pc, #340]	@ (80014a0 <MargAHRSinit+0x380>)
 800134a:	edc3 7a00 	vstr	s15, [r3]
    q2 = cosRoll * sinPitch * cosHeading + sinRoll * cosPitch * sinHeading;
 800134e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001352:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800135a:	edd7 7a08 	vldr	s15, [r7, #32]
 800135e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001362:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001366:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800136a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800136e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137a:	4b4a      	ldr	r3, [pc, #296]	@ (80014a4 <MargAHRSinit+0x384>)
 800137c:	edc3 7a00 	vstr	s15, [r3]
    q3 = cosRoll * cosPitch * sinHeading - sinRoll * sinPitch * cosHeading;
 8001380:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001384:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001394:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8001398:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800139c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80013a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ac:	4b3e      	ldr	r3, [pc, #248]	@ (80014a8 <MargAHRSinit+0x388>)
 80013ae:	edc3 7a00 	vstr	s15, [r3]

		//把計算參考方向用到的值先都計算好,減少重複計算,因為MargAHRSupdate函式裡面要用到。
    // auxillary variables to reduce number of repeated operations, for 1st pass
    q0q0 = q0 * q0;
 80013b2:	4b3a      	ldr	r3, [pc, #232]	@ (800149c <MargAHRSinit+0x37c>)
 80013b4:	ed93 7a00 	vldr	s14, [r3]
 80013b8:	4b38      	ldr	r3, [pc, #224]	@ (800149c <MargAHRSinit+0x37c>)
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c2:	4b3a      	ldr	r3, [pc, #232]	@ (80014ac <MargAHRSinit+0x38c>)
 80013c4:	edc3 7a00 	vstr	s15, [r3]
    q0q1 = q0 * q1;
 80013c8:	4b34      	ldr	r3, [pc, #208]	@ (800149c <MargAHRSinit+0x37c>)
 80013ca:	ed93 7a00 	vldr	s14, [r3]
 80013ce:	4b34      	ldr	r3, [pc, #208]	@ (80014a0 <MargAHRSinit+0x380>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <MargAHRSinit+0x390>)
 80013da:	edc3 7a00 	vstr	s15, [r3]
    q0q2 = q0 * q2;
 80013de:	4b2f      	ldr	r3, [pc, #188]	@ (800149c <MargAHRSinit+0x37c>)
 80013e0:	ed93 7a00 	vldr	s14, [r3]
 80013e4:	4b2f      	ldr	r3, [pc, #188]	@ (80014a4 <MargAHRSinit+0x384>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ee:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <MargAHRSinit+0x394>)
 80013f0:	edc3 7a00 	vstr	s15, [r3]
    q0q3 = q0 * q3;
 80013f4:	4b29      	ldr	r3, [pc, #164]	@ (800149c <MargAHRSinit+0x37c>)
 80013f6:	ed93 7a00 	vldr	s14, [r3]
 80013fa:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <MargAHRSinit+0x388>)
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001404:	4b2c      	ldr	r3, [pc, #176]	@ (80014b8 <MargAHRSinit+0x398>)
 8001406:	edc3 7a00 	vstr	s15, [r3]
    q1q1 = q1 * q1;
 800140a:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <MargAHRSinit+0x380>)
 800140c:	ed93 7a00 	vldr	s14, [r3]
 8001410:	4b23      	ldr	r3, [pc, #140]	@ (80014a0 <MargAHRSinit+0x380>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141a:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <MargAHRSinit+0x39c>)
 800141c:	edc3 7a00 	vstr	s15, [r3]
    q1q2 = q1 * q2;
 8001420:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <MargAHRSinit+0x380>)
 8001422:	ed93 7a00 	vldr	s14, [r3]
 8001426:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MargAHRSinit+0x384>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001430:	4b23      	ldr	r3, [pc, #140]	@ (80014c0 <MargAHRSinit+0x3a0>)
 8001432:	edc3 7a00 	vstr	s15, [r3]
    q1q3 = q1 * q3;
 8001436:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <MargAHRSinit+0x380>)
 8001438:	ed93 7a00 	vldr	s14, [r3]
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <MargAHRSinit+0x388>)
 800143e:	edd3 7a00 	vldr	s15, [r3]
 8001442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001446:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <MargAHRSinit+0x3a4>)
 8001448:	edc3 7a00 	vstr	s15, [r3]
    q2q2 = q2 * q2;
 800144c:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <MargAHRSinit+0x384>)
 800144e:	ed93 7a00 	vldr	s14, [r3]
 8001452:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <MargAHRSinit+0x384>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145c:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <MargAHRSinit+0x3a8>)
 800145e:	edc3 7a00 	vstr	s15, [r3]
    q2q3 = q2 * q3;
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <MargAHRSinit+0x384>)
 8001464:	ed93 7a00 	vldr	s14, [r3]
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <MargAHRSinit+0x388>)
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MargAHRSinit+0x3ac>)
 8001474:	edc3 7a00 	vstr	s15, [r3]
    q3q3 = q3 * q3;
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <MargAHRSinit+0x388>)
 800147a:	ed93 7a00 	vldr	s14, [r3]
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <MargAHRSinit+0x388>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <MargAHRSinit+0x3b0>)
 800148a:	edc3 7a00 	vstr	s15, [r3]
}
 800148e:	bf00      	nop
 8001490:	3740      	adds	r7, #64	@ 0x40
 8001492:	46bd      	mov	sp, r7
 8001494:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001498:	08010b98 	.word	0x08010b98
 800149c:	20000048 	.word	0x20000048
 80014a0:	200044e8 	.word	0x200044e8
 80014a4:	200044ec 	.word	0x200044ec
 80014a8:	200044f0 	.word	0x200044f0
 80014ac:	20000278 	.word	0x20000278
 80014b0:	2000027c 	.word	0x2000027c
 80014b4:	20000280 	.word	0x20000280
 80014b8:	20000284 	.word	0x20000284
 80014bc:	20000288 	.word	0x20000288
 80014c0:	2000028c 	.word	0x2000028c
 80014c4:	20000290 	.word	0x20000290
 80014c8:	20000294 	.word	0x20000294
 80014cc:	20000298 	.word	0x20000298
 80014d0:	2000029c 	.word	0x2000029c
 80014d4:	66666666 	.word	0x66666666
 80014d8:	404ca666 	.word	0x404ca666
 80014dc:	00000000 	.word	0x00000000

080014e0 <MargAHRSupdate>:
}*/
void MargAHRSupdate(float gx, float gy, float gz,
                    float ax, float ay, float az,
                    float mx, float my, float mz,
                    uint8_t magDataUpdate, float dt)
{
 80014e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014e4:	b0a2      	sub	sp, #136	@ 0x88
 80014e6:	af04      	add	r7, sp, #16
 80014e8:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 80014ec:	edc7 0a0a 	vstr	s1, [r7, #40]	@ 0x28
 80014f0:	ed87 1a09 	vstr	s2, [r7, #36]	@ 0x24
 80014f4:	edc7 1a08 	vstr	s3, [r7, #32]
 80014f8:	ed87 2a07 	vstr	s4, [r7, #28]
 80014fc:	edc7 2a06 	vstr	s5, [r7, #24]
 8001500:	ed87 3a05 	vstr	s6, [r7, #20]
 8001504:	edc7 3a04 	vstr	s7, [r7, #16]
 8001508:	ed87 4a03 	vstr	s8, [r7, #12]
 800150c:	4603      	mov	r3, r0
 800150e:	edc7 4a01 	vstr	s9, [r7, #4]
 8001512:	72fb      	strb	r3, [r7, #11]
    float vx, vy, vz, wx, wy, wz;
    float q0i, q1i, q2i, q3i;

    //-------------------------------------------

    if ((MargAHRSinitialized == false)) // HJI && (magDataUpdate == true))
 8001514:	4bdf      	ldr	r3, [pc, #892]	@ (8001894 <MargAHRSupdate+0x3b4>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d110      	bne.n	800153e <MargAHRSupdate+0x5e>
    {
			//如果航姿參考系統參數還沒有初始化過，那麼執行AHRS初始化
        MargAHRSinit(ax, ay, az, mx, my, mz);
 800151c:	edd7 2a03 	vldr	s5, [r7, #12]
 8001520:	ed97 2a04 	vldr	s4, [r7, #16]
 8001524:	edd7 1a05 	vldr	s3, [r7, #20]
 8001528:	ed97 1a06 	vldr	s2, [r7, #24]
 800152c:	edd7 0a07 	vldr	s1, [r7, #28]
 8001530:	ed97 0a08 	vldr	s0, [r7, #32]
 8001534:	f7ff fdf4 	bl	8001120 <MargAHRSinit>

        MargAHRSinitialized = true;//標記航姿參考系統參數已經初始化過
 8001538:	4bd6      	ldr	r3, [pc, #856]	@ (8001894 <MargAHRSupdate+0x3b4>)
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]
    }

    //-------------------------------------------

    if (MargAHRSinitialized == true)//如果航姿參考系統參數已經初始化過
 800153e:	4bd5      	ldr	r3, [pc, #852]	@ (8001894 <MargAHRSupdate+0x3b4>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	f040 8589 	bne.w	800205a <MargAHRSupdate+0xb7a>
    {
        halfT = dt * 0.5f;//半週期，求解四元數微分方程時用得到。
 8001548:	edd7 7a01 	vldr	s15, [r7, #4]
 800154c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001554:	4bd0      	ldr	r3, [pc, #832]	@ (8001898 <MargAHRSupdate+0x3b8>)
 8001556:	edc3 7a00 	vstr	s15, [r3]

        norm = sqrt(SQR(ax) + SQR(ay) + SQR(az));//加速度歸一化
 800155a:	edd7 7a08 	vldr	s15, [r7, #32]
 800155e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001562:	edd7 7a07 	vldr	s15, [r7, #28]
 8001566:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800156a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001572:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157a:	ee17 0a90 	vmov	r0, s15
 800157e:	f7fe ffeb 	bl	8000558 <__aeabi_f2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	ec43 2b10 	vmov	d0, r2, r3
 800158a:	f00d ff77 	bl	800f47c <sqrt>
 800158e:	ec53 2b10 	vmov	r2, r3, d0
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb0f 	bl	8000bb8 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	677b      	str	r3, [r7, #116]	@ 0x74

        if (norm != 0.0f)//如果歸一化后的模等於0 ，那麼說明加速度數據或者感測器不正常，正常情況下 歸一化后的結果恒等於 1.0 ，這是重點。
 800159e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80015a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	f000 8114 	beq.w	80017d6 <MargAHRSupdate+0x2f6>
        {
            calculateAccConfidence(norm);//由於處於運動狀態，所有要計算加速度數據歸一化后的可信度
 80015ae:	ed97 0a1d 	vldr	s0, [r7, #116]	@ 0x74
 80015b2:	f7ff fd43 	bl	800103c <calculateAccConfidence>
            kpAcc = 5.0f * accConfidence; //加速度比例係數 * 可信度
 80015b6:	4bb9      	ldr	r3, [pc, #740]	@ (800189c <MargAHRSupdate+0x3bc>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80015c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c4:	4bb6      	ldr	r3, [pc, #728]	@ (80018a0 <MargAHRSupdate+0x3c0>)
 80015c6:	edc3 7a00 	vstr	s15, [r3]
            kiAcc = 0.0f * accConfidence;//加速度積分系數 * 可信度
 80015ca:	4bb4      	ldr	r3, [pc, #720]	@ (800189c <MargAHRSupdate+0x3bc>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80018a4 <MargAHRSupdate+0x3c4>
 80015d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d8:	4bb3      	ldr	r3, [pc, #716]	@ (80018a8 <MargAHRSupdate+0x3c8>)
 80015da:	edc3 7a00 	vstr	s15, [r3]

            normR = 1.0f / norm; //加速度歸一化
 80015de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015e2:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80015e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ea:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
            ax *= normR;
 80015ee:	ed97 7a08 	vldr	s14, [r7, #32]
 80015f2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80015f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fa:	edc7 7a08 	vstr	s15, [r7, #32]
            ay *= normR;
 80015fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8001602:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160a:	edc7 7a07 	vstr	s15, [r7, #28]
            az *= normR;
 800160e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001612:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161a:	edc7 7a06 	vstr	s15, [r7, #24]

            // estimated direction of gravity (v)
            vx = 2.0f * (q1q3 - q0q2);//計算方向餘弦矩陣
 800161e:	4ba3      	ldr	r3, [pc, #652]	@ (80018ac <MargAHRSupdate+0x3cc>)
 8001620:	ed93 7a00 	vldr	s14, [r3]
 8001624:	4ba2      	ldr	r3, [pc, #648]	@ (80018b0 <MargAHRSupdate+0x3d0>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001632:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
            vy = 2.0f * (q0q1 + q2q3);
 8001636:	4b9f      	ldr	r3, [pc, #636]	@ (80018b4 <MargAHRSupdate+0x3d4>)
 8001638:	ed93 7a00 	vldr	s14, [r3]
 800163c:	4b9e      	ldr	r3, [pc, #632]	@ (80018b8 <MargAHRSupdate+0x3d8>)
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001646:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800164a:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
            vz = q0q0 - q1q1 - q2q2 + q3q3;
 800164e:	4b9b      	ldr	r3, [pc, #620]	@ (80018bc <MargAHRSupdate+0x3dc>)
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	4b9a      	ldr	r3, [pc, #616]	@ (80018c0 <MargAHRSupdate+0x3e0>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800165e:	4b99      	ldr	r3, [pc, #612]	@ (80018c4 <MargAHRSupdate+0x3e4>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001668:	4b97      	ldr	r3, [pc, #604]	@ (80018c8 <MargAHRSupdate+0x3e8>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001672:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64

            // error is sum of cross product between reference direction
            // of fields and direction measured by sensors
					//誤差是由感測器測量的參考方向與方向之間的叉積,由此
					//得到一個誤差向量，通過這個誤差向量來修正陀螺儀數據。
            exAcc = vy * az - vz * ay;
 8001676:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800167a:	edd7 7a06 	vldr	s15, [r7, #24]
 800167e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001682:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8001686:	edd7 7a07 	vldr	s15, [r7, #28]
 800168a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001692:	4b8e      	ldr	r3, [pc, #568]	@ (80018cc <MargAHRSupdate+0x3ec>)
 8001694:	edc3 7a00 	vstr	s15, [r3]
            eyAcc = vz * ax - vx * az;
 8001698:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800169c:	edd7 7a08 	vldr	s15, [r7, #32]
 80016a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a4:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 80016a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b4:	4b86      	ldr	r3, [pc, #536]	@ (80018d0 <MargAHRSupdate+0x3f0>)
 80016b6:	edc3 7a00 	vstr	s15, [r3]
            ezAcc = vx * ay - vy * ax;
 80016ba:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80016be:	edd7 7a07 	vldr	s15, [r7, #28]
 80016c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c6:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 80016ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80016ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d6:	4b7f      	ldr	r3, [pc, #508]	@ (80018d4 <MargAHRSupdate+0x3f4>)
 80016d8:	edc3 7a00 	vstr	s15, [r3]


            gx += exAcc * kpAcc;//比例增益控制加速度計的收斂速度
 80016dc:	4b7b      	ldr	r3, [pc, #492]	@ (80018cc <MargAHRSupdate+0x3ec>)
 80016de:	ed93 7a00 	vldr	s14, [r3]
 80016e2:	4b6f      	ldr	r3, [pc, #444]	@ (80018a0 <MargAHRSupdate+0x3c0>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ec:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80016f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            gy += eyAcc * kpAcc;
 80016f8:	4b75      	ldr	r3, [pc, #468]	@ (80018d0 <MargAHRSupdate+0x3f0>)
 80016fa:	ed93 7a00 	vldr	s14, [r3]
 80016fe:	4b68      	ldr	r3, [pc, #416]	@ (80018a0 <MargAHRSupdate+0x3c0>)
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001708:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800170c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001710:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            gz += ezAcc * kpAcc;
 8001714:	4b6f      	ldr	r3, [pc, #444]	@ (80018d4 <MargAHRSupdate+0x3f4>)
 8001716:	ed93 7a00 	vldr	s14, [r3]
 800171a:	4b61      	ldr	r3, [pc, #388]	@ (80018a0 <MargAHRSupdate+0x3c0>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001724:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

            if (kiAcc > 0.0f)//用積分增益控制陀螺儀的偏差收斂速率
 8001730:	4b5d      	ldr	r3, [pc, #372]	@ (80018a8 <MargAHRSupdate+0x3c8>)
 8001732:	edd3 7a00 	vldr	s15, [r3]
 8001736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800173a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173e:	dd4a      	ble.n	80017d6 <MargAHRSupdate+0x2f6>
            {
                exAccInt += exAcc * kiAcc;
 8001740:	4b62      	ldr	r3, [pc, #392]	@ (80018cc <MargAHRSupdate+0x3ec>)
 8001742:	ed93 7a00 	vldr	s14, [r3]
 8001746:	4b58      	ldr	r3, [pc, #352]	@ (80018a8 <MargAHRSupdate+0x3c8>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001750:	4b61      	ldr	r3, [pc, #388]	@ (80018d8 <MargAHRSupdate+0x3f8>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800175a:	4b5f      	ldr	r3, [pc, #380]	@ (80018d8 <MargAHRSupdate+0x3f8>)
 800175c:	edc3 7a00 	vstr	s15, [r3]
                eyAccInt += eyAcc * kiAcc;
 8001760:	4b5b      	ldr	r3, [pc, #364]	@ (80018d0 <MargAHRSupdate+0x3f0>)
 8001762:	ed93 7a00 	vldr	s14, [r3]
 8001766:	4b50      	ldr	r3, [pc, #320]	@ (80018a8 <MargAHRSupdate+0x3c8>)
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001770:	4b5a      	ldr	r3, [pc, #360]	@ (80018dc <MargAHRSupdate+0x3fc>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177a:	4b58      	ldr	r3, [pc, #352]	@ (80018dc <MargAHRSupdate+0x3fc>)
 800177c:	edc3 7a00 	vstr	s15, [r3]
                ezAccInt += ezAcc * kiAcc;
 8001780:	4b54      	ldr	r3, [pc, #336]	@ (80018d4 <MargAHRSupdate+0x3f4>)
 8001782:	ed93 7a00 	vldr	s14, [r3]
 8001786:	4b48      	ldr	r3, [pc, #288]	@ (80018a8 <MargAHRSupdate+0x3c8>)
 8001788:	edd3 7a00 	vldr	s15, [r3]
 800178c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001790:	4b53      	ldr	r3, [pc, #332]	@ (80018e0 <MargAHRSupdate+0x400>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179a:	4b51      	ldr	r3, [pc, #324]	@ (80018e0 <MargAHRSupdate+0x400>)
 800179c:	edc3 7a00 	vstr	s15, [r3]

                gx += exAccInt;
 80017a0:	4b4d      	ldr	r3, [pc, #308]	@ (80018d8 <MargAHRSupdate+0x3f8>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80017aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ae:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
                gy += eyAccInt;
 80017b2:	4b4a      	ldr	r3, [pc, #296]	@ (80018dc <MargAHRSupdate+0x3fc>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80017bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                gz += ezAccInt;
 80017c4:	4b46      	ldr	r3, [pc, #280]	@ (80018e0 <MargAHRSupdate+0x400>)
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80017ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            }
        }

        //-------------------------------------------

        norm = sqrt(SQR(mx) + SQR(my) + SQR(mz));//三軸磁力計歸一化
 80017d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80017da:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017de:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f6:	ee17 0a90 	vmov	r0, s15
 80017fa:	f7fe fead 	bl	8000558 <__aeabi_f2d>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	ec43 2b10 	vmov	d0, r2, r3
 8001806:	f00d fe39 	bl	800f47c <sqrt>
 800180a:	ec53 2b10 	vmov	r2, r3, d0
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff f9d1 	bl	8000bb8 <__aeabi_d2f>
 8001816:	4603      	mov	r3, r0
 8001818:	677b      	str	r3, [r7, #116]	@ 0x74

        if ((magDataUpdate == true) && (norm != 0.0f))//如果入口參數magDataUpdate == true並且歸一化的結果norm不是0，才對磁力計數據進行更新計算
 800181a:	7afb      	ldrb	r3, [r7, #11]
 800181c:	2b01      	cmp	r3, #1
 800181e:	f040 81bb 	bne.w	8001b98 <MargAHRSupdate+0x6b8>
 8001822:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001826:	eef5 7a40 	vcmp.f32	s15, #0.0
 800182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182e:	f000 81b3 	beq.w	8001b98 <MargAHRSupdate+0x6b8>
        {
            normR = 1.0f / norm;//三軸磁場歸一化
 8001832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001836:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800183a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800183e:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
            mx *= normR;
 8001842:	ed97 7a05 	vldr	s14, [r7, #20]
 8001846:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800184a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184e:	edc7 7a05 	vstr	s15, [r7, #20]
            my *= normR;
 8001852:	ed97 7a04 	vldr	s14, [r7, #16]
 8001856:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800185a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185e:	edc7 7a04 	vstr	s15, [r7, #16]
            mz *= normR;
 8001862:	ed97 7a03 	vldr	s14, [r7, #12]
 8001866:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800186a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186e:	edc7 7a03 	vstr	s15, [r7, #12]

            // compute reference direction of flux
					//計算參考方向
            hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
 8001872:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <MargAHRSupdate+0x3e4>)
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800187c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001880:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <MargAHRSupdate+0x3e8>)
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	ee37 7a67 	vsub.f32	s14, s14, s15
 800188a:	edd7 7a05 	vldr	s15, [r7, #20]
 800188e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001892:	e027      	b.n	80018e4 <MargAHRSupdate+0x404>
 8001894:	200002a4 	.word	0x200002a4
 8001898:	200002a0 	.word	0x200002a0
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000270 	.word	0x20000270
 80018a4:	00000000 	.word	0x00000000
 80018a8:	20000274 	.word	0x20000274
 80018ac:	20000290 	.word	0x20000290
 80018b0:	20000280 	.word	0x20000280
 80018b4:	2000027c 	.word	0x2000027c
 80018b8:	20000298 	.word	0x20000298
 80018bc:	20000278 	.word	0x20000278
 80018c0:	20000288 	.word	0x20000288
 80018c4:	20000294 	.word	0x20000294
 80018c8:	2000029c 	.word	0x2000029c
 80018cc:	2000024c 	.word	0x2000024c
 80018d0:	20000250 	.word	0x20000250
 80018d4:	20000254 	.word	0x20000254
 80018d8:	20000258 	.word	0x20000258
 80018dc:	2000025c 	.word	0x2000025c
 80018e0:	20000260 	.word	0x20000260
 80018e4:	4be3      	ldr	r3, [pc, #908]	@ (8001c74 <MargAHRSupdate+0x794>)
 80018e6:	edd3 6a00 	vldr	s13, [r3]
 80018ea:	4be3      	ldr	r3, [pc, #908]	@ (8001c78 <MargAHRSupdate+0x798>)
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001900:	4bde      	ldr	r3, [pc, #888]	@ (8001c7c <MargAHRSupdate+0x79c>)
 8001902:	edd3 6a00 	vldr	s13, [r3]
 8001906:	4bde      	ldr	r3, [pc, #888]	@ (8001c80 <MargAHRSupdate+0x7a0>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001910:	edd7 7a03 	vldr	s15, [r7, #12]
 8001914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001920:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

            hy = 2.0f * (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3) + mz * (q2q3 - q0q1));
 8001924:	4bd3      	ldr	r3, [pc, #844]	@ (8001c74 <MargAHRSupdate+0x794>)
 8001926:	ed93 7a00 	vldr	s14, [r3]
 800192a:	4bd3      	ldr	r3, [pc, #844]	@ (8001c78 <MargAHRSupdate+0x798>)
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001934:	edd7 7a05 	vldr	s15, [r7, #20]
 8001938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800193c:	4bd1      	ldr	r3, [pc, #836]	@ (8001c84 <MargAHRSupdate+0x7a4>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001946:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800194a:	4bcf      	ldr	r3, [pc, #828]	@ (8001c88 <MargAHRSupdate+0x7a8>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001954:	edd7 7a04 	vldr	s15, [r7, #16]
 8001958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001960:	4bca      	ldr	r3, [pc, #808]	@ (8001c8c <MargAHRSupdate+0x7ac>)
 8001962:	edd3 6a00 	vldr	s13, [r3]
 8001966:	4bca      	ldr	r3, [pc, #808]	@ (8001c90 <MargAHRSupdate+0x7b0>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001970:	edd7 7a03 	vldr	s15, [r7, #12]
 8001974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001980:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

            hz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f - q1q1 - q2q2));
 8001984:	4bbd      	ldr	r3, [pc, #756]	@ (8001c7c <MargAHRSupdate+0x79c>)
 8001986:	ed93 7a00 	vldr	s14, [r3]
 800198a:	4bbd      	ldr	r3, [pc, #756]	@ (8001c80 <MargAHRSupdate+0x7a0>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001994:	edd7 7a05 	vldr	s15, [r7, #20]
 8001998:	ee27 7a27 	vmul.f32	s14, s14, s15
 800199c:	4bbb      	ldr	r3, [pc, #748]	@ (8001c8c <MargAHRSupdate+0x7ac>)
 800199e:	edd3 6a00 	vldr	s13, [r3]
 80019a2:	4bbb      	ldr	r3, [pc, #748]	@ (8001c90 <MargAHRSupdate+0x7b0>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80019b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019b8:	4bb2      	ldr	r3, [pc, #712]	@ (8001c84 <MargAHRSupdate+0x7a4>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80019c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019c6:	4bb3      	ldr	r3, [pc, #716]	@ (8001c94 <MargAHRSupdate+0x7b4>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019e0:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

            bx = sqrt((hx * hx) + (hy * hy));
 80019e4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80019e8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019ec:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80019f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f8:	ee17 0a90 	vmov	r0, s15
 80019fc:	f7fe fdac 	bl	8000558 <__aeabi_f2d>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	ec43 2b10 	vmov	d0, r2, r3
 8001a08:	f00d fd38 	bl	800f47c <sqrt>
 8001a0c:	ec53 2b10 	vmov	r2, r3, d0
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f7ff f8d0 	bl	8000bb8 <__aeabi_d2f>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	657b      	str	r3, [r7, #84]	@ 0x54

            bz = hz;
 8001a1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a1e:	653b      	str	r3, [r7, #80]	@ 0x50

            // estimated direction of flux (w)
					//根據參考方向估計雲臺機體方向
            wx = 2.0f * (bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2));
 8001a20:	4b9c      	ldr	r3, [pc, #624]	@ (8001c94 <MargAHRSupdate+0x7b4>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a2e:	4b96      	ldr	r3, [pc, #600]	@ (8001c88 <MargAHRSupdate+0x7a8>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a38:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a40:	4b8e      	ldr	r3, [pc, #568]	@ (8001c7c <MargAHRSupdate+0x79c>)
 8001a42:	edd3 6a00 	vldr	s13, [r3]
 8001a46:	4b8e      	ldr	r3, [pc, #568]	@ (8001c80 <MargAHRSupdate+0x7a0>)
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a50:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a60:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

            wy = 2.0f * (bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3));
 8001a64:	4b83      	ldr	r3, [pc, #524]	@ (8001c74 <MargAHRSupdate+0x794>)
 8001a66:	ed93 7a00 	vldr	s14, [r3]
 8001a6a:	4b83      	ldr	r3, [pc, #524]	@ (8001c78 <MargAHRSupdate+0x798>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a74:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a7c:	4b84      	ldr	r3, [pc, #528]	@ (8001c90 <MargAHRSupdate+0x7b0>)
 8001a7e:	edd3 6a00 	vldr	s13, [r3]
 8001a82:	4b82      	ldr	r3, [pc, #520]	@ (8001c8c <MargAHRSupdate+0x7ac>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a8c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a9c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

            wz = 2.0f * (bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2));
 8001aa0:	4b77      	ldr	r3, [pc, #476]	@ (8001c80 <MargAHRSupdate+0x7a0>)
 8001aa2:	ed93 7a00 	vldr	s14, [r3]
 8001aa6:	4b75      	ldr	r3, [pc, #468]	@ (8001c7c <MargAHRSupdate+0x79c>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab8:	4b72      	ldr	r3, [pc, #456]	@ (8001c84 <MargAHRSupdate+0x7a4>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001ac2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ac6:	4b73      	ldr	r3, [pc, #460]	@ (8001c94 <MargAHRSupdate+0x7b4>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ad0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001adc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ae0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

            exMag = my * wz - mz * wy;//三軸磁場和估計方向進行叉積運算,計算估計方向與三軸磁場的偏差
 8001ae4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ae8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af0:	edd7 6a03 	vldr	s13, [r7, #12]
 8001af4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001af8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b00:	4b65      	ldr	r3, [pc, #404]	@ (8001c98 <MargAHRSupdate+0x7b8>)
 8001b02:	edc3 7a00 	vstr	s15, [r3]
            eyMag = mz * wx - mx * wz;
 8001b06:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b0a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b12:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b16:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b22:	4b5e      	ldr	r3, [pc, #376]	@ (8001c9c <MargAHRSupdate+0x7bc>)
 8001b24:	edc3 7a00 	vstr	s15, [r3]
            ezMag = mx * wy - my * wx;
 8001b28:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b2c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b34:	edd7 6a04 	vldr	s13, [r7, #16]
 8001b38:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b44:	4b56      	ldr	r3, [pc, #344]	@ (8001ca0 <MargAHRSupdate+0x7c0>)
 8001b46:	edc3 7a00 	vstr	s15, [r3]

            // use un-extrapolated old values between magnetometer updates
            // dubious as dT does not apply to the magnetometer calculation so
            // time scaling is embedded in KpMag and KiMag
						//使用估計的舊值與磁力計值進行更新，dT不能應用在磁力計計算中，因此時間被嵌入在KpMag 和 KiMag裡面
            gx += exMag * 5.0f;//比例增益控制磁強計收斂速度
 8001b4a:	4b53      	ldr	r3, [pc, #332]	@ (8001c98 <MargAHRSupdate+0x7b8>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b58:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b60:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            gy += eyMag * 5.0f;
 8001b64:	4b4d      	ldr	r3, [pc, #308]	@ (8001c9c <MargAHRSupdate+0x7bc>)
 8001b66:	edd3 7a00 	vldr	s15, [r3]
 8001b6a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b72:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            gz += ezMag * 5.0f;
 8001b7e:	4b48      	ldr	r3, [pc, #288]	@ (8001ca0 <MargAHRSupdate+0x7c0>)
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b8c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b94:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        //-------------------------------------------

        // integrate quaternion rate
			 //四元數微分方程，其中halfT為測量週期，g為陀螺儀角速度，其餘都是已知量，這裡使用了一階龍格庫塔法求解四元數微分方程。
        q0i = (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 8001b98:	4b42      	ldr	r3, [pc, #264]	@ (8001ca4 <MargAHRSupdate+0x7c4>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	eeb1 7a67 	vneg.f32	s14, s15
 8001ba2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001baa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca8 <MargAHRSupdate+0x7c8>)
 8001bac:	edd3 6a00 	vldr	s13, [r3]
 8001bb0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <MargAHRSupdate+0x7cc>)
 8001bbe:	edd3 6a00 	vldr	s13, [r3]
 8001bc2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bce:	4b38      	ldr	r3, [pc, #224]	@ (8001cb0 <MargAHRSupdate+0x7d0>)
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        q1i = (q0 * gx + q2 * gz - q3 * gy) * halfT;
 8001bdc:	4b35      	ldr	r3, [pc, #212]	@ (8001cb4 <MargAHRSupdate+0x7d4>)
 8001bde:	ed93 7a00 	vldr	s14, [r3]
 8001be2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001be6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca8 <MargAHRSupdate+0x7c8>)
 8001bec:	edd3 6a00 	vldr	s13, [r3]
 8001bf0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001cac <MargAHRSupdate+0x7cc>)
 8001bfe:	edd3 6a00 	vldr	s13, [r3]
 8001c02:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c0e:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <MargAHRSupdate+0x7d0>)
 8001c10:	edd3 7a00 	vldr	s15, [r3]
 8001c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c18:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        q2i = (q0 * gy - q1 * gz + q3 * gx) * halfT;
 8001c1c:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <MargAHRSupdate+0x7d4>)
 8001c1e:	ed93 7a00 	vldr	s14, [r3]
 8001c22:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <MargAHRSupdate+0x7c4>)
 8001c2c:	edd3 6a00 	vldr	s13, [r3]
 8001c30:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <MargAHRSupdate+0x7cc>)
 8001c3e:	edd3 6a00 	vldr	s13, [r3]
 8001c42:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c4e:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <MargAHRSupdate+0x7d0>)
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c58:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        q3i = (q0 * gz + q1 * gy - q2 * gx) * halfT;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <MargAHRSupdate+0x7d4>)
 8001c5e:	ed93 7a00 	vldr	s14, [r3]
 8001c62:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <MargAHRSupdate+0x7c4>)
 8001c6c:	edd3 6a00 	vldr	s13, [r3]
 8001c70:	e022      	b.n	8001cb8 <MargAHRSupdate+0x7d8>
 8001c72:	bf00      	nop
 8001c74:	2000028c 	.word	0x2000028c
 8001c78:	20000284 	.word	0x20000284
 8001c7c:	20000290 	.word	0x20000290
 8001c80:	20000280 	.word	0x20000280
 8001c84:	20000288 	.word	0x20000288
 8001c88:	2000029c 	.word	0x2000029c
 8001c8c:	20000298 	.word	0x20000298
 8001c90:	2000027c 	.word	0x2000027c
 8001c94:	20000294 	.word	0x20000294
 8001c98:	20000264 	.word	0x20000264
 8001c9c:	20000268 	.word	0x20000268
 8001ca0:	2000026c 	.word	0x2000026c
 8001ca4:	200044e8 	.word	0x200044e8
 8001ca8:	200044ec 	.word	0x200044ec
 8001cac:	200044f0 	.word	0x200044f0
 8001cb0:	200002a0 	.word	0x200002a0
 8001cb4:	20000048 	.word	0x20000048
 8001cb8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cc4:	4bd0      	ldr	r3, [pc, #832]	@ (8002008 <MargAHRSupdate+0xb28>)
 8001cc6:	edd3 6a00 	vldr	s13, [r3]
 8001cca:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cd6:	4bcd      	ldr	r3, [pc, #820]	@ (800200c <MargAHRSupdate+0xb2c>)
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        q0 += q0i;
 8001ce4:	4bca      	ldr	r3, [pc, #808]	@ (8002010 <MargAHRSupdate+0xb30>)
 8001ce6:	ed93 7a00 	vldr	s14, [r3]
 8001cea:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf2:	4bc7      	ldr	r3, [pc, #796]	@ (8002010 <MargAHRSupdate+0xb30>)
 8001cf4:	edc3 7a00 	vstr	s15, [r3]
        q1 += q1i;
 8001cf8:	4bc6      	ldr	r3, [pc, #792]	@ (8002014 <MargAHRSupdate+0xb34>)
 8001cfa:	ed93 7a00 	vldr	s14, [r3]
 8001cfe:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	4bc3      	ldr	r3, [pc, #780]	@ (8002014 <MargAHRSupdate+0xb34>)
 8001d08:	edc3 7a00 	vstr	s15, [r3]
        q2 += q2i;
 8001d0c:	4bbe      	ldr	r3, [pc, #760]	@ (8002008 <MargAHRSupdate+0xb28>)
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1a:	4bbb      	ldr	r3, [pc, #748]	@ (8002008 <MargAHRSupdate+0xb28>)
 8001d1c:	edc3 7a00 	vstr	s15, [r3]
        q3 += q3i;
 8001d20:	4bbd      	ldr	r3, [pc, #756]	@ (8002018 <MargAHRSupdate+0xb38>)
 8001d22:	ed93 7a00 	vldr	s14, [r3]
 8001d26:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	4bba      	ldr	r3, [pc, #744]	@ (8002018 <MargAHRSupdate+0xb38>)
 8001d30:	edc3 7a00 	vstr	s15, [r3]

        // normalise quaternion
				//四元數歸一化，為什麼又要歸一化呢？這是因為引入了誤差向量后四元數失去了規範性了(模不等於1了),所以要重新歸一化
        normR = 1.0f / sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001d34:	4bb6      	ldr	r3, [pc, #728]	@ (8002010 <MargAHRSupdate+0xb30>)
 8001d36:	ed93 7a00 	vldr	s14, [r3]
 8001d3a:	4bb5      	ldr	r3, [pc, #724]	@ (8002010 <MargAHRSupdate+0xb30>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d44:	4bb3      	ldr	r3, [pc, #716]	@ (8002014 <MargAHRSupdate+0xb34>)
 8001d46:	edd3 6a00 	vldr	s13, [r3]
 8001d4a:	4bb2      	ldr	r3, [pc, #712]	@ (8002014 <MargAHRSupdate+0xb34>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d58:	4bab      	ldr	r3, [pc, #684]	@ (8002008 <MargAHRSupdate+0xb28>)
 8001d5a:	edd3 6a00 	vldr	s13, [r3]
 8001d5e:	4baa      	ldr	r3, [pc, #680]	@ (8002008 <MargAHRSupdate+0xb28>)
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d6c:	4baa      	ldr	r3, [pc, #680]	@ (8002018 <MargAHRSupdate+0xb38>)
 8001d6e:	edd3 6a00 	vldr	s13, [r3]
 8001d72:	4ba9      	ldr	r3, [pc, #676]	@ (8002018 <MargAHRSupdate+0xb38>)
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d80:	ee17 0a90 	vmov	r0, s15
 8001d84:	f7fe fbe8 	bl	8000558 <__aeabi_f2d>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	ec43 2b10 	vmov	d0, r2, r3
 8001d90:	f00d fb74 	bl	800f47c <sqrt>
 8001d94:	ec53 2b10 	vmov	r2, r3, d0
 8001d98:	f04f 0000 	mov.w	r0, #0
 8001d9c:	499f      	ldr	r1, [pc, #636]	@ (800201c <MargAHRSupdate+0xb3c>)
 8001d9e:	f7fe fd5d 	bl	800085c <__aeabi_ddiv>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7fe ff05 	bl	8000bb8 <__aeabi_d2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	673b      	str	r3, [r7, #112]	@ 0x70
        q0 *= normR;
 8001db2:	4b97      	ldr	r3, [pc, #604]	@ (8002010 <MargAHRSupdate+0xb30>)
 8001db4:	ed93 7a00 	vldr	s14, [r3]
 8001db8:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc0:	4b93      	ldr	r3, [pc, #588]	@ (8002010 <MargAHRSupdate+0xb30>)
 8001dc2:	edc3 7a00 	vstr	s15, [r3]
        q1 *= normR;
 8001dc6:	4b93      	ldr	r3, [pc, #588]	@ (8002014 <MargAHRSupdate+0xb34>)
 8001dc8:	ed93 7a00 	vldr	s14, [r3]
 8001dcc:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd4:	4b8f      	ldr	r3, [pc, #572]	@ (8002014 <MargAHRSupdate+0xb34>)
 8001dd6:	edc3 7a00 	vstr	s15, [r3]
        q2 *= normR;
 8001dda:	4b8b      	ldr	r3, [pc, #556]	@ (8002008 <MargAHRSupdate+0xb28>)
 8001ddc:	ed93 7a00 	vldr	s14, [r3]
 8001de0:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de8:	4b87      	ldr	r3, [pc, #540]	@ (8002008 <MargAHRSupdate+0xb28>)
 8001dea:	edc3 7a00 	vstr	s15, [r3]
        q3 *= normR;
 8001dee:	4b8a      	ldr	r3, [pc, #552]	@ (8002018 <MargAHRSupdate+0xb38>)
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dfc:	4b86      	ldr	r3, [pc, #536]	@ (8002018 <MargAHRSupdate+0xb38>)
 8001dfe:	edc3 7a00 	vstr	s15, [r3]

        // auxiliary variables to reduce number of repeated operations
				//把計算參考方向用到的值先都計算好,減少下面計算歐拉角時候的重複計算。
        q0q0 = q0 * q0;
 8001e02:	4b83      	ldr	r3, [pc, #524]	@ (8002010 <MargAHRSupdate+0xb30>)
 8001e04:	ed93 7a00 	vldr	s14, [r3]
 8001e08:	4b81      	ldr	r3, [pc, #516]	@ (8002010 <MargAHRSupdate+0xb30>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e12:	4b83      	ldr	r3, [pc, #524]	@ (8002020 <MargAHRSupdate+0xb40>)
 8001e14:	edc3 7a00 	vstr	s15, [r3]
        q0q1 = q0 * q1;
 8001e18:	4b7d      	ldr	r3, [pc, #500]	@ (8002010 <MargAHRSupdate+0xb30>)
 8001e1a:	ed93 7a00 	vldr	s14, [r3]
 8001e1e:	4b7d      	ldr	r3, [pc, #500]	@ (8002014 <MargAHRSupdate+0xb34>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e28:	4b7e      	ldr	r3, [pc, #504]	@ (8002024 <MargAHRSupdate+0xb44>)
 8001e2a:	edc3 7a00 	vstr	s15, [r3]
        q0q2 = q0 * q2;
 8001e2e:	4b78      	ldr	r3, [pc, #480]	@ (8002010 <MargAHRSupdate+0xb30>)
 8001e30:	ed93 7a00 	vldr	s14, [r3]
 8001e34:	4b74      	ldr	r3, [pc, #464]	@ (8002008 <MargAHRSupdate+0xb28>)
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3e:	4b7a      	ldr	r3, [pc, #488]	@ (8002028 <MargAHRSupdate+0xb48>)
 8001e40:	edc3 7a00 	vstr	s15, [r3]
        q0q3 = q0 * q3;
 8001e44:	4b72      	ldr	r3, [pc, #456]	@ (8002010 <MargAHRSupdate+0xb30>)
 8001e46:	ed93 7a00 	vldr	s14, [r3]
 8001e4a:	4b73      	ldr	r3, [pc, #460]	@ (8002018 <MargAHRSupdate+0xb38>)
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e54:	4b75      	ldr	r3, [pc, #468]	@ (800202c <MargAHRSupdate+0xb4c>)
 8001e56:	edc3 7a00 	vstr	s15, [r3]
        q1q1 = q1 * q1;
 8001e5a:	4b6e      	ldr	r3, [pc, #440]	@ (8002014 <MargAHRSupdate+0xb34>)
 8001e5c:	ed93 7a00 	vldr	s14, [r3]
 8001e60:	4b6c      	ldr	r3, [pc, #432]	@ (8002014 <MargAHRSupdate+0xb34>)
 8001e62:	edd3 7a00 	vldr	s15, [r3]
 8001e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6a:	4b71      	ldr	r3, [pc, #452]	@ (8002030 <MargAHRSupdate+0xb50>)
 8001e6c:	edc3 7a00 	vstr	s15, [r3]
        q1q2 = q1 * q2;
 8001e70:	4b68      	ldr	r3, [pc, #416]	@ (8002014 <MargAHRSupdate+0xb34>)
 8001e72:	ed93 7a00 	vldr	s14, [r3]
 8001e76:	4b64      	ldr	r3, [pc, #400]	@ (8002008 <MargAHRSupdate+0xb28>)
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e80:	4b6c      	ldr	r3, [pc, #432]	@ (8002034 <MargAHRSupdate+0xb54>)
 8001e82:	edc3 7a00 	vstr	s15, [r3]
        q1q3 = q1 * q3;
 8001e86:	4b63      	ldr	r3, [pc, #396]	@ (8002014 <MargAHRSupdate+0xb34>)
 8001e88:	ed93 7a00 	vldr	s14, [r3]
 8001e8c:	4b62      	ldr	r3, [pc, #392]	@ (8002018 <MargAHRSupdate+0xb38>)
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e96:	4b68      	ldr	r3, [pc, #416]	@ (8002038 <MargAHRSupdate+0xb58>)
 8001e98:	edc3 7a00 	vstr	s15, [r3]
        q2q2 = q2 * q2;
 8001e9c:	4b5a      	ldr	r3, [pc, #360]	@ (8002008 <MargAHRSupdate+0xb28>)
 8001e9e:	ed93 7a00 	vldr	s14, [r3]
 8001ea2:	4b59      	ldr	r3, [pc, #356]	@ (8002008 <MargAHRSupdate+0xb28>)
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eac:	4b63      	ldr	r3, [pc, #396]	@ (800203c <MargAHRSupdate+0xb5c>)
 8001eae:	edc3 7a00 	vstr	s15, [r3]
        q2q3 = q2 * q3;
 8001eb2:	4b55      	ldr	r3, [pc, #340]	@ (8002008 <MargAHRSupdate+0xb28>)
 8001eb4:	ed93 7a00 	vldr	s14, [r3]
 8001eb8:	4b57      	ldr	r3, [pc, #348]	@ (8002018 <MargAHRSupdate+0xb38>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8002040 <MargAHRSupdate+0xb60>)
 8001ec4:	edc3 7a00 	vstr	s15, [r3]
        q3q3 = q3 * q3;
 8001ec8:	4b53      	ldr	r3, [pc, #332]	@ (8002018 <MargAHRSupdate+0xb38>)
 8001eca:	ed93 7a00 	vldr	s14, [r3]
 8001ece:	4b52      	ldr	r3, [pc, #328]	@ (8002018 <MargAHRSupdate+0xb38>)
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed8:	4b5a      	ldr	r3, [pc, #360]	@ (8002044 <MargAHRSupdate+0xb64>)
 8001eda:	edc3 7a00 	vstr	s15, [r3]

				//最後根據四元數方向餘弦陣和歐拉角的轉換關係，把四元數轉換成歐拉角
        margAttitude500Hz[ROLL ] = atan2f(2.0f * (q0q1 + q2q3), q0q0 - q1q1 - q2q2 + q3q3);
 8001ede:	4b51      	ldr	r3, [pc, #324]	@ (8002024 <MargAHRSupdate+0xb44>)
 8001ee0:	ed93 7a00 	vldr	s14, [r3]
 8001ee4:	4b56      	ldr	r3, [pc, #344]	@ (8002040 <MargAHRSupdate+0xb60>)
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eee:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8002020 <MargAHRSupdate+0xb40>)
 8001ef4:	ed93 7a00 	vldr	s14, [r3]
 8001ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8002030 <MargAHRSupdate+0xb50>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f02:	4b4e      	ldr	r3, [pc, #312]	@ (800203c <MargAHRSupdate+0xb5c>)
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002044 <MargAHRSupdate+0xb64>)
 8001f0e:	edd3 7a00 	vldr	s15, [r3]
 8001f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f16:	eef0 0a67 	vmov.f32	s1, s15
 8001f1a:	eeb0 0a66 	vmov.f32	s0, s13
 8001f1e:	f00d fb0d 	bl	800f53c <atan2f>
 8001f22:	eef0 7a40 	vmov.f32	s15, s0
 8001f26:	4b48      	ldr	r3, [pc, #288]	@ (8002048 <MargAHRSupdate+0xb68>)
 8001f28:	edc3 7a00 	vstr	s15, [r3]
        margAttitude500Hz[PITCH] = -asinf(2.0f * (q1q3 - q0q2));
 8001f2c:	4b42      	ldr	r3, [pc, #264]	@ (8002038 <MargAHRSupdate+0xb58>)
 8001f2e:	ed93 7a00 	vldr	s14, [r3]
 8001f32:	4b3d      	ldr	r3, [pc, #244]	@ (8002028 <MargAHRSupdate+0xb48>)
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f40:	eeb0 0a67 	vmov.f32	s0, s15
 8001f44:	f00d face 	bl	800f4e4 <asinf>
 8001f48:	eef0 7a40 	vmov.f32	s15, s0
 8001f4c:	eef1 7a67 	vneg.f32	s15, s15
 8001f50:	4b3d      	ldr	r3, [pc, #244]	@ (8002048 <MargAHRSupdate+0xb68>)
 8001f52:	edc3 7a01 	vstr	s15, [r3, #4]
        margAttitude500Hz[YAW  ] = atan2f(2.0f * (q1q2 + q0q3), q0q0 + q1q1 - q2q2 - q3q3);
 8001f56:	4b37      	ldr	r3, [pc, #220]	@ (8002034 <MargAHRSupdate+0xb54>)
 8001f58:	ed93 7a00 	vldr	s14, [r3]
 8001f5c:	4b33      	ldr	r3, [pc, #204]	@ (800202c <MargAHRSupdate+0xb4c>)
 8001f5e:	edd3 7a00 	vldr	s15, [r3]
 8001f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f66:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8002020 <MargAHRSupdate+0xb40>)
 8001f6c:	ed93 7a00 	vldr	s14, [r3]
 8001f70:	4b2f      	ldr	r3, [pc, #188]	@ (8002030 <MargAHRSupdate+0xb50>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f7a:	4b30      	ldr	r3, [pc, #192]	@ (800203c <MargAHRSupdate+0xb5c>)
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f84:	4b2f      	ldr	r3, [pc, #188]	@ (8002044 <MargAHRSupdate+0xb64>)
 8001f86:	edd3 7a00 	vldr	s15, [r3]
 8001f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f8e:	eef0 0a67 	vmov.f32	s1, s15
 8001f92:	eeb0 0a66 	vmov.f32	s0, s13
 8001f96:	f00d fad1 	bl	800f53c <atan2f>
 8001f9a:	eef0 7a40 	vmov.f32	s15, s0
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <MargAHRSupdate+0xb68>)
 8001fa0:	edc3 7a02 	vstr	s15, [r3, #8]
        printf("margAttitude500Hz[ROLL]=%f, margAttitude500Hz[PITCH]=%f, margAttitude500Hz[YAW]=%f, \r\n",
        		margAttitude500Hz[ROLL ]*57.3,
 8001fa4:	4b28      	ldr	r3, [pc, #160]	@ (8002048 <MargAHRSupdate+0xb68>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fad5 	bl	8000558 <__aeabi_f2d>
        printf("margAttitude500Hz[ROLL]=%f, margAttitude500Hz[PITCH]=%f, margAttitude500Hz[YAW]=%f, \r\n",
 8001fae:	a314      	add	r3, pc, #80	@ (adr r3, 8002000 <MargAHRSupdate+0xb20>)
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	f7fe fb28 	bl	8000608 <__aeabi_dmul>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4690      	mov	r8, r2
 8001fbe:	4699      	mov	r9, r3
				margAttitude500Hz[PITCH ]*57.3,
 8001fc0:	4b21      	ldr	r3, [pc, #132]	@ (8002048 <MargAHRSupdate+0xb68>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fac7 	bl	8000558 <__aeabi_f2d>
        printf("margAttitude500Hz[ROLL]=%f, margAttitude500Hz[PITCH]=%f, margAttitude500Hz[YAW]=%f, \r\n",
 8001fca:	a30d      	add	r3, pc, #52	@ (adr r3, 8002000 <MargAHRSupdate+0xb20>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fb1a 	bl	8000608 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4614      	mov	r4, r2
 8001fda:	461d      	mov	r5, r3
				margAttitude500Hz[YAW  ]*57.3);
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <MargAHRSupdate+0xb68>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fab9 	bl	8000558 <__aeabi_f2d>
        printf("margAttitude500Hz[ROLL]=%f, margAttitude500Hz[PITCH]=%f, margAttitude500Hz[YAW]=%f, \r\n",
 8001fe6:	a306      	add	r3, pc, #24	@ (adr r3, 8002000 <MargAHRSupdate+0xb20>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fb0c 	bl	8000608 <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ff8:	e028      	b.n	800204c <MargAHRSupdate+0xb6c>
 8001ffa:	bf00      	nop
 8001ffc:	f3af 8000 	nop.w
 8002000:	66666666 	.word	0x66666666
 8002004:	404ca666 	.word	0x404ca666
 8002008:	200044ec 	.word	0x200044ec
 800200c:	200002a0 	.word	0x200002a0
 8002010:	20000048 	.word	0x20000048
 8002014:	200044e8 	.word	0x200044e8
 8002018:	200044f0 	.word	0x200044f0
 800201c:	3ff00000 	.word	0x3ff00000
 8002020:	20000278 	.word	0x20000278
 8002024:	2000027c 	.word	0x2000027c
 8002028:	20000280 	.word	0x20000280
 800202c:	20000284 	.word	0x20000284
 8002030:	20000288 	.word	0x20000288
 8002034:	2000028c 	.word	0x2000028c
 8002038:	20000290 	.word	0x20000290
 800203c:	20000294 	.word	0x20000294
 8002040:	20000298 	.word	0x20000298
 8002044:	2000029c 	.word	0x2000029c
 8002048:	200002a8 	.word	0x200002a8
 800204c:	e9cd 4500 	strd	r4, r5, [sp]
 8002050:	4642      	mov	r2, r8
 8002052:	464b      	mov	r3, r9
 8002054:	4803      	ldr	r0, [pc, #12]	@ (8002064 <MargAHRSupdate+0xb84>)
 8002056:	f00b fa29 	bl	800d4ac <iprintf>
    }
}
 800205a:	bf00      	nop
 800205c:	3778      	adds	r7, #120	@ 0x78
 800205e:	46bd      	mov	sp, r7
 8002060:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002064:	08010bcc 	.word	0x08010bcc

08002068 <matrixMultiply>:
//  Result placed in matrix C, dimension m x p
//
//  Call as: matrixMultiply(m, n, p, C, A, B)
////////////////////////////////////////////////////////////////////////////////
void matrixMultiply(uint8_t aRows, uint8_t aCols_bRows, uint8_t bCols, int16_t matrixC[], int16_t matrixA[], int16_t matrixB[])
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
 8002074:	460b      	mov	r3, r1
 8002076:	71bb      	strb	r3, [r7, #6]
 8002078:	4613      	mov	r3, r2
 800207a:	717b      	strb	r3, [r7, #5]
    uint8_t i, j, k;

    for (i = 0; i < aRows * bCols; i++)
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	e008      	b.n	8002094 <matrixMultiply+0x2c>
    {
        matrixC[i] = 0.0;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	4413      	add	r3, r2
 800208a:	2200      	movs	r2, #0
 800208c:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < aRows * bCols; i++)
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	3301      	adds	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	7979      	ldrb	r1, [r7, #5]
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	429a      	cmp	r2, r3
 80020a0:	dbef      	blt.n	8002082 <matrixMultiply+0x1a>
    }

    for (i = 0; i < aRows; i++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
 80020a6:	e04a      	b.n	800213e <matrixMultiply+0xd6>
    {
        for (j = 0; j < aCols_bRows; j++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	73bb      	strb	r3, [r7, #14]
 80020ac:	e040      	b.n	8002130 <matrixMultiply+0xc8>
        {
            for (k = 0;  k < bCols; k++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	737b      	strb	r3, [r7, #13]
 80020b2:	e036      	b.n	8002122 <matrixMultiply+0xba>
            {
                matrixC[i * bCols + k] += matrixA[i * aCols_bRows + j] * matrixB[j * bCols + k];
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	797a      	ldrb	r2, [r7, #5]
 80020b8:	fb03 f202 	mul.w	r2, r3, r2
 80020bc:	7b7b      	ldrb	r3, [r7, #13]
 80020be:	4413      	add	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	4413      	add	r3, r2
 80020c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	79b9      	ldrb	r1, [r7, #6]
 80020d0:	fb03 f101 	mul.w	r1, r3, r1
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	440b      	add	r3, r1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	69b9      	ldr	r1, [r7, #24]
 80020dc:	440b      	add	r3, r1
 80020de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e2:	b299      	uxth	r1, r3
 80020e4:	7bbb      	ldrb	r3, [r7, #14]
 80020e6:	7978      	ldrb	r0, [r7, #5]
 80020e8:	fb03 f000 	mul.w	r0, r3, r0
 80020ec:	7b7b      	ldrb	r3, [r7, #13]
 80020ee:	4403      	add	r3, r0
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	69f8      	ldr	r0, [r7, #28]
 80020f4:	4403      	add	r3, r0
 80020f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	fb11 f303 	smulbb	r3, r1, r3
 8002100:	b29b      	uxth	r3, r3
 8002102:	4413      	add	r3, r2
 8002104:	b299      	uxth	r1, r3
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	797a      	ldrb	r2, [r7, #5]
 800210a:	fb03 f202 	mul.w	r2, r3, r2
 800210e:	7b7b      	ldrb	r3, [r7, #13]
 8002110:	4413      	add	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	4413      	add	r3, r2
 8002118:	b20a      	sxth	r2, r1
 800211a:	801a      	strh	r2, [r3, #0]
            for (k = 0;  k < bCols; k++)
 800211c:	7b7b      	ldrb	r3, [r7, #13]
 800211e:	3301      	adds	r3, #1
 8002120:	737b      	strb	r3, [r7, #13]
 8002122:	7b7a      	ldrb	r2, [r7, #13]
 8002124:	797b      	ldrb	r3, [r7, #5]
 8002126:	429a      	cmp	r2, r3
 8002128:	d3c4      	bcc.n	80020b4 <matrixMultiply+0x4c>
        for (j = 0; j < aCols_bRows; j++)
 800212a:	7bbb      	ldrb	r3, [r7, #14]
 800212c:	3301      	adds	r3, #1
 800212e:	73bb      	strb	r3, [r7, #14]
 8002130:	7bba      	ldrb	r2, [r7, #14]
 8002132:	79bb      	ldrb	r3, [r7, #6]
 8002134:	429a      	cmp	r2, r3
 8002136:	d3ba      	bcc.n	80020ae <matrixMultiply+0x46>
    for (i = 0; i < aRows; i++)
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	3301      	adds	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	429a      	cmp	r2, r3
 8002144:	d3b0      	bcc.n	80020a8 <matrixMultiply+0x40>
            }
        }
    }
}
 8002146:	bf00      	nop
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
extern UART_HandleTypeDef huart2;

PUTCHAR_PROTOTYPE 
	{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 800215c:	1d39      	adds	r1, r7, #4
 800215e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002162:	2201      	movs	r2, #1
 8002164:	4803      	ldr	r0, [pc, #12]	@ (8002174 <__io_putchar+0x20>)
 8002166:	f005 f884 	bl	8007272 <HAL_UART_Transmit>
		 return ch;
 800216a:	687b      	ldr	r3, [r7, #4]

	}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000720 	.word	0x20000720

08002178 <MPU6050_Calibration>:
/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */


void MPU6050_Calibration()
{
 8002178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800217c:	b0a2      	sub	sp, #136	@ 0x88
 800217e:	af0a      	add	r7, sp, #40	@ 0x28
    uint16_t sampleRate      = 100;
 8002180:	2364      	movs	r3, #100	@ 0x64
 8002182:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    uint16_t numberOfSamples = 100;
 8002186:	2364      	movs	r3, #100	@ 0x64
 8002188:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

    float accelBias1[3]       = { 0.0f, 0.0f, 0.0f };
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	643b      	str	r3, [r7, #64]	@ 0x40
    float gyroBias1[3]        = { 0.0f, 0.0f, 0.0f };
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	637b      	str	r3, [r7, #52]	@ 0x34
    float mpu6050Temperature1 = 0.0f;
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	65fb      	str	r3, [r7, #92]	@ 0x5c

    float accelBias2[3]       = { 0.0f, 0.0f, 0.0f };
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    float gyroBias2[3]        = { 0.0f, 0.0f, 0.0f };
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
    float mpu6050Temperature2 = 0.0f;
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	65bb      	str	r3, [r7, #88]	@ 0x58

    uint16_t index;
    //mpu6050Calibrating = true;

    printf("\nMPU6050 Calibration:\n\r");
 80021e0:	489d      	ldr	r0, [pc, #628]	@ (8002458 <MPU6050_Calibration+0x2e0>)
 80021e2:	f00b f963 	bl	800d4ac <iprintf>

    ///////////////////////////////////
    // Get samples at temperature1
    ///////////////////////////////////
    IMU_STRUCT* pImu = GetImuStr_Addr();
 80021e6:	f001 faf3 	bl	80037d0 <GetImuStr_Addr>
 80021ea:	64f8      	str	r0, [r7, #76]	@ 0x4c

    printf("\nBegin 1st MPU6050 Measurements...\n");
 80021ec:	489b      	ldr	r0, [pc, #620]	@ (800245c <MPU6050_Calibration+0x2e4>)
 80021ee:	f00b f9c5 	bl	800d57c <puts>

    for (index = 0; index < numberOfSamples; index++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80021f8:	e09c      	b.n	8002334 <MPU6050_Calibration+0x1bc>
    {
    	pImu->GetData(&ImuData);
 80021fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	4898      	ldr	r0, [pc, #608]	@ (8002460 <MPU6050_Calibration+0x2e8>)
 8002200:	4798      	blx	r3
    	float temp = Read_Temperature();
 8002202:	f00a fab1 	bl	800c768 <Read_Temperature>
 8002206:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44

        accelBias1[0]    += ImuData.accel_x;
 800220a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800220e:	4b94      	ldr	r3, [pc, #592]	@ (8002460 <MPU6050_Calibration+0x2e8>)
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002218:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        accelBias1[1]    += ImuData.accel_y;
 800221c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002220:	4b8f      	ldr	r3, [pc, #572]	@ (8002460 <MPU6050_Calibration+0x2e8>)
 8002222:	edd3 7a01 	vldr	s15, [r3, #4]
 8002226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        accelBias1[2]	 += (ImuData.accel_z -9.8065);
 800222e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f991 	bl	8000558 <__aeabi_f2d>
 8002236:	4604      	mov	r4, r0
 8002238:	460d      	mov	r5, r1
 800223a:	4b89      	ldr	r3, [pc, #548]	@ (8002460 <MPU6050_Calibration+0x2e8>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f98a 	bl	8000558 <__aeabi_f2d>
 8002244:	a382      	add	r3, pc, #520	@ (adr r3, 8002450 <MPU6050_Calibration+0x2d8>)
 8002246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224a:	f7fe f825 	bl	8000298 <__aeabi_dsub>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4620      	mov	r0, r4
 8002254:	4629      	mov	r1, r5
 8002256:	f7fe f821 	bl	800029c <__adddf3>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f7fe fca9 	bl	8000bb8 <__aeabi_d2f>
 8002266:	4603      	mov	r3, r0
 8002268:	643b      	str	r3, [r7, #64]	@ 0x40
        gyroBias1[0]     += ImuData.gyro_r;
 800226a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800226e:	4b7c      	ldr	r3, [pc, #496]	@ (8002460 <MPU6050_Calibration+0x2e8>)
 8002270:	edd3 7a03 	vldr	s15, [r3, #12]
 8002274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002278:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        gyroBias1[1]     += ImuData.gyro_p;
 800227c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002280:	4b77      	ldr	r3, [pc, #476]	@ (8002460 <MPU6050_Calibration+0x2e8>)
 8002282:	edd3 7a04 	vldr	s15, [r3, #16]
 8002286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        gyroBias1[2]     += ImuData.gyro_y;
 800228e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002292:	4b73      	ldr	r3, [pc, #460]	@ (8002460 <MPU6050_Calibration+0x2e8>)
 8002294:	edd3 7a05 	vldr	s15, [r3, #20]
 8002298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        mpu6050Temperature1  += temp;
 80022a0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80022a4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80022a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ac:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

        printf("x=%f, y=%f, z=%f, accelBias1[0]=%f, accelBias1[1]=%f, accelBias1[2]=%f \r\n", ImuData.accel_x, ImuData.accel_y, ImuData.accel_z, accelBias1[0], accelBias1[1], accelBias1[2]);
 80022b0:	4b6b      	ldr	r3, [pc, #428]	@ (8002460 <MPU6050_Calibration+0x2e8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe f94f 	bl	8000558 <__aeabi_f2d>
 80022ba:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80022be:	4b68      	ldr	r3, [pc, #416]	@ (8002460 <MPU6050_Calibration+0x2e8>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f948 	bl	8000558 <__aeabi_f2d>
 80022c8:	4604      	mov	r4, r0
 80022ca:	460d      	mov	r5, r1
 80022cc:	4b64      	ldr	r3, [pc, #400]	@ (8002460 <MPU6050_Calibration+0x2e8>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe f941 	bl	8000558 <__aeabi_f2d>
 80022d6:	4680      	mov	r8, r0
 80022d8:	4689      	mov	r9, r1
 80022da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f93b 	bl	8000558 <__aeabi_f2d>
 80022e2:	4682      	mov	sl, r0
 80022e4:	468b      	mov	fp, r1
 80022e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe f935 	bl	8000558 <__aeabi_f2d>
 80022ee:	e9c7 0100 	strd	r0, r1, [r7]
 80022f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f92f 	bl	8000558 <__aeabi_f2d>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002302:	ed97 7b00 	vldr	d7, [r7]
 8002306:	ed8d 7b06 	vstr	d7, [sp, #24]
 800230a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800230e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002312:	e9cd 4500 	strd	r4, r5, [sp]
 8002316:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800231a:	4852      	ldr	r0, [pc, #328]	@ (8002464 <MPU6050_Calibration+0x2ec>)
 800231c:	f00b f8c6 	bl	800d4ac <iprintf>
        osDelay(sampleRate);
 8002320:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002324:	4618      	mov	r0, r3
 8002326:	f005 fb84 	bl	8007a32 <osDelay>
    for (index = 0; index < numberOfSamples; index++)
 800232a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800232e:	3301      	adds	r3, #1
 8002330:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8002334:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8002338:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800233c:	429a      	cmp	r2, r3
 800233e:	f4ff af5c 	bcc.w	80021fa <MPU6050_Calibration+0x82>
    }

    accelBias1[0]   /= (float) numberOfSamples;
 8002342:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002346:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002356:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    accelBias1[1]   /= (float) numberOfSamples;
 800235a:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800235e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002362:	ee07 3a90 	vmov	s15, r3
 8002366:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800236a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800236e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    accelBias1[2]   /= (float) numberOfSamples;
 8002372:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002376:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002386:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    gyroBias1[0]    /= (float) numberOfSamples;
 800238a:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800238e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800239a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    gyroBias1[1]    /= (float) numberOfSamples;
 80023a2:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80023a6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023b6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    gyroBias1[2]    /= (float) numberOfSamples;
 80023ba:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80023be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ce:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    mpu6050Temperature1 /= (float) numberOfSamples;
 80023d2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023de:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80023e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e6:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    printf("accelBias1[0]=%f, accelBias1[1]=%f, accelBias1[2]=%f \r\n",accelBias1[0],accelBias1[1],accelBias1[2]);
 80023ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f8b3 	bl	8000558 <__aeabi_f2d>
 80023f2:	4680      	mov	r8, r0
 80023f4:	4689      	mov	r9, r1
 80023f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe f8ad 	bl	8000558 <__aeabi_f2d>
 80023fe:	4604      	mov	r4, r0
 8002400:	460d      	mov	r5, r1
 8002402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f8a7 	bl	8000558 <__aeabi_f2d>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002412:	e9cd 4500 	strd	r4, r5, [sp]
 8002416:	4642      	mov	r2, r8
 8002418:	464b      	mov	r3, r9
 800241a:	4813      	ldr	r0, [pc, #76]	@ (8002468 <MPU6050_Calibration+0x2f0>)
 800241c:	f00b f846 	bl	800d4ac <iprintf>
    printf("mpu6050Temperature1=%f",mpu6050Temperature1);
 8002420:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002422:	f7fe f899 	bl	8000558 <__aeabi_f2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4810      	ldr	r0, [pc, #64]	@ (800246c <MPU6050_Calibration+0x2f4>)
 800242c:	f00b f83e 	bl	800d4ac <iprintf>
    printf("\n\nEnd 1st MPU6050 Measurements\n\r");
 8002430:	480f      	ldr	r0, [pc, #60]	@ (8002470 <MPU6050_Calibration+0x2f8>)
 8002432:	f00b f83b 	bl	800d4ac <iprintf>

    osDelay(10000);
 8002436:	f242 7010 	movw	r0, #10000	@ 0x2710
 800243a:	f005 fafa 	bl	8007a32 <osDelay>
    ///////////////////////////////////
    // Get samples at temperature2
    ///////////////////////////////////
    printf("\nBegin 2nd MPU6050 Measurements...\n\r");
 800243e:	480d      	ldr	r0, [pc, #52]	@ (8002474 <MPU6050_Calibration+0x2fc>)
 8002440:	f00b f834 	bl	800d4ac <iprintf>

    for (index = 0; index < numberOfSamples; index++)
 8002444:	2300      	movs	r3, #0
 8002446:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800244a:	e0b2      	b.n	80025b2 <MPU6050_Calibration+0x43a>
 800244c:	f3af 8000 	nop.w
 8002450:	916872b0 	.word	0x916872b0
 8002454:	40239ced 	.word	0x40239ced
 8002458:	08010c24 	.word	0x08010c24
 800245c:	08010c3c 	.word	0x08010c3c
 8002460:	200002b8 	.word	0x200002b8
 8002464:	08010c60 	.word	0x08010c60
 8002468:	08010cac 	.word	0x08010cac
 800246c:	08010ce4 	.word	0x08010ce4
 8002470:	08010cfc 	.word	0x08010cfc
 8002474:	08010d20 	.word	0x08010d20
    {
    	pImu->GetData(&ImuData);
 8002478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	48d4      	ldr	r0, [pc, #848]	@ (80027d0 <MPU6050_Calibration+0x658>)
 800247e:	4798      	blx	r3
    	float temp = Read_Temperature();
 8002480:	f00a f972 	bl	800c768 <Read_Temperature>
 8002484:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
        //rawAccel[ZAXIS].value = rawAccel[ZAXIS].value - 8192;
//    	float accel_z = ImuData.accel_z-16384;

        accelBias2[0]    += ImuData.accel_x;
 8002488:	ed97 7a08 	vldr	s14, [r7, #32]
 800248c:	4bd0      	ldr	r3, [pc, #832]	@ (80027d0 <MPU6050_Calibration+0x658>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002496:	edc7 7a08 	vstr	s15, [r7, #32]
        accelBias2[1]    += ImuData.accel_y;
 800249a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800249e:	4bcc      	ldr	r3, [pc, #816]	@ (80027d0 <MPU6050_Calibration+0x658>)
 80024a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80024a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        accelBias2[2]	 += (ImuData.accel_z -9.8065);
 80024ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe f852 	bl	8000558 <__aeabi_f2d>
 80024b4:	4604      	mov	r4, r0
 80024b6:	460d      	mov	r5, r1
 80024b8:	4bc5      	ldr	r3, [pc, #788]	@ (80027d0 <MPU6050_Calibration+0x658>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe f84b 	bl	8000558 <__aeabi_f2d>
 80024c2:	a3c1      	add	r3, pc, #772	@ (adr r3, 80027c8 <MPU6050_Calibration+0x650>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f7fd fee6 	bl	8000298 <__aeabi_dsub>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4620      	mov	r0, r4
 80024d2:	4629      	mov	r1, r5
 80024d4:	f7fd fee2 	bl	800029c <__adddf3>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f7fe fb6a 	bl	8000bb8 <__aeabi_d2f>
 80024e4:	4603      	mov	r3, r0
 80024e6:	62bb      	str	r3, [r7, #40]	@ 0x28
        gyroBias2[0]     += ImuData.gyro_r;
 80024e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80024ec:	4bb8      	ldr	r3, [pc, #736]	@ (80027d0 <MPU6050_Calibration+0x658>)
 80024ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80024f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f6:	edc7 7a05 	vstr	s15, [r7, #20]
        gyroBias2[1]     += ImuData.gyro_p;
 80024fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80024fe:	4bb4      	ldr	r3, [pc, #720]	@ (80027d0 <MPU6050_Calibration+0x658>)
 8002500:	edd3 7a04 	vldr	s15, [r3, #16]
 8002504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002508:	edc7 7a06 	vstr	s15, [r7, #24]
        gyroBias2[2]     += ImuData.gyro_y;
 800250c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002510:	4baf      	ldr	r3, [pc, #700]	@ (80027d0 <MPU6050_Calibration+0x658>)
 8002512:	edd3 7a05 	vldr	s15, [r3, #20]
 8002516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251a:	edc7 7a07 	vstr	s15, [r7, #28]
        mpu6050Temperature2  += temp;
 800251e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002522:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
        printf("x=%f, y=%f, z=%f, accelBias1[0]=%f, accelBias1[1]=%f, accelBias1[2]=%f \r\n", ImuData.accel_x, ImuData.accel_y, ImuData.accel_z, accelBias2[0], accelBias2[1], accelBias2[2]);
 800252e:	4ba8      	ldr	r3, [pc, #672]	@ (80027d0 <MPU6050_Calibration+0x658>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe f810 	bl	8000558 <__aeabi_f2d>
 8002538:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800253c:	4ba4      	ldr	r3, [pc, #656]	@ (80027d0 <MPU6050_Calibration+0x658>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe f809 	bl	8000558 <__aeabi_f2d>
 8002546:	4604      	mov	r4, r0
 8002548:	460d      	mov	r5, r1
 800254a:	4ba1      	ldr	r3, [pc, #644]	@ (80027d0 <MPU6050_Calibration+0x658>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe f802 	bl	8000558 <__aeabi_f2d>
 8002554:	4680      	mov	r8, r0
 8002556:	4689      	mov	r9, r1
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fd fffc 	bl	8000558 <__aeabi_f2d>
 8002560:	4682      	mov	sl, r0
 8002562:	468b      	mov	fp, r1
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	4618      	mov	r0, r3
 8002568:	f7fd fff6 	bl	8000558 <__aeabi_f2d>
 800256c:	e9c7 0100 	strd	r0, r1, [r7]
 8002570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd fff0 	bl	8000558 <__aeabi_f2d>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002580:	ed97 7b00 	vldr	d7, [r7]
 8002584:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002588:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800258c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002590:	e9cd 4500 	strd	r4, r5, [sp]
 8002594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002598:	488e      	ldr	r0, [pc, #568]	@ (80027d4 <MPU6050_Calibration+0x65c>)
 800259a:	f00a ff87 	bl	800d4ac <iprintf>
        osDelay(sampleRate);
 800259e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80025a2:	4618      	mov	r0, r3
 80025a4:	f005 fa45 	bl	8007a32 <osDelay>
    for (index = 0; index < numberOfSamples; index++)
 80025a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80025ac:	3301      	adds	r3, #1
 80025ae:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80025b2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 80025b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80025ba:	429a      	cmp	r2, r3
 80025bc:	f4ff af5c 	bcc.w	8002478 <MPU6050_Calibration+0x300>
    }

    accelBias2[0]   /= (float) numberOfSamples;
 80025c0:	edd7 6a08 	vldr	s13, [r7, #32]
 80025c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025d4:	edc7 7a08 	vstr	s15, [r7, #32]
    accelBias2[1]   /= (float) numberOfSamples;
 80025d8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80025dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80025e0:	ee07 3a90 	vmov	s15, r3
 80025e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    accelBias2[2]   /= (float) numberOfSamples;
 80025f0:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80025f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80025f8:	ee07 3a90 	vmov	s15, r3
 80025fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002604:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    gyroBias2[0]    /= (float) numberOfSamples;
 8002608:	edd7 6a05 	vldr	s13, [r7, #20]
 800260c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002610:	ee07 3a90 	vmov	s15, r3
 8002614:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800261c:	edc7 7a05 	vstr	s15, [r7, #20]
    gyroBias2[1]    /= (float) numberOfSamples;
 8002620:	edd7 6a06 	vldr	s13, [r7, #24]
 8002624:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002628:	ee07 3a90 	vmov	s15, r3
 800262c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002634:	edc7 7a06 	vstr	s15, [r7, #24]
    gyroBias2[2]    /= (float) numberOfSamples;
 8002638:	edd7 6a07 	vldr	s13, [r7, #28]
 800263c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002640:	ee07 3a90 	vmov	s15, r3
 8002644:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264c:	edc7 7a07 	vstr	s15, [r7, #28]
    mpu6050Temperature2 /= (float) numberOfSamples;
 8002650:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002654:	ee07 3a90 	vmov	s15, r3
 8002658:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800265c:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8002660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002664:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    printf("accelBias2[0]=%f, accelBias2[1]=%f, accelBias2[2]=%f \r\n",accelBias2[0],accelBias2[1],accelBias2[2]);
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff74 	bl	8000558 <__aeabi_f2d>
 8002670:	4680      	mov	r8, r0
 8002672:	4689      	mov	r9, r1
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff6e 	bl	8000558 <__aeabi_f2d>
 800267c:	4604      	mov	r4, r0
 800267e:	460d      	mov	r5, r1
 8002680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd ff68 	bl	8000558 <__aeabi_f2d>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002690:	e9cd 4500 	strd	r4, r5, [sp]
 8002694:	4642      	mov	r2, r8
 8002696:	464b      	mov	r3, r9
 8002698:	484f      	ldr	r0, [pc, #316]	@ (80027d8 <MPU6050_Calibration+0x660>)
 800269a:	f00a ff07 	bl	800d4ac <iprintf>
    printf("mpu6050Temperature2=%f",mpu6050Temperature2);
 800269e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80026a0:	f7fd ff5a 	bl	8000558 <__aeabi_f2d>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	484c      	ldr	r0, [pc, #304]	@ (80027dc <MPU6050_Calibration+0x664>)
 80026aa:	f00a feff 	bl	800d4ac <iprintf>
    printf("\n\nEnd 2nd MPU6050 Measurements\n\r");
 80026ae:	484c      	ldr	r0, [pc, #304]	@ (80027e0 <MPU6050_Calibration+0x668>)
 80026b0:	f00a fefc 	bl	800d4ac <iprintf>

//    pCalibrationImu->CalibrationData(&ImuCalData);
	accel_TC_Bias_Slope_x = (accelBias2[0] - accelBias1[0]) / (mpu6050Temperature2 - mpu6050Temperature1);
 80026b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80026b8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80026bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026c0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80026c4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80026c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026d0:	4b44      	ldr	r3, [pc, #272]	@ (80027e4 <MPU6050_Calibration+0x66c>)
 80026d2:	edc3 7a00 	vstr	s15, [r3]
	accel_TC_Bias_Slope_y = (accelBias2[1] - accelBias1[1]) / (mpu6050Temperature2 - mpu6050Temperature1);
 80026d6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80026da:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80026de:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026e2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80026e6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80026ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f2:	4b3d      	ldr	r3, [pc, #244]	@ (80027e8 <MPU6050_Calibration+0x670>)
 80026f4:	edc3 7a00 	vstr	s15, [r3]
	accel_TC_Bias_Slope_z = (accelBias2[2] - accelBias1[2]) / (mpu6050Temperature2 - mpu6050Temperature1);
 80026f8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80026fc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002700:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002704:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002708:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800270c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002714:	4b35      	ldr	r3, [pc, #212]	@ (80027ec <MPU6050_Calibration+0x674>)
 8002716:	edc3 7a00 	vstr	s15, [r3]

	printf("accel_TC_Bias_Slope_x=%f, accel_TC_Bias_Slope_y=%f, accel_TC_Bias_Slope_z=%f \r\n", accel_TC_Bias_Slope_x, accel_TC_Bias_Slope_y, accel_TC_Bias_Slope_z);
 800271a:	4b32      	ldr	r3, [pc, #200]	@ (80027e4 <MPU6050_Calibration+0x66c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd ff1a 	bl	8000558 <__aeabi_f2d>
 8002724:	4680      	mov	r8, r0
 8002726:	4689      	mov	r9, r1
 8002728:	4b2f      	ldr	r3, [pc, #188]	@ (80027e8 <MPU6050_Calibration+0x670>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd ff13 	bl	8000558 <__aeabi_f2d>
 8002732:	4604      	mov	r4, r0
 8002734:	460d      	mov	r5, r1
 8002736:	4b2d      	ldr	r3, [pc, #180]	@ (80027ec <MPU6050_Calibration+0x674>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7fd ff0c 	bl	8000558 <__aeabi_f2d>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002748:	e9cd 4500 	strd	r4, r5, [sp]
 800274c:	4642      	mov	r2, r8
 800274e:	464b      	mov	r3, r9
 8002750:	4827      	ldr	r0, [pc, #156]	@ (80027f0 <MPU6050_Calibration+0x678>)
 8002752:	f00a feab 	bl	800d4ac <iprintf>

	accel_TC_Bias_Intercept_x = accelBias2[0] - (accel_TC_Bias_Slope_x * mpu6050Temperature2);
 8002756:	ed97 7a08 	vldr	s14, [r7, #32]
 800275a:	4b22      	ldr	r3, [pc, #136]	@ (80027e4 <MPU6050_Calibration+0x66c>)
 800275c:	edd3 6a00 	vldr	s13, [r3]
 8002760:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276c:	4b21      	ldr	r3, [pc, #132]	@ (80027f4 <MPU6050_Calibration+0x67c>)
 800276e:	edc3 7a00 	vstr	s15, [r3]
	accel_TC_Bias_Intercept_y = accelBias2[1] - (accel_TC_Bias_Slope_y * mpu6050Temperature2);
 8002772:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002776:	4b1c      	ldr	r3, [pc, #112]	@ (80027e8 <MPU6050_Calibration+0x670>)
 8002778:	edd3 6a00 	vldr	s13, [r3]
 800277c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002788:	4b1b      	ldr	r3, [pc, #108]	@ (80027f8 <MPU6050_Calibration+0x680>)
 800278a:	edc3 7a00 	vstr	s15, [r3]
	accel_TC_Bias_Intercept_z = accelBias2[2] - (accel_TC_Bias_Slope_z * mpu6050Temperature2);
 800278e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002792:	4b16      	ldr	r3, [pc, #88]	@ (80027ec <MPU6050_Calibration+0x674>)
 8002794:	edd3 6a00 	vldr	s13, [r3]
 8002798:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800279c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a4:	4b15      	ldr	r3, [pc, #84]	@ (80027fc <MPU6050_Calibration+0x684>)
 80027a6:	edc3 7a00 	vstr	s15, [r3]

	gyro_TC_Bias_Slope_r = (gyroBias2[0] - gyroBias1[0]) / (mpu6050Temperature2 - mpu6050Temperature1);
 80027aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80027ae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80027b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027b6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80027ba:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80027be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027c2:	e01d      	b.n	8002800 <MPU6050_Calibration+0x688>
 80027c4:	f3af 8000 	nop.w
 80027c8:	916872b0 	.word	0x916872b0
 80027cc:	40239ced 	.word	0x40239ced
 80027d0:	200002b8 	.word	0x200002b8
 80027d4:	08010c60 	.word	0x08010c60
 80027d8:	08010d48 	.word	0x08010d48
 80027dc:	08010d80 	.word	0x08010d80
 80027e0:	08010d98 	.word	0x08010d98
 80027e4:	200002f8 	.word	0x200002f8
 80027e8:	200002fc 	.word	0x200002fc
 80027ec:	20000300 	.word	0x20000300
 80027f0:	08010dbc 	.word	0x08010dbc
 80027f4:	20000304 	.word	0x20000304
 80027f8:	20000308 	.word	0x20000308
 80027fc:	2000030c 	.word	0x2000030c
 8002800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002804:	4b29      	ldr	r3, [pc, #164]	@ (80028ac <MPU6050_Calibration+0x734>)
 8002806:	edc3 7a00 	vstr	s15, [r3]
	gyro_TC_Bias_Slope_p = (gyroBias2[1] - gyroBias1[1]) / (mpu6050Temperature2 - mpu6050Temperature1);
 800280a:	ed97 7a06 	vldr	s14, [r7, #24]
 800280e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002812:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002816:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800281a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800281e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002826:	4b22      	ldr	r3, [pc, #136]	@ (80028b0 <MPU6050_Calibration+0x738>)
 8002828:	edc3 7a00 	vstr	s15, [r3]
	gyro_TC_Bias_Slope_y = (gyroBias2[2] - gyroBias1[2]) / (mpu6050Temperature2 - mpu6050Temperature1);
 800282c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002830:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002834:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002838:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800283c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002840:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002848:	4b1a      	ldr	r3, [pc, #104]	@ (80028b4 <MPU6050_Calibration+0x73c>)
 800284a:	edc3 7a00 	vstr	s15, [r3]

	gyro_TC_Bias_Intercept_r = gyroBias2[0] - (gyro_TC_Bias_Slope_r * mpu6050Temperature2);
 800284e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002852:	4b16      	ldr	r3, [pc, #88]	@ (80028ac <MPU6050_Calibration+0x734>)
 8002854:	edd3 6a00 	vldr	s13, [r3]
 8002858:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800285c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002864:	4b14      	ldr	r3, [pc, #80]	@ (80028b8 <MPU6050_Calibration+0x740>)
 8002866:	edc3 7a00 	vstr	s15, [r3]
	gyro_TC_Bias_Intercept_p = gyroBias2[1] - (gyro_TC_Bias_Slope_p * mpu6050Temperature2);
 800286a:	ed97 7a06 	vldr	s14, [r7, #24]
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <MPU6050_Calibration+0x738>)
 8002870:	edd3 6a00 	vldr	s13, [r3]
 8002874:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800287c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002880:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <MPU6050_Calibration+0x744>)
 8002882:	edc3 7a00 	vstr	s15, [r3]
	gyro_TC_Bias_Intercept_y = gyroBias2[2] - (gyro_TC_Bias_Slope_y * mpu6050Temperature2);
 8002886:	ed97 7a07 	vldr	s14, [r7, #28]
 800288a:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <MPU6050_Calibration+0x73c>)
 800288c:	edd3 6a00 	vldr	s13, [r3]
 8002890:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800289c:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <MPU6050_Calibration+0x748>)
 800289e:	edc3 7a00 	vstr	s15, [r3]
    ///////////////////////////////////
}
 80028a2:	bf00      	nop
 80028a4:	3760      	adds	r7, #96	@ 0x60
 80028a6:	46bd      	mov	sp, r7
 80028a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ac:	20000310 	.word	0x20000310
 80028b0:	20000314 	.word	0x20000314
 80028b4:	20000318 	.word	0x20000318
 80028b8:	2000031c 	.word	0x2000031c
 80028bc:	20000320 	.word	0x20000320
 80028c0:	20000324 	.word	0x20000324

080028c4 <computeMPU6050TCBias>:

void computeMPU6050TCBias()
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
	float Temperature = Read_Temperature();
 80028ca:	f009 ff4d 	bl	800c768 <Read_Temperature>
 80028ce:	ed87 0a01 	vstr	s0, [r7, #4]

	accelTCBias[0] =  accel_TC_Bias_Slope_x * Temperature + accel_TC_Bias_Intercept_x;
 80028d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002990 <computeMPU6050TCBias+0xcc>)
 80028d4:	ed93 7a00 	vldr	s14, [r3]
 80028d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80028dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002994 <computeMPU6050TCBias+0xd0>)
 80028e2:	edd3 7a00 	vldr	s15, [r3]
 80028e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002998 <computeMPU6050TCBias+0xd4>)
 80028ec:	edc3 7a00 	vstr	s15, [r3]
	accelTCBias[1] =  accel_TC_Bias_Slope_y * Temperature + accel_TC_Bias_Intercept_y;
 80028f0:	4b2a      	ldr	r3, [pc, #168]	@ (800299c <computeMPU6050TCBias+0xd8>)
 80028f2:	ed93 7a00 	vldr	s14, [r3]
 80028f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028fe:	4b28      	ldr	r3, [pc, #160]	@ (80029a0 <computeMPU6050TCBias+0xdc>)
 8002900:	edd3 7a00 	vldr	s15, [r3]
 8002904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002908:	4b23      	ldr	r3, [pc, #140]	@ (8002998 <computeMPU6050TCBias+0xd4>)
 800290a:	edc3 7a01 	vstr	s15, [r3, #4]
	accelTCBias[2] =  accel_TC_Bias_Slope_z * Temperature + accel_TC_Bias_Intercept_z;
 800290e:	4b25      	ldr	r3, [pc, #148]	@ (80029a4 <computeMPU6050TCBias+0xe0>)
 8002910:	ed93 7a00 	vldr	s14, [r3]
 8002914:	edd7 7a01 	vldr	s15, [r7, #4]
 8002918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800291c:	4b22      	ldr	r3, [pc, #136]	@ (80029a8 <computeMPU6050TCBias+0xe4>)
 800291e:	edd3 7a00 	vldr	s15, [r3]
 8002922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002926:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <computeMPU6050TCBias+0xd4>)
 8002928:	edc3 7a02 	vstr	s15, [r3, #8]
	gyroTCBias[0] = gyro_TC_Bias_Slope_r * Temperature + gyro_TC_Bias_Intercept_r;
 800292c:	4b1f      	ldr	r3, [pc, #124]	@ (80029ac <computeMPU6050TCBias+0xe8>)
 800292e:	ed93 7a00 	vldr	s14, [r3]
 8002932:	edd7 7a01 	vldr	s15, [r7, #4]
 8002936:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293a:	4b1d      	ldr	r3, [pc, #116]	@ (80029b0 <computeMPU6050TCBias+0xec>)
 800293c:	edd3 7a00 	vldr	s15, [r3]
 8002940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002944:	4b1b      	ldr	r3, [pc, #108]	@ (80029b4 <computeMPU6050TCBias+0xf0>)
 8002946:	edc3 7a00 	vstr	s15, [r3]
	gyroTCBias[1]= gyro_TC_Bias_Slope_p * Temperature + gyro_TC_Bias_Intercept_p;
 800294a:	4b1b      	ldr	r3, [pc, #108]	@ (80029b8 <computeMPU6050TCBias+0xf4>)
 800294c:	ed93 7a00 	vldr	s14, [r3]
 8002950:	edd7 7a01 	vldr	s15, [r7, #4]
 8002954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002958:	4b18      	ldr	r3, [pc, #96]	@ (80029bc <computeMPU6050TCBias+0xf8>)
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002962:	4b14      	ldr	r3, [pc, #80]	@ (80029b4 <computeMPU6050TCBias+0xf0>)
 8002964:	edc3 7a01 	vstr	s15, [r3, #4]
	gyroTCBias[2]= gyro_TC_Bias_Slope_y * Temperature + gyro_TC_Bias_Intercept_y;
 8002968:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <computeMPU6050TCBias+0xfc>)
 800296a:	ed93 7a00 	vldr	s14, [r3]
 800296e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002972:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002976:	4b13      	ldr	r3, [pc, #76]	@ (80029c4 <computeMPU6050TCBias+0x100>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002980:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <computeMPU6050TCBias+0xf0>)
 8002982:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	200002f8 	.word	0x200002f8
 8002994:	20000304 	.word	0x20000304
 8002998:	20000328 	.word	0x20000328
 800299c:	200002fc 	.word	0x200002fc
 80029a0:	20000308 	.word	0x20000308
 80029a4:	20000300 	.word	0x20000300
 80029a8:	2000030c 	.word	0x2000030c
 80029ac:	20000310 	.word	0x20000310
 80029b0:	2000031c 	.word	0x2000031c
 80029b4:	20000334 	.word	0x20000334
 80029b8:	20000314 	.word	0x20000314
 80029bc:	20000320 	.word	0x20000320
 80029c0:	20000318 	.word	0x20000318
 80029c4:	20000324 	.word	0x20000324

080029c8 <computeMPU6050RTData>:
void computeMPU6050RTData(void)
{
 80029c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029cc:	b092      	sub	sp, #72	@ 0x48
 80029ce:	af04      	add	r7, sp, #16
    uint8_t  axis;
    uint16_t samples;

    IMU_STRUCT* pImu = GetImuStr_Addr();
 80029d0:	f000 fefe 	bl	80037d0 <GetImuStr_Addr>
 80029d4:	6338      	str	r0, [r7, #48]	@ 0x30

    double accelSum[3]    = { 0.0f, 0.0f, 0.0f };
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double gyroSum[3]     = { 0.0f, 0.0f, 0.0f };
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	e9c7 2300 	strd	r2, r3, [r7]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	e9c7 2304 	strd	r2, r3, [r7, #16]

//    mpu6050Calibrating = true;

//    for (samples = 0; samples < 5000; samples++)
    for (samples = 0; samples < 1; samples++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002a22:	e09c      	b.n	8002b5e <computeMPU6050RTData+0x196>
    {
        //readMPU6050();
    	computeMPU6050TCBias();
 8002a24:	f7ff ff4e 	bl	80028c4 <computeMPU6050TCBias>
        pImu->GetData(&ImuData);
 8002a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	489b      	ldr	r0, [pc, #620]	@ (8002c9c <computeMPU6050RTData+0x2d4>)
 8002a2e:	4798      	blx	r3

        accelSum[0] += ImuData.accel_x - accelTCBias[0];
 8002a30:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002a34:	4b99      	ldr	r3, [pc, #612]	@ (8002c9c <computeMPU6050RTData+0x2d4>)
 8002a36:	ed93 7a00 	vldr	s14, [r3]
 8002a3a:	4b99      	ldr	r3, [pc, #612]	@ (8002ca0 <computeMPU6050RTData+0x2d8>)
 8002a3c:	edd3 7a00 	vldr	s15, [r3]
 8002a40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a44:	ee17 0a90 	vmov	r0, s15
 8002a48:	f7fd fd86 	bl	8000558 <__aeabi_f2d>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4620      	mov	r0, r4
 8002a52:	4629      	mov	r1, r5
 8002a54:	f7fd fc22 	bl	800029c <__adddf3>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        accelSum[1] += ImuData.accel_y - accelTCBias[1];
 8002a60:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a64:	4b8d      	ldr	r3, [pc, #564]	@ (8002c9c <computeMPU6050RTData+0x2d4>)
 8002a66:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a6a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ca0 <computeMPU6050RTData+0x2d8>)
 8002a6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a74:	ee17 0a90 	vmov	r0, s15
 8002a78:	f7fd fd6e 	bl	8000558 <__aeabi_f2d>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4620      	mov	r0, r4
 8002a82:	4629      	mov	r1, r5
 8002a84:	f7fd fc0a 	bl	800029c <__adddf3>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        accelSum[2] += ImuData.accel_z - accelTCBias[2];
 8002a90:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002a94:	4b81      	ldr	r3, [pc, #516]	@ (8002c9c <computeMPU6050RTData+0x2d4>)
 8002a96:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a9a:	4b81      	ldr	r3, [pc, #516]	@ (8002ca0 <computeMPU6050RTData+0x2d8>)
 8002a9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa4:	ee17 0a90 	vmov	r0, s15
 8002aa8:	f7fd fd56 	bl	8000558 <__aeabi_f2d>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	4629      	mov	r1, r5
 8002ab4:	f7fd fbf2 	bl	800029c <__adddf3>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

        gyroSum[0]  += ImuData.gyro_r  - gyroTCBias[0];
 8002ac0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ac4:	4b75      	ldr	r3, [pc, #468]	@ (8002c9c <computeMPU6050RTData+0x2d4>)
 8002ac6:	ed93 7a03 	vldr	s14, [r3, #12]
 8002aca:	4b76      	ldr	r3, [pc, #472]	@ (8002ca4 <computeMPU6050RTData+0x2dc>)
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad4:	ee17 0a90 	vmov	r0, s15
 8002ad8:	f7fd fd3e 	bl	8000558 <__aeabi_f2d>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	f7fd fbda 	bl	800029c <__adddf3>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	e9c7 2300 	strd	r2, r3, [r7]
        gyroSum[1]  += ImuData.gyro_p  - gyroTCBias[1];
 8002af0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002af4:	4b69      	ldr	r3, [pc, #420]	@ (8002c9c <computeMPU6050RTData+0x2d4>)
 8002af6:	ed93 7a04 	vldr	s14, [r3, #16]
 8002afa:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca4 <computeMPU6050RTData+0x2dc>)
 8002afc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b04:	ee17 0a90 	vmov	r0, s15
 8002b08:	f7fd fd26 	bl	8000558 <__aeabi_f2d>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4620      	mov	r0, r4
 8002b12:	4629      	mov	r1, r5
 8002b14:	f7fd fbc2 	bl	800029c <__adddf3>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        gyroSum[2]  += ImuData.gyro_y  - gyroTCBias[2];
 8002b20:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b24:	4b5d      	ldr	r3, [pc, #372]	@ (8002c9c <computeMPU6050RTData+0x2d4>)
 8002b26:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b2a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ca4 <computeMPU6050RTData+0x2dc>)
 8002b2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b34:	ee17 0a90 	vmov	r0, s15
 8002b38:	f7fd fd0e 	bl	8000558 <__aeabi_f2d>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4620      	mov	r0, r4
 8002b42:	4629      	mov	r1, r5
 8002b44:	f7fd fbaa 	bl	800029c <__adddf3>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        //delayMicroseconds(500);
        osDelay(1000);
 8002b50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b54:	f004 ff6d 	bl	8007a32 <osDelay>
    for (samples = 0; samples < 1; samples++)
 8002b58:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8002b5e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f43f af5f 	beq.w	8002a24 <computeMPU6050RTData+0x5c>
    }

    for (axis = 0; axis < 3; axis++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002b6c:	e035      	b.n	8002bda <computeMPU6050RTData+0x212>
    {
			//對之前積分的5000次加速度數據的結果求平均后然後乘以最小刻度值(1/8192) * 9.8065
    	//gyroSum[axis]   = accelSum[axis] / 50.0f * ACCEL_SCALE_FACTOR;
    	gyroSum[axis]   = accelSum[axis] / 50.0f;
 8002b6e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	3338      	adds	r3, #56	@ 0x38
 8002b76:	443b      	add	r3, r7
 8002b78:	3b20      	subs	r3, #32
 8002b7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b7e:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	4b48      	ldr	r3, [pc, #288]	@ (8002ca8 <computeMPU6050RTData+0x2e0>)
 8002b88:	f7fd fe68 	bl	800085c <__aeabi_ddiv>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	00e1      	lsls	r1, r4, #3
 8002b92:	3138      	adds	r1, #56	@ 0x38
 8002b94:	4439      	add	r1, r7
 8002b96:	3938      	subs	r1, #56	@ 0x38
 8002b98:	e9c1 2300 	strd	r2, r3, [r1]


        gyroRTBias[axis] = gyroSum[axis]  / 50.0f;
 8002b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	3338      	adds	r3, #56	@ 0x38
 8002ba4:	443b      	add	r3, r7
 8002ba6:	3b38      	subs	r3, #56	@ 0x38
 8002ba8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca8 <computeMPU6050RTData+0x2e0>)
 8002bb2:	f7fd fe53 	bl	800085c <__aeabi_ddiv>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	f897 4037 	ldrb.w	r4, [r7, #55]	@ 0x37
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f7fd fff9 	bl	8000bb8 <__aeabi_d2f>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	4938      	ldr	r1, [pc, #224]	@ (8002cac <computeMPU6050RTData+0x2e4>)
 8002bca:	00a3      	lsls	r3, r4, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	601a      	str	r2, [r3, #0]
    for (axis = 0; axis < 3; axis++)
 8002bd0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002bda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d9c5      	bls.n	8002b6e <computeMPU6050RTData+0x1a6>
    }
    printf("gyroRTBias[0]=%f, gyroRTBias=%f, gyroRTBias[2]=%f, \r\n",gyroRTBias[0],gyroRTBias[1],gyroRTBias[2]);
 8002be2:	4b32      	ldr	r3, [pc, #200]	@ (8002cac <computeMPU6050RTData+0x2e4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd fcb6 	bl	8000558 <__aeabi_f2d>
 8002bec:	4680      	mov	r8, r0
 8002bee:	4689      	mov	r9, r1
 8002bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8002cac <computeMPU6050RTData+0x2e4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fd fcaf 	bl	8000558 <__aeabi_f2d>
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	460d      	mov	r5, r1
 8002bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8002cac <computeMPU6050RTData+0x2e4>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fca8 	bl	8000558 <__aeabi_f2d>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c10:	e9cd 4500 	strd	r4, r5, [sp]
 8002c14:	4642      	mov	r2, r8
 8002c16:	464b      	mov	r3, r9
 8002c18:	4825      	ldr	r0, [pc, #148]	@ (8002cb0 <computeMPU6050RTData+0x2e8>)
 8002c1a:	f00a fc47 	bl	800d4ac <iprintf>

    accelOneG = sqrt(SQR(accelSum[XAXIS]) + SQR(accelSum[YAXIS]) + SQR(accelSum[ZAXIS]));
 8002c1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c26:	f7fd fcef 	bl	8000608 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4614      	mov	r4, r2
 8002c30:	461d      	mov	r5, r3
 8002c32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c3a:	f7fd fce5 	bl	8000608 <__aeabi_dmul>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4620      	mov	r0, r4
 8002c44:	4629      	mov	r1, r5
 8002c46:	f7fd fb29 	bl	800029c <__adddf3>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4614      	mov	r4, r2
 8002c50:	461d      	mov	r5, r3
 8002c52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c5a:	f7fd fcd5 	bl	8000608 <__aeabi_dmul>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4620      	mov	r0, r4
 8002c64:	4629      	mov	r1, r5
 8002c66:	f7fd fb19 	bl	800029c <__adddf3>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	ec43 2b17 	vmov	d7, r2, r3
 8002c72:	eeb0 0a47 	vmov.f32	s0, s14
 8002c76:	eef0 0a67 	vmov.f32	s1, s15
 8002c7a:	f00c fbff 	bl	800f47c <sqrt>
 8002c7e:	ec53 2b10 	vmov	r2, r3, d0
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	f7fd ff97 	bl	8000bb8 <__aeabi_d2f>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4a09      	ldr	r2, [pc, #36]	@ (8002cb4 <computeMPU6050RTData+0x2ec>)
 8002c8e:	6013      	str	r3, [r2, #0]

//    mpu6050Calibrating = false;
}
 8002c90:	bf00      	nop
 8002c92:	3738      	adds	r7, #56	@ 0x38
 8002c94:	46bd      	mov	sp, r7
 8002c96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200002b8 	.word	0x200002b8
 8002ca0:	20000328 	.word	0x20000328
 8002ca4:	20000334 	.word	0x20000334
 8002ca8:	40490000 	.word	0x40490000
 8002cac:	20000358 	.word	0x20000358
 8002cb0:	08010e0c 	.word	0x08010e0c
 8002cb4:	20000008 	.word	0x20000008

08002cb8 <initOrientation>:
    printf("Pitch = %f,", P);
    printf("Roll= %f ,", R);
    printf("Yaw= %f\r\n", Y);
}
void initOrientation()
{
 8002cb8:	b5b0      	push	{r4, r5, r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af02      	add	r7, sp, #8
    int initLoops = 150;
 8002cbe:	2396      	movs	r3, #150	@ 0x96
 8002cc0:	613b      	str	r3, [r7, #16]
    float accAngle[3] = { 0.0f, 0.0f, 0.0f };
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	60bb      	str	r3, [r7, #8]
    int i;
    IMU_STRUCT* pImu = GetImuStr_Addr();
 8002cd4:	f000 fd7c 	bl	80037d0 <GetImuStr_Addr>
 8002cd8:	60f8      	str	r0, [r7, #12]

    for (i = 0; i < initLoops; i++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e074      	b.n	8002dca <initOrientation+0x112>
    {
       // readMPU6050();//從MPU6050得到加速度和陀螺儀數據，並進行 與初始化方位估計矩陣（根據IMU單元的方位確定的矩陣A ） 相乘后的數據
    	pImu->GetData(&ImuData);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4856      	ldr	r0, [pc, #344]	@ (8002e40 <initOrientation+0x188>)
 8002ce6:	4798      	blx	r3

        computeMPU6050TCBias();//	計算溫度補償偏差值
 8002ce8:	f7ff fdec 	bl	80028c4 <computeMPU6050TCBias>

			//（矩陣相乘后的加速度數據-溫度補償偏差）* （(1/8192) * 9.8065）
		//(1/8192) * 9.8065  (8192 LSB = 1 G)
		 //1G量程的8192個數字量分之1，對應重力加速度9.8065m/1G的8192分之1
        accel500Hz[0] = (ImuData.accel_x - accelTCBias[0]);// * ACCEL_SCALE_FACTOR;
 8002cec:	4b54      	ldr	r3, [pc, #336]	@ (8002e40 <initOrientation+0x188>)
 8002cee:	ed93 7a00 	vldr	s14, [r3]
 8002cf2:	4b54      	ldr	r3, [pc, #336]	@ (8002e44 <initOrientation+0x18c>)
 8002cf4:	edd3 7a00 	vldr	s15, [r3]
 8002cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfc:	4b52      	ldr	r3, [pc, #328]	@ (8002e48 <initOrientation+0x190>)
 8002cfe:	edc3 7a00 	vstr	s15, [r3]
        accel500Hz[1] = (ImuData.accel_y - accelTCBias[1]);// * ACCEL_SCALE_FACTOR;
 8002d02:	4b4f      	ldr	r3, [pc, #316]	@ (8002e40 <initOrientation+0x188>)
 8002d04:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d08:	4b4e      	ldr	r3, [pc, #312]	@ (8002e44 <initOrientation+0x18c>)
 8002d0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d12:	4b4d      	ldr	r3, [pc, #308]	@ (8002e48 <initOrientation+0x190>)
 8002d14:	edc3 7a01 	vstr	s15, [r3, #4]
        accel500Hz[2] = -(ImuData.accel_z - accelTCBias[2]);// * ACCEL_SCALE_FACTOR;
 8002d18:	4b49      	ldr	r3, [pc, #292]	@ (8002e40 <initOrientation+0x188>)
 8002d1a:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d1e:	4b49      	ldr	r3, [pc, #292]	@ (8002e44 <initOrientation+0x18c>)
 8002d20:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d28:	eef1 7a67 	vneg.f32	s15, s15
 8002d2c:	4b46      	ldr	r3, [pc, #280]	@ (8002e48 <initOrientation+0x190>)
 8002d2e:	edc3 7a02 	vstr	s15, [r3, #8]

			//進行歐拉角積分運算
        accAngle[0]  += atan2f(-accel500Hz[1], -accel500Hz[2]);//Roll = Y & Z
 8002d32:	4b45      	ldr	r3, [pc, #276]	@ (8002e48 <initOrientation+0x190>)
 8002d34:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d38:	eeb1 7a67 	vneg.f32	s14, s15
 8002d3c:	4b42      	ldr	r3, [pc, #264]	@ (8002e48 <initOrientation+0x190>)
 8002d3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d42:	eef1 7a67 	vneg.f32	s15, s15
 8002d46:	eef0 0a67 	vmov.f32	s1, s15
 8002d4a:	eeb0 0a47 	vmov.f32	s0, s14
 8002d4e:	f00c fbf5 	bl	800f53c <atan2f>
 8002d52:	eeb0 7a40 	vmov.f32	s14, s0
 8002d56:	edd7 7a00 	vldr	s15, [r7]
 8002d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d5e:	edc7 7a00 	vstr	s15, [r7]
        accAngle[1] += atan2f(accel500Hz[0], -accel500Hz[2]); // Pitch = X &Z
 8002d62:	4b39      	ldr	r3, [pc, #228]	@ (8002e48 <initOrientation+0x190>)
 8002d64:	ed93 7a00 	vldr	s14, [r3]
 8002d68:	4b37      	ldr	r3, [pc, #220]	@ (8002e48 <initOrientation+0x190>)
 8002d6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d6e:	eef1 7a67 	vneg.f32	s15, s15
 8002d72:	eef0 0a67 	vmov.f32	s1, s15
 8002d76:	eeb0 0a47 	vmov.f32	s0, s14
 8002d7a:	f00c fbdf 	bl	800f53c <atan2f>
 8002d7e:	eeb0 7a40 	vmov.f32	s14, s0
 8002d82:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8a:	edc7 7a01 	vstr	s15, [r7, #4]

			//求取歐拉角算數平均值
        accAngleSmooth[0 ] = accAngle[0 ] / (float)initLoops;
 8002d8e:	edd7 6a00 	vldr	s13, [r7]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	ee07 3a90 	vmov	s15, r3
 8002d98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002da0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e4c <initOrientation+0x194>)
 8002da2:	edc3 7a00 	vstr	s15, [r3]
        accAngleSmooth[1] = accAngle[1] / (float)initLoops;
 8002da6:	edd7 6a01 	vldr	s13, [r7, #4]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	ee07 3a90 	vmov	s15, r3
 8002db0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002db8:	4b24      	ldr	r3, [pc, #144]	@ (8002e4c <initOrientation+0x194>)
 8002dba:	edc3 7a01 	vstr	s15, [r3, #4]

        osDelay(2);
 8002dbe:	2002      	movs	r0, #2
 8002dc0:	f004 fe37 	bl	8007a32 <osDelay>
    for (i = 0; i < initLoops; i++)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	db86      	blt.n	8002ce0 <initOrientation+0x28>
    }

		//得到目前方位 ,初始化一次，不要振動雲臺，因為這裡只用了加速度數據計算歐拉角（加速度數據是長期可信的），但是加速度計對
		//振動很敏感，所以?了減小誤差，初始化方位的時候不要振動雲臺。
    evvgcCFAttitude500Hz[0] = accAngleSmooth[0];
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e4c <initOrientation+0x194>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e50 <initOrientation+0x198>)
 8002dd8:	6013      	str	r3, [r2, #0]
    evvgcCFAttitude500Hz[1 ] = accAngleSmooth[1];
 8002dda:	4b1c      	ldr	r3, [pc, #112]	@ (8002e4c <initOrientation+0x194>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4a1c      	ldr	r2, [pc, #112]	@ (8002e50 <initOrientation+0x198>)
 8002de0:	6053      	str	r3, [r2, #4]
    evvgcCFAttitude500Hz[2  ] = 0.0f;
 8002de2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <initOrientation+0x198>)
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
    printf("accAngleSmooth[0]=%f, accAngleSmooth[1]=%f \r\n", accAngleSmooth[0]*57.3, accAngleSmooth[1]*57.3);
 8002dea:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <initOrientation+0x194>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fbb2 	bl	8000558 <__aeabi_f2d>
 8002df4:	a310      	add	r3, pc, #64	@ (adr r3, 8002e38 <initOrientation+0x180>)
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	f7fd fc05 	bl	8000608 <__aeabi_dmul>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4614      	mov	r4, r2
 8002e04:	461d      	mov	r5, r3
 8002e06:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <initOrientation+0x194>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd fba4 	bl	8000558 <__aeabi_f2d>
 8002e10:	a309      	add	r3, pc, #36	@ (adr r3, 8002e38 <initOrientation+0x180>)
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	f7fd fbf7 	bl	8000608 <__aeabi_dmul>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	e9cd 2300 	strd	r2, r3, [sp]
 8002e22:	4622      	mov	r2, r4
 8002e24:	462b      	mov	r3, r5
 8002e26:	480b      	ldr	r0, [pc, #44]	@ (8002e54 <initOrientation+0x19c>)
 8002e28:	f00a fb40 	bl	800d4ac <iprintf>
}
 8002e2c:	bf00      	nop
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bdb0      	pop	{r4, r5, r7, pc}
 8002e34:	f3af 8000 	nop.w
 8002e38:	66666666 	.word	0x66666666
 8002e3c:	404ca666 	.word	0x404ca666
 8002e40:	200002b8 	.word	0x200002b8
 8002e44:	20000328 	.word	0x20000328
 8002e48:	20000340 	.word	0x20000340
 8002e4c:	20000370 	.word	0x20000370
 8002e50:	20000364 	.word	0x20000364
 8002e54:	08010e68 	.word	0x08010e68

08002e58 <getOrientation>:
//此函式是???位估計翄核心函弿
void getOrientation(float *smoothAcc, float *orient, float *accData, float *gyroData, float dt)
{
 8002e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e5c:	ed2d 8b02 	vpush	{d8}
 8002e60:	b090      	sub	sp, #64	@ 0x40
 8002e62:	af04      	add	r7, sp, #16
 8002e64:	6178      	str	r0, [r7, #20]
 8002e66:	6139      	str	r1, [r7, #16]
 8002e68:	60fa      	str	r2, [r7, #12]
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	ed87 0a01 	vstr	s0, [r7, #4]
    float accAngle[3];
    float gyroRate[3];

	//通過使用atan2f函式計算加速度數據得到歐拉角 滾轉角和 俯仰角。
    accAngle[0] = atan2f(-accData[1], -accData[2]); //Roll = Y & Z
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3304      	adds	r3, #4
 8002e74:	edd3 7a00 	vldr	s15, [r3]
 8002e78:	eeb1 7a67 	vneg.f32	s14, s15
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	edd3 7a00 	vldr	s15, [r3]
 8002e84:	eef1 7a67 	vneg.f32	s15, s15
 8002e88:	eef0 0a67 	vmov.f32	s1, s15
 8002e8c:	eeb0 0a47 	vmov.f32	s0, s14
 8002e90:	f00c fb54 	bl	800f53c <atan2f>
 8002e94:	eef0 7a40 	vmov.f32	s15, s0
 8002e98:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    accAngle[1] = atan2f(accData[0], -accData[2]); //Pitch = X & Z
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	ed93 7a00 	vldr	s14, [r3]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	eef1 7a67 	vneg.f32	s15, s15
 8002eae:	eef0 0a67 	vmov.f32	s1, s15
 8002eb2:	eeb0 0a47 	vmov.f32	s0, s14
 8002eb6:	f00c fb41 	bl	800f53c <atan2f>
 8002eba:	eef0 7a40 	vmov.f32	s15, s0
 8002ebe:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
//printf("accAngle[0]=%f, accAngle[1]=%f, ", accAngle[0]*57.3,accAngle[1]*57.3);

	//其中 smoothAcc 是通過加速度數據經過atan2f函式計算得來的歐拉角，並且進行了一階滯後濾波
	//（此濾波演算法也屬於低通濾波的一種），優點： 對週期性干擾具有良好的抑制作用 適用於波動頻率較高的場合,
	// 缺點： 相位滯後，靈敏度低 滯後程度取決於a值大小， 不能消除濾波頻率高於採樣頻率的1/2的干擾訊號,程式碼中a的值是99.0f
    smoothAcc[0]  = ((smoothAcc[0 ] * 70.0f) + accAngle[0 ]*30.0f) / 100.0f;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	edd3 7a00 	vldr	s15, [r3]
 8002ec8:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80030d0 <getOrientation+0x278>
 8002ecc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ed0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ed4:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8002ed8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002edc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee0:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80030d4 <getOrientation+0x27c>
 8002ee4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	edc3 7a00 	vstr	s15, [r3]
    smoothAcc[1] = ((smoothAcc[1] *70.0f) + accAngle[1]*30.0f) / 100.0f;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	edd3 7a00 	vldr	s15, [r3]
 8002ef6:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80030d0 <getOrientation+0x278>
 8002efa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002efe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002f02:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8002f06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	3304      	adds	r3, #4
 8002f12:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80030d4 <getOrientation+0x27c>
 8002f16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f1a:	edc3 7a00 	vstr	s15, [r3]
//printf("smoothAcc[0]=%f, smoothAcc[1]=%f, gyroData[1]=%f ",smoothAcc[0]*57.3, smoothAcc[1]*57.3, gyroData[1]*57.3);

    gyroRate[1] =  gyroData[1];
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61fb      	str	r3, [r7, #28]
	//而陀螺儀雖然對振動這些不敏感，但長期使用陀螺儀會出現漂移，因此我們要進行互補，短期相信陀螺儀，長期相信加速度計.
	//先通過加速度計得到的角度減去上一次融合后的角度然後乘以一個比例係數，這個比例係數越小，融合的加速度計的數據比重越小，
	//短期相信陀螺儀，所以陀螺儀的比重這裡是1，長期相信加速度計，加速度計的數據用來修正陀螺儀的漂移產生的誤差，
	//這樣對陀螺儀的漂移進行了修正，有效地抑制了加速度計和陀螺儀各自單獨工作時候的偏差.
//    orient[1]   = (orient[1] + gyroRate[1] * dt) + 0.0002f * (smoothAcc[1] - orient[1]);
    orient[1]   = (orient[1] + gyroRate[1] * dt) + 0.02f * (smoothAcc[1] - orient[1]);
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	3304      	adds	r3, #4
 8002f28:	ed93 7a00 	vldr	s14, [r3]
 8002f2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f30:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	edd3 6a00 	vldr	s13, [r3]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	3304      	adds	r3, #4
 8002f48:	edd3 7a00 	vldr	s15, [r3]
 8002f4c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f50:	eddf 6a61 	vldr	s13, [pc, #388]	@ 80030d8 <getOrientation+0x280>
 8002f54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f60:	edc3 7a00 	vstr	s15, [r3]

		//可以用正弦或餘弦和x軸單獨算出角度,因為我們知道重力的大小
	 //但是IMU單元必須是靜止水平狀態
    gyroRate[0]  =  gyroData[0] * cosf(fabsf(orient[1])) + gyroData[2] * sinf(orient[1]);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	ed93 8a00 	vldr	s16, [r3]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	eef0 7ae7 	vabs.f32	s15, s15
 8002f76:	eeb0 0a67 	vmov.f32	s0, s15
 8002f7a:	f00c fae1 	bl	800f540 <cosf>
 8002f7e:	eef0 7a40 	vmov.f32	s15, s0
 8002f82:	ee28 8a27 	vmul.f32	s16, s16, s15
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3308      	adds	r3, #8
 8002f8a:	edd3 8a00 	vldr	s17, [r3]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	3304      	adds	r3, #4
 8002f92:	edd3 7a00 	vldr	s15, [r3]
 8002f96:	eeb0 0a67 	vmov.f32	s0, s15
 8002f9a:	f00c fb1d 	bl	800f5d8 <sinf>
 8002f9e:	eef0 7a40 	vmov.f32	s15, s0
 8002fa2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002fa6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002faa:	edc7 7a06 	vstr	s15, [r7, #24]
	//答：加速度計和陀螺儀都能計算出姿態，但為何要對它們融合，是因為加速度計對振動之類的擾動很敏感，但長期數據計算出的姿態可信，
	//而陀螺儀雖然對振動這些不敏感，但長期使用陀螺儀會出現漂移，因此我們要進行互補，短期相信陀螺儀，長期相信加速度計.
	//先通過加速度計得到的角度減去上一次融合后的角度然後乘以一個比例係數，這個比例係數越小，融合的加速度計的數據比重越小，
	//短期相信陀螺儀，所以陀螺儀的比重這裡是1，長期相信加速度計，加速度計的數據用來修正陀螺儀的漂移產生的誤差，
	//這樣對陀螺儀的漂移進行了修正，有效地抑制了加速度計和陀螺儀各自單獨工作時候的偏差.
    orient[0]    = (orient[0] + gyroRate[0] * dt) + 0.02f * (smoothAcc[0] - orient[0]);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	ed93 7a00 	vldr	s14, [r3]
 8002fb4:	edd7 6a06 	vldr	s13, [r7, #24]
 8002fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	edd3 6a00 	vldr	s13, [r3]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	edd3 7a00 	vldr	s15, [r3]
 8002fd0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002fd4:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80030d8 <getOrientation+0x280>
 8002fd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	edc3 7a00 	vstr	s15, [r3]

		//可以用正弦或餘弦和x軸單獨算出角度,因為我們知道重力的大小
	 //但是IMU單元必須是靜止水平狀態
    gyroRate[2]   =  gyroData[2] * cosf(fabsf(orient[1])) - gyroData[0] * sinf(orient[1]);
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	3308      	adds	r3, #8
 8002fea:	ed93 8a00 	vldr	s16, [r3]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	eef0 7ae7 	vabs.f32	s15, s15
 8002ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8002ffe:	f00c fa9f 	bl	800f540 <cosf>
 8003002:	eef0 7a40 	vmov.f32	s15, s0
 8003006:	ee28 8a27 	vmul.f32	s16, s16, s15
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	edd3 8a00 	vldr	s17, [r3]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	3304      	adds	r3, #4
 8003014:	edd3 7a00 	vldr	s15, [r3]
 8003018:	eeb0 0a67 	vmov.f32	s0, s15
 800301c:	f00c fadc 	bl	800f5d8 <sinf>
 8003020:	eef0 7a40 	vmov.f32	s15, s0
 8003024:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003028:	ee78 7a67 	vsub.f32	s15, s16, s15
 800302c:	edc7 7a08 	vstr	s15, [r7, #32]

    orient[2]     = (orient[2] + gyroRate[2] * dt);//對鿿??????迌翍忆志到???航角YAW
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	3308      	adds	r3, #8
 8003034:	ed93 7a00 	vldr	s14, [r3]
 8003038:	edd7 6a08 	vldr	s13, [r7, #32]
 800303c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	3308      	adds	r3, #8
 8003048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800304c:	edc3 7a00 	vstr	s15, [r3]
    printf("orient[0]=%f, orient[1]=%f, orient[2]=%f, \r\n", orient[0]*57.3, orient[1]*57.3, orient[2]*57.3);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fa7f 	bl	8000558 <__aeabi_f2d>
 800305a:	a31b      	add	r3, pc, #108	@ (adr r3, 80030c8 <getOrientation+0x270>)
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f7fd fad2 	bl	8000608 <__aeabi_dmul>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4690      	mov	r8, r2
 800306a:	4699      	mov	r9, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	3304      	adds	r3, #4
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fa70 	bl	8000558 <__aeabi_f2d>
 8003078:	a313      	add	r3, pc, #76	@ (adr r3, 80030c8 <getOrientation+0x270>)
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f7fd fac3 	bl	8000608 <__aeabi_dmul>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4614      	mov	r4, r2
 8003088:	461d      	mov	r5, r3
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	3308      	adds	r3, #8
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fd fa61 	bl	8000558 <__aeabi_f2d>
 8003096:	a30c      	add	r3, pc, #48	@ (adr r3, 80030c8 <getOrientation+0x270>)
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	f7fd fab4 	bl	8000608 <__aeabi_dmul>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80030a8:	e9cd 4500 	strd	r4, r5, [sp]
 80030ac:	4642      	mov	r2, r8
 80030ae:	464b      	mov	r3, r9
 80030b0:	480a      	ldr	r0, [pc, #40]	@ (80030dc <getOrientation+0x284>)
 80030b2:	f00a f9fb 	bl	800d4ac <iprintf>
}
 80030b6:	bf00      	nop
 80030b8:	3730      	adds	r7, #48	@ 0x30
 80030ba:	46bd      	mov	sp, r7
 80030bc:	ecbd 8b02 	vpop	{d8}
 80030c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030c4:	f3af 8000 	nop.w
 80030c8:	66666666 	.word	0x66666666
 80030cc:	404ca666 	.word	0x404ca666
 80030d0:	428c0000 	.word	0x428c0000
 80030d4:	42c80000 	.word	0x42c80000
 80030d8:	3ca3d70a 	.word	0x3ca3d70a
 80030dc:	08010e98 	.word	0x08010e98

080030e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a07      	ldr	r2, [pc, #28]	@ (800310c <vApplicationGetIdleTaskMemory+0x2c>)
 80030f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4a06      	ldr	r2, [pc, #24]	@ (8003110 <vApplicationGetIdleTaskMemory+0x30>)
 80030f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2280      	movs	r2, #128	@ 0x80
 80030fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000380 	.word	0x20000380
 8003110:	200003d4 	.word	0x200003d4

08003114 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003114:	b5b0      	push	{r4, r5, r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GimbalCore */
  osThreadDef(GimbalCore, StartGimbalTask, osPriorityNormal, 0, 256);
 800311a:	4b0a      	ldr	r3, [pc, #40]	@ (8003144 <MX_FREERTOS_Init+0x30>)
 800311c:	1d3c      	adds	r4, r7, #4
 800311e:	461d      	mov	r5, r3
 8003120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003124:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003128:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GimbalCoreHandle = osThreadCreate(osThread(GimbalCore), NULL);
 800312c:	1d3b      	adds	r3, r7, #4
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f004 fc32 	bl	800799a <osThreadCreate>
 8003136:	4603      	mov	r3, r0
 8003138:	4a03      	ldr	r2, [pc, #12]	@ (8003148 <MX_FREERTOS_Init+0x34>)
 800313a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800313c:	bf00      	nop
 800313e:	3720      	adds	r7, #32
 8003140:	46bd      	mov	sp, r7
 8003142:	bdb0      	pop	{r4, r5, r7, pc}
 8003144:	08010ed4 	.word	0x08010ed4
 8003148:	2000037c 	.word	0x2000037c

0800314c <StartGimbalTask>:
  * @retval None
  */

/* USER CODE END Header_StartGimbalTask */
void StartGimbalTask(void const * argument)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGimbalTask */

	uint32_t imuOldTick = xTaskGetTickCount();
 8003154:	f005 f810 	bl	8008178 <xTaskGetTickCount>
 8003158:	61f8      	str	r0, [r7, #28]
	uint8_t id;
	int16_t mx, my, mz;

	IMU_STRUCT* pImu = GetImuStr_Addr();
 800315a:	f000 fb39 	bl	80037d0 <GetImuStr_Addr>
 800315e:	61b8      	str	r0, [r7, #24]
	HMC5883_STRUCT* pHMC5883 = GetHMC5883Str_Addr();
 8003160:	f000 fac8 	bl	80036f4 <GetHMC5883Str_Addr>
 8003164:	6178      	str	r0, [r7, #20]

	int result;
	result = mpu_init();
 8003166:	f005 ffb3 	bl	80090d0 <mpu_init>
 800316a:	6138      	str	r0, [r7, #16]
	printf("result = %d \r\n", result);
 800316c:	6939      	ldr	r1, [r7, #16]
 800316e:	4872      	ldr	r0, [pc, #456]	@ (8003338 <StartGimbalTask+0x1ec>)
 8003170:	f00a f99c 	bl	800d4ac <iprintf>

	pImu->Init();
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4798      	blx	r3
	pHMC5883->Init();
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4798      	blx	r3

	orientIMU();
 8003180:	f008 ffea 	bl	800c158 <orientIMU>
	MPU6050_Calibration();
 8003184:	f7fe fff8 	bl	8002178 <MPU6050_Calibration>
	computeMPU6050RTData();
 8003188:	f7ff fc1e 	bl	80029c8 <computeMPU6050RTData>

//  initFirstOrderFilter();
	initOrientation();
 800318c:	f7ff fd94 	bl	8002cb8 <initOrientation>
	computeMPU6050TCBias();
 8003190:	f7ff fb98 	bl	80028c4 <computeMPU6050TCBias>

  /* Infinite loop */
	float yaw=0;
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
	short offsetX ,offsetY , offsetZ;

  for(;;)
  {
	  if(xTaskGetTickCount() - imuOldTick >= 2)
 800319a:	f004 ffed 	bl	8008178 <xTaskGetTickCount>
 800319e:	4602      	mov	r2, r0
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d9f8      	bls.n	800319a <StartGimbalTask+0x4e>
	  {
		  taskENTER_CRITICAL();
 80031a8:	f005 fb96 	bl	80088d8 <vPortEnterCritical>

		  pImu->GetData(&ImuData);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4862      	ldr	r0, [pc, #392]	@ (800333c <StartGimbalTask+0x1f0>)
 80031b2:	4798      	blx	r3
		  pHMC5883->GetData(&HMC5883Data);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4861      	ldr	r0, [pc, #388]	@ (8003340 <StartGimbalTask+0x1f4>)
 80031ba:	4798      	blx	r3

		  printf("mx=%d, my=%d, mz=%d, \r\n", HMC5883Data.mag_x, HMC5883Data.mag_y, HMC5883Data.mag_z);
 80031bc:	4b60      	ldr	r3, [pc, #384]	@ (8003340 <StartGimbalTask+0x1f4>)
 80031be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c2:	4619      	mov	r1, r3
 80031c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003340 <StartGimbalTask+0x1f4>)
 80031c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031ca:	461a      	mov	r2, r3
 80031cc:	4b5c      	ldr	r3, [pc, #368]	@ (8003340 <StartGimbalTask+0x1f4>)
 80031ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80031d2:	485c      	ldr	r0, [pc, #368]	@ (8003344 <StartGimbalTask+0x1f8>)
 80031d4:	f00a f96a 	bl	800d4ac <iprintf>

		  dt500Hz = (xTaskGetTickCount() - imuOldTick)/configTICK_RATE_HZ;
 80031d8:	f004 ffce 	bl	8008178 <xTaskGetTickCount>
 80031dc:	4602      	mov	r2, r0
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	4a59      	ldr	r2, [pc, #356]	@ (8003348 <StartGimbalTask+0x1fc>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f2:	4b56      	ldr	r3, [pc, #344]	@ (800334c <StartGimbalTask+0x200>)
 80031f4:	edc3 7a00 	vstr	s15, [r3]

		  accel500Hz[0] = (ImuData.accel_x - accelTCBias[0]);//*ACCEL_SCALE_FACTOR;
 80031f8:	4b50      	ldr	r3, [pc, #320]	@ (800333c <StartGimbalTask+0x1f0>)
 80031fa:	ed93 7a00 	vldr	s14, [r3]
 80031fe:	4b54      	ldr	r3, [pc, #336]	@ (8003350 <StartGimbalTask+0x204>)
 8003200:	edd3 7a00 	vldr	s15, [r3]
 8003204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003208:	4b52      	ldr	r3, [pc, #328]	@ (8003354 <StartGimbalTask+0x208>)
 800320a:	edc3 7a00 	vstr	s15, [r3]
		  accel500Hz[1] = (ImuData.accel_y - accelTCBias[1]);//;*ACCEL_SCALE_FACTOR;
 800320e:	4b4b      	ldr	r3, [pc, #300]	@ (800333c <StartGimbalTask+0x1f0>)
 8003210:	ed93 7a01 	vldr	s14, [r3, #4]
 8003214:	4b4e      	ldr	r3, [pc, #312]	@ (8003350 <StartGimbalTask+0x204>)
 8003216:	edd3 7a01 	vldr	s15, [r3, #4]
 800321a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321e:	4b4d      	ldr	r3, [pc, #308]	@ (8003354 <StartGimbalTask+0x208>)
 8003220:	edc3 7a01 	vstr	s15, [r3, #4]
		  accel500Hz[2] = -(ImuData.accel_z - accelTCBias[2]);
 8003224:	4b45      	ldr	r3, [pc, #276]	@ (800333c <StartGimbalTask+0x1f0>)
 8003226:	ed93 7a02 	vldr	s14, [r3, #8]
 800322a:	4b49      	ldr	r3, [pc, #292]	@ (8003350 <StartGimbalTask+0x204>)
 800322c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003234:	eef1 7a67 	vneg.f32	s15, s15
 8003238:	4b46      	ldr	r3, [pc, #280]	@ (8003354 <StartGimbalTask+0x208>)
 800323a:	edc3 7a02 	vstr	s15, [r3, #8]
		  gyro500Hz[0] = (ImuData.gyro_r - gyroRTBias[0] - gyroTCBias[0]);//*GYRO_SCALE_FACTOR;
 800323e:	4b3f      	ldr	r3, [pc, #252]	@ (800333c <StartGimbalTask+0x1f0>)
 8003240:	ed93 7a03 	vldr	s14, [r3, #12]
 8003244:	4b44      	ldr	r3, [pc, #272]	@ (8003358 <StartGimbalTask+0x20c>)
 8003246:	edd3 7a00 	vldr	s15, [r3]
 800324a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800324e:	4b43      	ldr	r3, [pc, #268]	@ (800335c <StartGimbalTask+0x210>)
 8003250:	edd3 7a00 	vldr	s15, [r3]
 8003254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003258:	4b41      	ldr	r3, [pc, #260]	@ (8003360 <StartGimbalTask+0x214>)
 800325a:	edc3 7a00 	vstr	s15, [r3]
	      gyro500Hz[1] = (ImuData.gyro_p - gyroRTBias[1] - gyroTCBias[1]);//*GYRO_SCALE_FACTOR;
 800325e:	4b37      	ldr	r3, [pc, #220]	@ (800333c <StartGimbalTask+0x1f0>)
 8003260:	ed93 7a04 	vldr	s14, [r3, #16]
 8003264:	4b3c      	ldr	r3, [pc, #240]	@ (8003358 <StartGimbalTask+0x20c>)
 8003266:	edd3 7a01 	vldr	s15, [r3, #4]
 800326a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800326e:	4b3b      	ldr	r3, [pc, #236]	@ (800335c <StartGimbalTask+0x210>)
 8003270:	edd3 7a01 	vldr	s15, [r3, #4]
 8003274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003278:	4b39      	ldr	r3, [pc, #228]	@ (8003360 <StartGimbalTask+0x214>)
 800327a:	edc3 7a01 	vstr	s15, [r3, #4]
		  gyro500Hz[2] = -(ImuData.gyro_y - gyroRTBias[2] - gyroTCBias[2]);//*GYRO_SCALE_FACTOR;
 800327e:	4b2f      	ldr	r3, [pc, #188]	@ (800333c <StartGimbalTask+0x1f0>)
 8003280:	ed93 7a05 	vldr	s14, [r3, #20]
 8003284:	4b34      	ldr	r3, [pc, #208]	@ (8003358 <StartGimbalTask+0x20c>)
 8003286:	edd3 7a02 	vldr	s15, [r3, #8]
 800328a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800328e:	4b33      	ldr	r3, [pc, #204]	@ (800335c <StartGimbalTask+0x210>)
 8003290:	edd3 7a02 	vldr	s15, [r3, #8]
 8003294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003298:	eef1 7a67 	vneg.f32	s15, s15
 800329c:	4b30      	ldr	r3, [pc, #192]	@ (8003360 <StartGimbalTask+0x214>)
 800329e:	edc3 7a02 	vstr	s15, [r3, #8]
			//（此濾波演算法也屬於低通濾波的一種），優點： 對週期性干擾具有良好的抑制作用 適用於波動頻率較高的場合,
			// 缺點： 相位滯後，靈敏度低 滯後程度取決於a值大小 不能消除濾波頻率高於採樣頻率的1/2的干擾訊號,
			//getOrientation函式內部使用了accAngleSmooth歐拉角與陀螺儀數據進行了互補濾波融合演算法得到穩定的歐拉角，並且
			//存放到sensors.evvgcCFAttitude500Hz裡面，sensors.accel500Hz和sensors.gyro500Hz是經過上面演算法處理后的加速度數據
			//和陀螺儀數據，dt500Hz是時間增量，也就是執行if (frame_500Hz){} 裡面的程式碼間隔
		  getOrientation(accAngleSmooth, evvgcCFAttitude500Hz, accel500Hz, gyro500Hz, dt500Hz);
 80032a2:	4b2a      	ldr	r3, [pc, #168]	@ (800334c <StartGimbalTask+0x200>)
 80032a4:	edd3 7a00 	vldr	s15, [r3]
 80032a8:	eeb0 0a67 	vmov.f32	s0, s15
 80032ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003360 <StartGimbalTask+0x214>)
 80032ae:	4a29      	ldr	r2, [pc, #164]	@ (8003354 <StartGimbalTask+0x208>)
 80032b0:	492c      	ldr	r1, [pc, #176]	@ (8003364 <StartGimbalTask+0x218>)
 80032b2:	482d      	ldr	r0, [pc, #180]	@ (8003368 <StartGimbalTask+0x21c>)
 80032b4:	f7ff fdd0 	bl	8002e58 <getOrientation>
		  //航姿參考系統更新，入口參數是三軸陀螺儀數據，三軸加速度數據，三軸磁力計數據,以及指示是否更新磁力計數據的magDataUpdate參數，
			//magDataUpdate=false表示不更新磁力計數據，magDataUpdate=true表示更新磁力計數據，最後一個參數是時間增量Dt，也就是此函式本
			//次執行與上次執行的時間間隔。
		  MargAHRSupdate(gyro500Hz[0], gyro500Hz[1], gyro500Hz[2], accel500Hz[0], accel500Hz[1], accel500Hz[2],1.0, 1.0, 1.0, false, dt500Hz);
*/
		  MargAHRSupdate(gyro500Hz[0], gyro500Hz[1], gyro500Hz[2], accel500Hz[0], accel500Hz[1], accel500Hz[2],HMC5883Data.mag_x, HMC5883Data.mag_y, HMC5883Data.mag_z, true, dt500Hz);
 80032b8:	4b29      	ldr	r3, [pc, #164]	@ (8003360 <StartGimbalTask+0x214>)
 80032ba:	edd3 7a00 	vldr	s15, [r3]
 80032be:	4b28      	ldr	r3, [pc, #160]	@ (8003360 <StartGimbalTask+0x214>)
 80032c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80032c4:	4b26      	ldr	r3, [pc, #152]	@ (8003360 <StartGimbalTask+0x214>)
 80032c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80032ca:	4b22      	ldr	r3, [pc, #136]	@ (8003354 <StartGimbalTask+0x208>)
 80032cc:	ed93 6a00 	vldr	s12, [r3]
 80032d0:	4b20      	ldr	r3, [pc, #128]	@ (8003354 <StartGimbalTask+0x208>)
 80032d2:	edd3 5a01 	vldr	s11, [r3, #4]
 80032d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003354 <StartGimbalTask+0x208>)
 80032d8:	ed93 5a02 	vldr	s10, [r3, #8]
 80032dc:	4b18      	ldr	r3, [pc, #96]	@ (8003340 <StartGimbalTask+0x1f4>)
 80032de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e2:	ee04 3a90 	vmov	s9, r3
 80032e6:	eeb8 3ae4 	vcvt.f32.s32	s6, s9
 80032ea:	4b15      	ldr	r3, [pc, #84]	@ (8003340 <StartGimbalTask+0x1f4>)
 80032ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032f0:	ee04 3a90 	vmov	s9, r3
 80032f4:	eef8 3ae4 	vcvt.f32.s32	s7, s9
 80032f8:	4b11      	ldr	r3, [pc, #68]	@ (8003340 <StartGimbalTask+0x1f4>)
 80032fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032fe:	ee04 3a90 	vmov	s9, r3
 8003302:	eeb8 4ae4 	vcvt.f32.s32	s8, s9
 8003306:	4b11      	ldr	r3, [pc, #68]	@ (800334c <StartGimbalTask+0x200>)
 8003308:	edd3 4a00 	vldr	s9, [r3]
 800330c:	2001      	movs	r0, #1
 800330e:	eef0 2a45 	vmov.f32	s5, s10
 8003312:	eeb0 2a65 	vmov.f32	s4, s11
 8003316:	eef0 1a46 	vmov.f32	s3, s12
 800331a:	eeb0 1a66 	vmov.f32	s2, s13
 800331e:	eef0 0a47 	vmov.f32	s1, s14
 8003322:	eeb0 0a67 	vmov.f32	s0, s15
 8003326:	f7fe f8db 	bl	80014e0 <MargAHRSupdate>

		    float accAngle_uncal_0 = atan2f(-ImuData.accel_y, ImuData.accel_z); //Roll = Y & Z
		    float accAngle_uncal_1 = atan2f(ImuData.accel_x, ImuData.accel_z); //Pitch = X & Z
		    printf("accAngle_uncal_Roll=%f, accAngle_uncal_Pitch=%f, \r\n", accAngle_uncal_0*57.3, accAngle_uncal_1*57.3);
*/
		  imuOldTick = xTaskGetTickCount();
 800332a:	f004 ff25 	bl	8008178 <xTaskGetTickCount>
 800332e:	61f8      	str	r0, [r7, #28]
		  taskEXIT_CRITICAL();
 8003330:	f005 fb04 	bl	800893c <vPortExitCritical>
	  if(xTaskGetTickCount() - imuOldTick >= 2)
 8003334:	e731      	b.n	800319a <StartGimbalTask+0x4e>
 8003336:	bf00      	nop
 8003338:	08010ef0 	.word	0x08010ef0
 800333c:	200002b8 	.word	0x200002b8
 8003340:	200002ec 	.word	0x200002ec
 8003344:	08010f00 	.word	0x08010f00
 8003348:	10624dd3 	.word	0x10624dd3
 800334c:	200002f4 	.word	0x200002f4
 8003350:	20000328 	.word	0x20000328
 8003354:	20000340 	.word	0x20000340
 8003358:	20000358 	.word	0x20000358
 800335c:	20000334 	.word	0x20000334
 8003360:	2000034c 	.word	0x2000034c
 8003364:	20000364 	.word	0x20000364
 8003368:	20000370 	.word	0x20000370

0800336c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08a      	sub	sp, #40	@ 0x28
 8003370:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003372:	f107 0314 	add.w	r3, r7, #20
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	609a      	str	r2, [r3, #8]
 800337e:	60da      	str	r2, [r3, #12]
 8003380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	4b2d      	ldr	r3, [pc, #180]	@ (800343c <MX_GPIO_Init+0xd0>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	4a2c      	ldr	r2, [pc, #176]	@ (800343c <MX_GPIO_Init+0xd0>)
 800338c:	f043 0304 	orr.w	r3, r3, #4
 8003390:	6313      	str	r3, [r2, #48]	@ 0x30
 8003392:	4b2a      	ldr	r3, [pc, #168]	@ (800343c <MX_GPIO_Init+0xd0>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	4b26      	ldr	r3, [pc, #152]	@ (800343c <MX_GPIO_Init+0xd0>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	4a25      	ldr	r2, [pc, #148]	@ (800343c <MX_GPIO_Init+0xd0>)
 80033a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ae:	4b23      	ldr	r3, [pc, #140]	@ (800343c <MX_GPIO_Init+0xd0>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	4b1f      	ldr	r3, [pc, #124]	@ (800343c <MX_GPIO_Init+0xd0>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	4a1e      	ldr	r2, [pc, #120]	@ (800343c <MX_GPIO_Init+0xd0>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ca:	4b1c      	ldr	r3, [pc, #112]	@ (800343c <MX_GPIO_Init+0xd0>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	4b18      	ldr	r3, [pc, #96]	@ (800343c <MX_GPIO_Init+0xd0>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033de:	4a17      	ldr	r2, [pc, #92]	@ (800343c <MX_GPIO_Init+0xd0>)
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033e6:	4b15      	ldr	r3, [pc, #84]	@ (800343c <MX_GPIO_Init+0xd0>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	607b      	str	r3, [r7, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80033f2:	2200      	movs	r2, #0
 80033f4:	2120      	movs	r1, #32
 80033f6:	4812      	ldr	r0, [pc, #72]	@ (8003440 <MX_GPIO_Init+0xd4>)
 80033f8:	f001 fa36 	bl	8004868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003402:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	4619      	mov	r1, r3
 8003412:	480c      	ldr	r0, [pc, #48]	@ (8003444 <MX_GPIO_Init+0xd8>)
 8003414:	f001 f8a4 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003418:	2320      	movs	r3, #32
 800341a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341c:	2301      	movs	r3, #1
 800341e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	2300      	movs	r3, #0
 8003426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	4619      	mov	r1, r3
 800342e:	4804      	ldr	r0, [pc, #16]	@ (8003440 <MX_GPIO_Init+0xd4>)
 8003430:	f001 f896 	bl	8004560 <HAL_GPIO_Init>

}
 8003434:	bf00      	nop
 8003436:	3728      	adds	r7, #40	@ 0x28
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	40020000 	.word	0x40020000
 8003444:	40020800 	.word	0x40020800

08003448 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800344c:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <MX_I2C1_Init+0x50>)
 800344e:	4a13      	ldr	r2, [pc, #76]	@ (800349c <MX_I2C1_Init+0x54>)
 8003450:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003452:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <MX_I2C1_Init+0x50>)
 8003454:	4a12      	ldr	r2, [pc, #72]	@ (80034a0 <MX_I2C1_Init+0x58>)
 8003456:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003458:	4b0f      	ldr	r3, [pc, #60]	@ (8003498 <MX_I2C1_Init+0x50>)
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800345e:	4b0e      	ldr	r3, [pc, #56]	@ (8003498 <MX_I2C1_Init+0x50>)
 8003460:	2200      	movs	r2, #0
 8003462:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003464:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <MX_I2C1_Init+0x50>)
 8003466:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800346a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800346c:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <MX_I2C1_Init+0x50>)
 800346e:	2200      	movs	r2, #0
 8003470:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003472:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <MX_I2C1_Init+0x50>)
 8003474:	2200      	movs	r2, #0
 8003476:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003478:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <MX_I2C1_Init+0x50>)
 800347a:	2200      	movs	r2, #0
 800347c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800347e:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <MX_I2C1_Init+0x50>)
 8003480:	2200      	movs	r2, #0
 8003482:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003484:	4804      	ldr	r0, [pc, #16]	@ (8003498 <MX_I2C1_Init+0x50>)
 8003486:	f001 fa09 	bl	800489c <HAL_I2C_Init>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003490:	f000 fa3c 	bl	800390c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}
 8003498:	200005d4 	.word	0x200005d4
 800349c:	40005400 	.word	0x40005400
 80034a0:	000186a0 	.word	0x000186a0

080034a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	@ 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a19      	ldr	r2, [pc, #100]	@ (8003528 <HAL_I2C_MspInit+0x84>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d12c      	bne.n	8003520 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	4b18      	ldr	r3, [pc, #96]	@ (800352c <HAL_I2C_MspInit+0x88>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	4a17      	ldr	r2, [pc, #92]	@ (800352c <HAL_I2C_MspInit+0x88>)
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d6:	4b15      	ldr	r3, [pc, #84]	@ (800352c <HAL_I2C_MspInit+0x88>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80034e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034e8:	2312      	movs	r3, #18
 80034ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f0:	2303      	movs	r3, #3
 80034f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034f4:	2304      	movs	r3, #4
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	4619      	mov	r1, r3
 80034fe:	480c      	ldr	r0, [pc, #48]	@ (8003530 <HAL_I2C_MspInit+0x8c>)
 8003500:	f001 f82e 	bl	8004560 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	4b08      	ldr	r3, [pc, #32]	@ (800352c <HAL_I2C_MspInit+0x88>)
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	4a07      	ldr	r2, [pc, #28]	@ (800352c <HAL_I2C_MspInit+0x88>)
 800350e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003512:	6413      	str	r3, [r2, #64]	@ 0x40
 8003514:	4b05      	ldr	r3, [pc, #20]	@ (800352c <HAL_I2C_MspInit+0x88>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003520:	bf00      	nop
 8003522:	3728      	adds	r7, #40	@ 0x28
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40005400 	.word	0x40005400
 800352c:	40023800 	.word	0x40023800
 8003530:	40020400 	.word	0x40020400

08003534 <HMC5883_Init>:
// Y_bias = ((Ymax-Ymin)/2-Ymax_ x Ysf
#define x_bias   -73
#define y_bias   -163

Result HMC5883_Init()
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	@ 0x28
 8003538:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;
	int16_t mag_x, mag_y, mag_z;
	uint8_t data[2];
	data[0] = 0x00;		// Register A
 800353a:	2300      	movs	r3, #0
 800353c:	733b      	strb	r3, [r7, #12]
	data[1] = 0x70;    // 8-average, 15Hz data output, normal measurement
 800353e:	2370      	movs	r3, #112	@ 0x70
 8003540:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_I2C_ADDR_WRITE, data, 2, HAL_MAX_DELAY); // Write-mode
 8003542:	f107 020c 	add.w	r2, r7, #12
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2302      	movs	r3, #2
 800354e:	213c      	movs	r1, #60	@ 0x3c
 8003550:	4835      	ldr	r0, [pc, #212]	@ (8003628 <HMC5883_Init+0xf4>)
 8003552:	f001 fae7 	bl	8004b24 <HAL_I2C_Master_Transmit>
 8003556:	4603      	mov	r3, r0
 8003558:	75bb      	strb	r3, [r7, #22]

	data[0] = 0x01; 	// Register B
 800355a:	2301      	movs	r3, #1
 800355c:	733b      	strb	r3, [r7, #12]
	data[1] = 0x20; 	// Gain=1.3
 800355e:	2320      	movs	r3, #32
 8003560:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_I2C_ADDR_WRITE, data, 2, HAL_MAX_DELAY); // Write-mode
 8003562:	f107 020c 	add.w	r2, r7, #12
 8003566:	f04f 33ff 	mov.w	r3, #4294967295
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	2302      	movs	r3, #2
 800356e:	213c      	movs	r1, #60	@ 0x3c
 8003570:	482d      	ldr	r0, [pc, #180]	@ (8003628 <HMC5883_Init+0xf4>)
 8003572:	f001 fad7 	bl	8004b24 <HAL_I2C_Master_Transmit>
 8003576:	4603      	mov	r3, r0
 8003578:	75bb      	strb	r3, [r7, #22]
	magScaleFactor[0] = fabs(magScaleFactor[0]/10);
	magScaleFactor[1] = fabs(magScaleFactor[1]/10);
	magScaleFactor[2] = fabs(magScaleFactor[2]/10);
	printf("magScaleFactor[0]=%f, magScaleFactor[1]=%f, magScaleFactor[2]=%f, \r\n", magScaleFactor[0], magScaleFactor[1], magScaleFactor[2]);
*/
	data[0] = 0x02;     // Select Mode Regiater
 800357a:	2302      	movs	r3, #2
 800357c:	733b      	strb	r3, [r7, #12]
	data[1] = 0x00;    // MD1 | MD0 01 = continuous-measeurement mode,
 800357e:	2300      	movs	r3, #0
 8003580:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_I2C_ADDR_WRITE, data, 2, HAL_MAX_DELAY); // Write-mode SET continuous mode
 8003582:	f107 020c 	add.w	r2, r7, #12
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2302      	movs	r3, #2
 800358e:	213c      	movs	r1, #60	@ 0x3c
 8003590:	4825      	ldr	r0, [pc, #148]	@ (8003628 <HMC5883_Init+0xf4>)
 8003592:	f001 fac7 	bl	8004b24 <HAL_I2C_Master_Transmit>
 8003596:	4603      	mov	r3, r0
 8003598:	75bb      	strb	r3, [r7, #22]
	HAL_Delay(20);
 800359a:	2014      	movs	r0, #20
 800359c:	f000 fed6 	bl	800434c <HAL_Delay>

	uint8_t buffer[6];
	HAL_I2C_Mem_Read(&hi2c1, HMC5883L_I2C_ADDR_READ, HMC5883L_REG_DATA_X_MSB, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY);
 80035a0:	f04f 33ff 	mov.w	r3, #4294967295
 80035a4:	9302      	str	r3, [sp, #8]
 80035a6:	2306      	movs	r3, #6
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	1d3b      	adds	r3, r7, #4
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2301      	movs	r3, #1
 80035b0:	2203      	movs	r2, #3
 80035b2:	213d      	movs	r1, #61	@ 0x3d
 80035b4:	481c      	ldr	r0, [pc, #112]	@ (8003628 <HMC5883_Init+0xf4>)
 80035b6:	f001 fcad 	bl	8004f14 <HAL_I2C_Mem_Read>
	mag_x = (((int16_t)buffer[0]) << 8) | buffer[1];
 80035ba:	793b      	ldrb	r3, [r7, #4]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	b21a      	sxth	r2, r3
 80035c0:	797b      	ldrb	r3, [r7, #5]
 80035c2:	b21b      	sxth	r3, r3
 80035c4:	4313      	orrs	r3, r2
 80035c6:	82bb      	strh	r3, [r7, #20]
	mag_y = (((int16_t)buffer[4]) << 8) | buffer[5];
 80035c8:	7a3b      	ldrb	r3, [r7, #8]
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	b21a      	sxth	r2, r3
 80035ce:	7a7b      	ldrb	r3, [r7, #9]
 80035d0:	b21b      	sxth	r3, r3
 80035d2:	4313      	orrs	r3, r2
 80035d4:	827b      	strh	r3, [r7, #18]
	mag_z = (((int16_t)buffer[2]) << 8) | buffer[3];
 80035d6:	79bb      	ldrb	r3, [r7, #6]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	b21a      	sxth	r2, r3
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	b21b      	sxth	r3, r3
 80035e0:	4313      	orrs	r3, r2
 80035e2:	823b      	strh	r3, [r7, #16]

	uint8_t address;
	for (address = 1; address < 128; address++) {
 80035e4:	2301      	movs	r3, #1
 80035e6:	75fb      	strb	r3, [r7, #23]
 80035e8:	e015      	b.n	8003616 <HMC5883_Init+0xe2>
		HAL_StatusTypeDef res = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(address << 1), 10, 10);
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	b299      	uxth	r1, r3
 80035f2:	230a      	movs	r3, #10
 80035f4:	220a      	movs	r2, #10
 80035f6:	480c      	ldr	r0, [pc, #48]	@ (8003628 <HMC5883_Init+0xf4>)
 80035f8:	f001 feb2 	bl	8005360 <HAL_I2C_IsDeviceReady>
 80035fc:	4603      	mov	r3, r0
 80035fe:	73fb      	strb	r3, [r7, #15]
		if (res == HAL_OK) {
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d104      	bne.n	8003610 <HMC5883_Init+0xdc>
			printf("Found device at 0x%02X (7-bit address)\r\n", address);
 8003606:	7dfb      	ldrb	r3, [r7, #23]
 8003608:	4619      	mov	r1, r3
 800360a:	4808      	ldr	r0, [pc, #32]	@ (800362c <HMC5883_Init+0xf8>)
 800360c:	f009 ff4e 	bl	800d4ac <iprintf>
	for (address = 1; address < 128; address++) {
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	3301      	adds	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
 8003616:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800361a:	2b00      	cmp	r3, #0
 800361c:	dae5      	bge.n	80035ea <HMC5883_Init+0xb6>
		}
	}

	return RESULT_SUCCESS;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	200005d4 	.word	0x200005d4
 800362c:	08010f18 	.word	0x08010f18

08003630 <GetHMC5883L_ReadData>:

Result GetHMC5883L_ReadData(HMC5883_DATA_STRUCT *Data)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af04      	add	r7, sp, #16
 8003636:	6078      	str	r0, [r7, #4]
    uint8_t buffer[6];
    HAL_I2C_Mem_Read(&hi2c1, HMC5883L_I2C_ADDR_READ, HMC5883L_REG_DATA_X_MSB, I2C_MEMADD_SIZE_8BIT, buffer, 6, HAL_MAX_DELAY);
 8003638:	f04f 33ff 	mov.w	r3, #4294967295
 800363c:	9302      	str	r3, [sp, #8]
 800363e:	2306      	movs	r3, #6
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	f107 0308 	add.w	r3, r7, #8
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2301      	movs	r3, #1
 800364a:	2203      	movs	r2, #3
 800364c:	213d      	movs	r1, #61	@ 0x3d
 800364e:	4815      	ldr	r0, [pc, #84]	@ (80036a4 <GetHMC5883L_ReadData+0x74>)
 8003650:	f001 fc60 	bl	8004f14 <HAL_I2C_Mem_Read>

    Data->mag_x = ((((int16_t)buffer[0]) << 8) | buffer[1]) - x_bias; //X_corrected = X_raw - X_bias
 8003654:	7a3b      	ldrb	r3, [r7, #8]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	b21a      	sxth	r2, r3
 800365a:	7a7b      	ldrb	r3, [r7, #9]
 800365c:	b21b      	sxth	r3, r3
 800365e:	4313      	orrs	r3, r2
 8003660:	b21b      	sxth	r3, r3
 8003662:	b29b      	uxth	r3, r3
 8003664:	3349      	adds	r3, #73	@ 0x49
 8003666:	b29b      	uxth	r3, r3
 8003668:	b21a      	sxth	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	801a      	strh	r2, [r3, #0]
    Data->mag_y = ((((int16_t)buffer[4]) << 8) | buffer[5]) - y_bias; //Y_corrected = Y_raw - Y_bias
 800366e:	7b3b      	ldrb	r3, [r7, #12]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	b21a      	sxth	r2, r3
 8003674:	7b7b      	ldrb	r3, [r7, #13]
 8003676:	b21b      	sxth	r3, r3
 8003678:	4313      	orrs	r3, r2
 800367a:	b21b      	sxth	r3, r3
 800367c:	b29b      	uxth	r3, r3
 800367e:	33a3      	adds	r3, #163	@ 0xa3
 8003680:	b29b      	uxth	r3, r3
 8003682:	b21a      	sxth	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	805a      	strh	r2, [r3, #2]
    Data->mag_z = (((int16_t)buffer[2]) << 8) | buffer[3];
 8003688:	7abb      	ldrb	r3, [r7, #10]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	b21a      	sxth	r2, r3
 800368e:	7afb      	ldrb	r3, [r7, #11]
 8003690:	b21b      	sxth	r3, r3
 8003692:	4313      	orrs	r3, r2
 8003694:	b21a      	sxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	809a      	strh	r2, [r3, #4]

//    Data->mag_x = (((((int16_t)buffer[0]) << 8) | buffer[1])/1090) - X_bias; //X_corrected = X_raw - X_bias
//    Data->mag_y = (((((int16_t)buffer[4]) << 8) | buffer[5])/1090) - y_bias; //Y_corrected = Y_raw - Y_bias
//    Data->mag_z = ((((int16_t)buffer[2]) << 8) | buffer[3])/1090;

    return RESULT_SUCCESS;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	200005d4 	.word	0x200005d4

080036a8 <GetDevID>:
Result GetDevID(uint8_t *Data)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	uint8_t address;
	for (address = 1; address < 128; address++) {
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
 80036b4:	e013      	b.n	80036de <GetDevID+0x36>
		HAL_StatusTypeDef res = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(address << 1), 10, 10);
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	b299      	uxth	r1, r3
 80036be:	230a      	movs	r3, #10
 80036c0:	220a      	movs	r2, #10
 80036c2:	480b      	ldr	r0, [pc, #44]	@ (80036f0 <GetDevID+0x48>)
 80036c4:	f001 fe4c 	bl	8005360 <HAL_I2C_IsDeviceReady>
 80036c8:	4603      	mov	r3, r0
 80036ca:	73bb      	strb	r3, [r7, #14]
		if (res == HAL_OK) {
 80036cc:	7bbb      	ldrb	r3, [r7, #14]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d102      	bne.n	80036d8 <GetDevID+0x30>
			*Data = address;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	701a      	strb	r2, [r3, #0]
	for (address = 1; address < 128; address++) {
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	3301      	adds	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
 80036de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	dae7      	bge.n	80036b6 <GetDevID+0xe>
		}
	}
}
 80036e6:	bf00      	nop
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	200005d4 	.word	0x200005d4

080036f4 <GetHMC5883Str_Addr>:
pHMC5883_STRUCT GetHMC5883Str_Addr()
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
	HMC5883ExternData.Init = &HMC5883_Init;
 80036f8:	4b07      	ldr	r3, [pc, #28]	@ (8003718 <GetHMC5883Str_Addr+0x24>)
 80036fa:	4a08      	ldr	r2, [pc, #32]	@ (800371c <GetHMC5883Str_Addr+0x28>)
 80036fc:	601a      	str	r2, [r3, #0]
	HMC5883ExternData.GetDevID = &GetDevID;
 80036fe:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <GetHMC5883Str_Addr+0x24>)
 8003700:	4a07      	ldr	r2, [pc, #28]	@ (8003720 <GetHMC5883Str_Addr+0x2c>)
 8003702:	605a      	str	r2, [r3, #4]
	HMC5883ExternData.GetData = &GetHMC5883L_ReadData;
 8003704:	4b04      	ldr	r3, [pc, #16]	@ (8003718 <GetHMC5883Str_Addr+0x24>)
 8003706:	4a07      	ldr	r2, [pc, #28]	@ (8003724 <GetHMC5883Str_Addr+0x30>)
 8003708:	609a      	str	r2, [r3, #8]

	return &HMC5883ExternData;
 800370a:	4b03      	ldr	r3, [pc, #12]	@ (8003718 <GetHMC5883Str_Addr+0x24>)
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000628 	.word	0x20000628
 800371c:	08003535 	.word	0x08003535
 8003720:	080036a9 	.word	0x080036a9
 8003724:	08003631 	.word	0x08003631

08003728 <ImuInit>:
#include "MPU6050/mpu6050.h"

static IMU_STRUCT        ImuExternData;

Result ImuInit()
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
//	if (!MPU6050_testConnection()) {
//		return RESULT_FAILURE;
//	}
	MPU6050_initialize();
 800372c:	f008 fe82 	bl	800c434 <MPU6050_initialize>
//#if IMU_ENABLE_DMP
//	DMP_Init();
//#endif
  return RESULT_SUCCESS;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	bd80      	pop	{r7, pc}

08003736 <GetImuDevID>:

Result GetImuDevID(uint8_t* devID)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
	*devID = MPU6050_getDeviceID();
 800373e:	f008 fe3b 	bl	800c3b8 <MPU6050_getDeviceID>
 8003742:	4603      	mov	r3, r0
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	701a      	strb	r2, [r3, #0]
	return RESULT_SUCCESS;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <GetImuData>:

Result GetImuData(IMU_DATA_STRUCT *Data)
{
 8003754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003756:	b087      	sub	sp, #28
 8003758:	af04      	add	r7, sp, #16
 800375a:	6078      	str	r0, [r7, #4]
	if (!MPU6050_testConnection()) {
 800375c:	f008 fe40 	bl	800c3e0 <MPU6050_testConnection>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <GetImuData+0x16>
		return RESULT_FAILURE;
 8003766:	2301      	movs	r3, #1
 8003768:	e02d      	b.n	80037c6 <GetImuData+0x72>
	}
	Read_NativeData(
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	1d19      	adds	r1, r3, #4
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f103 0408 	add.w	r4, r3, #8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f103 050c 	add.w	r5, r3, #12
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3310      	adds	r3, #16
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	3214      	adds	r2, #20
 8003784:	9201      	str	r2, [sp, #4]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	462b      	mov	r3, r5
 800378a:	4622      	mov	r2, r4
 800378c:	f009 f844 	bl	800c818 <Read_NativeData>
		&Data->gyro_r,
		&Data->gyro_p,
		&Data->gyro_y
	);
#if IMU_ENABLE_DMP
	Read_DMPdirect(
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f103 0018 	add.w	r0, r3, #24
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f103 041c 	add.w	r4, r3, #28
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f103 0520 	add.w	r5, r3, #32
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f103 0624 	add.w	r6, r3, #36	@ 0x24
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3328      	adds	r3, #40	@ 0x28
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	322c      	adds	r2, #44	@ 0x2c
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	3130      	adds	r1, #48	@ 0x30
 80037b4:	9102      	str	r1, [sp, #8]
 80037b6:	9201      	str	r2, [sp, #4]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	4633      	mov	r3, r6
 80037bc:	462a      	mov	r2, r5
 80037be:	4621      	mov	r1, r4
 80037c0:	f008 fe9e 	bl	800c500 <Read_DMPdirect>
			&Data->roll,
			&Data->pitch,
			&Data->yaw
	);
#endif
	return RESULT_SUCCESS;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080037d0 <GetImuStr_Addr>:
	}
	temp = Read_Temperature();
	Data->temperature = temp;
}
pIMU_STRUCT GetImuStr_Addr()
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  ImuExternData.Init = &ImuInit;	
 80037d4:	4b07      	ldr	r3, [pc, #28]	@ (80037f4 <GetImuStr_Addr+0x24>)
 80037d6:	4a08      	ldr	r2, [pc, #32]	@ (80037f8 <GetImuStr_Addr+0x28>)
 80037d8:	601a      	str	r2, [r3, #0]
  ImuExternData.GetDevID = &GetImuDevID;
 80037da:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <GetImuStr_Addr+0x24>)
 80037dc:	4a07      	ldr	r2, [pc, #28]	@ (80037fc <GetImuStr_Addr+0x2c>)
 80037de:	605a      	str	r2, [r3, #4]
	ImuExternData.GetData = &GetImuData;
 80037e0:	4b04      	ldr	r3, [pc, #16]	@ (80037f4 <GetImuStr_Addr+0x24>)
 80037e2:	4a07      	ldr	r2, [pc, #28]	@ (8003800 <GetImuStr_Addr+0x30>)
 80037e4:	609a      	str	r2, [r3, #8]
  return &ImuExternData;	
 80037e6:	4b03      	ldr	r3, [pc, #12]	@ (80037f4 <GetImuStr_Addr+0x24>)
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000634 	.word	0x20000634
 80037f8:	08003729 	.word	0x08003729
 80037fc:	08003737 	.word	0x08003737
 8003800:	08003755 	.word	0x08003755

08003804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003808:	f000 fd2e 	bl	8004268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800380c:	f000 f812 	bl	8003834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003810:	f7ff fdac 	bl	800336c <MX_GPIO_Init>
  MX_I2C1_Init();
 8003814:	f7ff fe18 	bl	8003448 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8003818:	f000 fc8a 	bl	8004130 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800381c:	f000 f9a8 	bl	8003b70 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003820:	f000 fa5e 	bl	8003ce0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003824:	f000 fae8 	bl	8003df8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003828:	f7ff fc74 	bl	8003114 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800382c:	f004 f8ae 	bl	800798c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <main+0x2c>

08003834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b094      	sub	sp, #80	@ 0x50
 8003838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800383a:	f107 0320 	add.w	r3, r7, #32
 800383e:	2230      	movs	r2, #48	@ 0x30
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f009 ff8a 	bl	800d75c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003848:	f107 030c 	add.w	r3, r7, #12
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003858:	2300      	movs	r3, #0
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	4b29      	ldr	r3, [pc, #164]	@ (8003904 <SystemClock_Config+0xd0>)
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	4a28      	ldr	r2, [pc, #160]	@ (8003904 <SystemClock_Config+0xd0>)
 8003862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003866:	6413      	str	r3, [r2, #64]	@ 0x40
 8003868:	4b26      	ldr	r3, [pc, #152]	@ (8003904 <SystemClock_Config+0xd0>)
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003874:	2300      	movs	r3, #0
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	4b23      	ldr	r3, [pc, #140]	@ (8003908 <SystemClock_Config+0xd4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003880:	4a21      	ldr	r2, [pc, #132]	@ (8003908 <SystemClock_Config+0xd4>)
 8003882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b1f      	ldr	r3, [pc, #124]	@ (8003908 <SystemClock_Config+0xd4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003894:	2302      	movs	r3, #2
 8003896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003898:	2301      	movs	r3, #1
 800389a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800389c:	2310      	movs	r3, #16
 800389e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038a0:	2302      	movs	r3, #2
 80038a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038a4:	2300      	movs	r3, #0
 80038a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80038a8:	2310      	movs	r3, #16
 80038aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80038ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80038b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80038b2:	2304      	movs	r3, #4
 80038b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80038b6:	2307      	movs	r3, #7
 80038b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038ba:	f107 0320 	add.w	r3, r7, #32
 80038be:	4618      	mov	r0, r3
 80038c0:	f002 fa5a 	bl	8005d78 <HAL_RCC_OscConfig>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80038ca:	f000 f81f 	bl	800390c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038ce:	230f      	movs	r3, #15
 80038d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038d2:	2302      	movs	r3, #2
 80038d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038e4:	f107 030c 	add.w	r3, r7, #12
 80038e8:	2102      	movs	r1, #2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f002 fcbc 	bl	8006268 <HAL_RCC_ClockConfig>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80038f6:	f000 f809 	bl	800390c <Error_Handler>
  }
}
 80038fa:	bf00      	nop
 80038fc:	3750      	adds	r7, #80	@ 0x50
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800
 8003908:	40007000 	.word	0x40007000

0800390c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003910:	b672      	cpsid	i
}
 8003912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003914:	bf00      	nop
 8003916:	e7fd      	b.n	8003914 <Error_Handler+0x8>

08003918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	4b12      	ldr	r3, [pc, #72]	@ (800396c <HAL_MspInit+0x54>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003926:	4a11      	ldr	r2, [pc, #68]	@ (800396c <HAL_MspInit+0x54>)
 8003928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800392c:	6453      	str	r3, [r2, #68]	@ 0x44
 800392e:	4b0f      	ldr	r3, [pc, #60]	@ (800396c <HAL_MspInit+0x54>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <HAL_MspInit+0x54>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	4a0a      	ldr	r2, [pc, #40]	@ (800396c <HAL_MspInit+0x54>)
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003948:	6413      	str	r3, [r2, #64]	@ 0x40
 800394a:	4b08      	ldr	r3, [pc, #32]	@ (800396c <HAL_MspInit+0x54>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003956:	2200      	movs	r2, #0
 8003958:	210f      	movs	r1, #15
 800395a:	f06f 0001 	mvn.w	r0, #1
 800395e:	f000 fdd6 	bl	800450e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800

08003970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <NMI_Handler+0x4>

08003978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800397c:	bf00      	nop
 800397e:	e7fd      	b.n	800397c <HardFault_Handler+0x4>

08003980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003984:	bf00      	nop
 8003986:	e7fd      	b.n	8003984 <MemManage_Handler+0x4>

08003988 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800398c:	bf00      	nop
 800398e:	e7fd      	b.n	800398c <BusFault_Handler+0x4>

08003990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003994:	bf00      	nop
 8003996:	e7fd      	b.n	8003994 <UsageFault_Handler+0x4>

08003998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039aa:	f000 fcaf 	bl	800430c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80039ae:	f004 fddf 	bl	8008570 <xTaskGetSchedulerState>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d001      	beq.n	80039bc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80039b8:	f005 f81e 	bl	80089f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}

080039c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return 1;
 80039c4:	2301      	movs	r3, #1
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <_kill>:

int _kill(int pid, int sig)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039da:	f009 ff11 	bl	800d800 <__errno>
 80039de:	4603      	mov	r3, r0
 80039e0:	2216      	movs	r2, #22
 80039e2:	601a      	str	r2, [r3, #0]
  return -1;
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <_exit>:

void _exit (int status)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039f8:	f04f 31ff 	mov.w	r1, #4294967295
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff ffe7 	bl	80039d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a02:	bf00      	nop
 8003a04:	e7fd      	b.n	8003a02 <_exit+0x12>

08003a06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e00a      	b.n	8003a2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a18:	f3af 8000 	nop.w
 8003a1c:	4601      	mov	r1, r0
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	60ba      	str	r2, [r7, #8]
 8003a24:	b2ca      	uxtb	r2, r1
 8003a26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	dbf0      	blt.n	8003a18 <_read+0x12>
  }

  return len;
 8003a36:	687b      	ldr	r3, [r7, #4]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	e009      	b.n	8003a66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	60ba      	str	r2, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe fb7a 	bl	8002154 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3301      	adds	r3, #1
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	dbf1      	blt.n	8003a52 <_write+0x12>
  }
  return len;
 8003a6e:	687b      	ldr	r3, [r7, #4]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <_close>:

int _close(int file)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003aa0:	605a      	str	r2, [r3, #4]
  return 0;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <_isatty>:

int _isatty(int file)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ab8:	2301      	movs	r3, #1
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ae8:	4a14      	ldr	r2, [pc, #80]	@ (8003b3c <_sbrk+0x5c>)
 8003aea:	4b15      	ldr	r3, [pc, #84]	@ (8003b40 <_sbrk+0x60>)
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003af4:	4b13      	ldr	r3, [pc, #76]	@ (8003b44 <_sbrk+0x64>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003afc:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <_sbrk+0x64>)
 8003afe:	4a12      	ldr	r2, [pc, #72]	@ (8003b48 <_sbrk+0x68>)
 8003b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b02:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <_sbrk+0x64>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d207      	bcs.n	8003b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b10:	f009 fe76 	bl	800d800 <__errno>
 8003b14:	4603      	mov	r3, r0
 8003b16:	220c      	movs	r2, #12
 8003b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	e009      	b.n	8003b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b20:	4b08      	ldr	r3, [pc, #32]	@ (8003b44 <_sbrk+0x64>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b26:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <_sbrk+0x64>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	4a05      	ldr	r2, [pc, #20]	@ (8003b44 <_sbrk+0x64>)
 8003b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b32:	68fb      	ldr	r3, [r7, #12]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20018000 	.word	0x20018000
 8003b40:	00000400 	.word	0x00000400
 8003b44:	20000644 	.word	0x20000644
 8003b48:	20004688 	.word	0x20004688

08003b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b50:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <SystemInit+0x20>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b56:	4a05      	ldr	r2, [pc, #20]	@ (8003b6c <SystemInit+0x20>)
 8003b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b096      	sub	sp, #88	@ 0x58
 8003b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b76:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	609a      	str	r2, [r3, #8]
 8003b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b84:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	609a      	str	r2, [r3, #8]
 8003b9a:	60da      	str	r2, [r3, #12]
 8003b9c:	611a      	str	r2, [r3, #16]
 8003b9e:	615a      	str	r2, [r3, #20]
 8003ba0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f009 fdd7 	bl	800d75c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003bae:	4b4a      	ldr	r3, [pc, #296]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003bb0:	4a4a      	ldr	r2, [pc, #296]	@ (8003cdc <MX_TIM1_Init+0x16c>)
 8003bb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003bb4:	4b48      	ldr	r3, [pc, #288]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bba:	4b47      	ldr	r3, [pc, #284]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003bc0:	4b45      	ldr	r3, [pc, #276]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003bc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bc8:	4b43      	ldr	r3, [pc, #268]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003bce:	4b42      	ldr	r3, [pc, #264]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bd4:	4b40      	ldr	r3, [pc, #256]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003bda:	483f      	ldr	r0, [pc, #252]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003bdc:	f002 fd64 	bl	80066a8 <HAL_TIM_Base_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003be6:	f7ff fe91 	bl	800390c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003bf0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4838      	ldr	r0, [pc, #224]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003bf8:	f002 fec0 	bl	800697c <HAL_TIM_ConfigClockSource>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003c02:	f7ff fe83 	bl	800390c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003c06:	4834      	ldr	r0, [pc, #208]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003c08:	f002 fd9d 	bl	8006746 <HAL_TIM_PWM_Init>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003c12:	f7ff fe7b 	bl	800390c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c16:	2300      	movs	r3, #0
 8003c18:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c1e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003c22:	4619      	mov	r1, r3
 8003c24:	482c      	ldr	r0, [pc, #176]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003c26:	f003 fa17 	bl	8007058 <HAL_TIMEx_MasterConfigSynchronization>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003c30:	f7ff fe6c 	bl	800390c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c34:	2360      	movs	r3, #96	@ 0x60
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003c40:	2300      	movs	r3, #0
 8003c42:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c54:	2200      	movs	r2, #0
 8003c56:	4619      	mov	r1, r3
 8003c58:	481f      	ldr	r0, [pc, #124]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003c5a:	f002 fdcd 	bl	80067f8 <HAL_TIM_PWM_ConfigChannel>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003c64:	f7ff fe52 	bl	800390c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4819      	ldr	r0, [pc, #100]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003c72:	f002 fdc1 	bl	80067f8 <HAL_TIM_PWM_ConfigChannel>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003c7c:	f7ff fe46 	bl	800390c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c84:	2208      	movs	r2, #8
 8003c86:	4619      	mov	r1, r3
 8003c88:	4813      	ldr	r0, [pc, #76]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003c8a:	f002 fdb5 	bl	80067f8 <HAL_TIM_PWM_ConfigChannel>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003c94:	f7ff fe3a 	bl	800390c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003cac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cb0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003cb6:	1d3b      	adds	r3, r7, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4807      	ldr	r0, [pc, #28]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003cbc:	f003 fa3a 	bl	8007134 <HAL_TIMEx_ConfigBreakDeadTime>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8003cc6:	f7ff fe21 	bl	800390c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003cca:	4803      	ldr	r0, [pc, #12]	@ (8003cd8 <MX_TIM1_Init+0x168>)
 8003ccc:	f000 f96c 	bl	8003fa8 <HAL_TIM_MspPostInit>

}
 8003cd0:	bf00      	nop
 8003cd2:	3758      	adds	r7, #88	@ 0x58
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000648 	.word	0x20000648
 8003cdc:	40010000 	.word	0x40010000

08003ce0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08e      	sub	sp, #56	@ 0x38
 8003ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ce6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	605a      	str	r2, [r3, #4]
 8003cf0:	609a      	str	r2, [r3, #8]
 8003cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cf4:	f107 0320 	add.w	r3, r7, #32
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cfe:	1d3b      	adds	r3, r7, #4
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	611a      	str	r2, [r3, #16]
 8003d0c:	615a      	str	r2, [r3, #20]
 8003d0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d10:	4b38      	ldr	r3, [pc, #224]	@ (8003df4 <MX_TIM2_Init+0x114>)
 8003d12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003d16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003d18:	4b36      	ldr	r3, [pc, #216]	@ (8003df4 <MX_TIM2_Init+0x114>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d1e:	4b35      	ldr	r3, [pc, #212]	@ (8003df4 <MX_TIM2_Init+0x114>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003d24:	4b33      	ldr	r3, [pc, #204]	@ (8003df4 <MX_TIM2_Init+0x114>)
 8003d26:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d2c:	4b31      	ldr	r3, [pc, #196]	@ (8003df4 <MX_TIM2_Init+0x114>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d32:	4b30      	ldr	r3, [pc, #192]	@ (8003df4 <MX_TIM2_Init+0x114>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d38:	482e      	ldr	r0, [pc, #184]	@ (8003df4 <MX_TIM2_Init+0x114>)
 8003d3a:	f002 fcb5 	bl	80066a8 <HAL_TIM_Base_Init>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003d44:	f7ff fde2 	bl	800390c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d52:	4619      	mov	r1, r3
 8003d54:	4827      	ldr	r0, [pc, #156]	@ (8003df4 <MX_TIM2_Init+0x114>)
 8003d56:	f002 fe11 	bl	800697c <HAL_TIM_ConfigClockSource>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003d60:	f7ff fdd4 	bl	800390c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003d64:	4823      	ldr	r0, [pc, #140]	@ (8003df4 <MX_TIM2_Init+0x114>)
 8003d66:	f002 fcee 	bl	8006746 <HAL_TIM_PWM_Init>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003d70:	f7ff fdcc 	bl	800390c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d74:	2300      	movs	r3, #0
 8003d76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d7c:	f107 0320 	add.w	r3, r7, #32
 8003d80:	4619      	mov	r1, r3
 8003d82:	481c      	ldr	r0, [pc, #112]	@ (8003df4 <MX_TIM2_Init+0x114>)
 8003d84:	f003 f968 	bl	8007058 <HAL_TIMEx_MasterConfigSynchronization>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003d8e:	f7ff fdbd 	bl	800390c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d92:	2360      	movs	r3, #96	@ 0x60
 8003d94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003da2:	1d3b      	adds	r3, r7, #4
 8003da4:	2200      	movs	r2, #0
 8003da6:	4619      	mov	r1, r3
 8003da8:	4812      	ldr	r0, [pc, #72]	@ (8003df4 <MX_TIM2_Init+0x114>)
 8003daa:	f002 fd25 	bl	80067f8 <HAL_TIM_PWM_ConfigChannel>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003db4:	f7ff fdaa 	bl	800390c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003db8:	1d3b      	adds	r3, r7, #4
 8003dba:	2204      	movs	r2, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	480d      	ldr	r0, [pc, #52]	@ (8003df4 <MX_TIM2_Init+0x114>)
 8003dc0:	f002 fd1a 	bl	80067f8 <HAL_TIM_PWM_ConfigChannel>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8003dca:	f7ff fd9f 	bl	800390c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003dce:	1d3b      	adds	r3, r7, #4
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4807      	ldr	r0, [pc, #28]	@ (8003df4 <MX_TIM2_Init+0x114>)
 8003dd6:	f002 fd0f 	bl	80067f8 <HAL_TIM_PWM_ConfigChannel>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8003de0:	f7ff fd94 	bl	800390c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003de4:	4803      	ldr	r0, [pc, #12]	@ (8003df4 <MX_TIM2_Init+0x114>)
 8003de6:	f000 f8df 	bl	8003fa8 <HAL_TIM_MspPostInit>

}
 8003dea:	bf00      	nop
 8003dec:	3738      	adds	r7, #56	@ 0x38
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000690 	.word	0x20000690

08003df8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08e      	sub	sp, #56	@ 0x38
 8003dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	609a      	str	r2, [r3, #8]
 8003e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e0c:	f107 0320 	add.w	r3, r7, #32
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e16:	1d3b      	adds	r3, r7, #4
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	611a      	str	r2, [r3, #16]
 8003e24:	615a      	str	r2, [r3, #20]
 8003e26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e28:	4b37      	ldr	r3, [pc, #220]	@ (8003f08 <MX_TIM3_Init+0x110>)
 8003e2a:	4a38      	ldr	r2, [pc, #224]	@ (8003f0c <MX_TIM3_Init+0x114>)
 8003e2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e2e:	4b36      	ldr	r3, [pc, #216]	@ (8003f08 <MX_TIM3_Init+0x110>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e34:	4b34      	ldr	r3, [pc, #208]	@ (8003f08 <MX_TIM3_Init+0x110>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e3a:	4b33      	ldr	r3, [pc, #204]	@ (8003f08 <MX_TIM3_Init+0x110>)
 8003e3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e42:	4b31      	ldr	r3, [pc, #196]	@ (8003f08 <MX_TIM3_Init+0x110>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e48:	4b2f      	ldr	r3, [pc, #188]	@ (8003f08 <MX_TIM3_Init+0x110>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e4e:	482e      	ldr	r0, [pc, #184]	@ (8003f08 <MX_TIM3_Init+0x110>)
 8003e50:	f002 fc2a 	bl	80066a8 <HAL_TIM_Base_Init>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003e5a:	f7ff fd57 	bl	800390c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4827      	ldr	r0, [pc, #156]	@ (8003f08 <MX_TIM3_Init+0x110>)
 8003e6c:	f002 fd86 	bl	800697c <HAL_TIM_ConfigClockSource>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003e76:	f7ff fd49 	bl	800390c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e7a:	4823      	ldr	r0, [pc, #140]	@ (8003f08 <MX_TIM3_Init+0x110>)
 8003e7c:	f002 fc63 	bl	8006746 <HAL_TIM_PWM_Init>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003e86:	f7ff fd41 	bl	800390c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003e92:	f107 0320 	add.w	r3, r7, #32
 8003e96:	4619      	mov	r1, r3
 8003e98:	481b      	ldr	r0, [pc, #108]	@ (8003f08 <MX_TIM3_Init+0x110>)
 8003e9a:	f003 f8dd 	bl	8007058 <HAL_TIMEx_MasterConfigSynchronization>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003ea4:	f7ff fd32 	bl	800390c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ea8:	2360      	movs	r3, #96	@ 0x60
 8003eaa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003eb8:	1d3b      	adds	r3, r7, #4
 8003eba:	2200      	movs	r2, #0
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4812      	ldr	r0, [pc, #72]	@ (8003f08 <MX_TIM3_Init+0x110>)
 8003ec0:	f002 fc9a 	bl	80067f8 <HAL_TIM_PWM_ConfigChannel>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003eca:	f7ff fd1f 	bl	800390c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ece:	1d3b      	adds	r3, r7, #4
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	480c      	ldr	r0, [pc, #48]	@ (8003f08 <MX_TIM3_Init+0x110>)
 8003ed6:	f002 fc8f 	bl	80067f8 <HAL_TIM_PWM_ConfigChannel>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003ee0:	f7ff fd14 	bl	800390c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ee4:	1d3b      	adds	r3, r7, #4
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4807      	ldr	r0, [pc, #28]	@ (8003f08 <MX_TIM3_Init+0x110>)
 8003eec:	f002 fc84 	bl	80067f8 <HAL_TIM_PWM_ConfigChannel>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8003ef6:	f7ff fd09 	bl	800390c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003efa:	4803      	ldr	r0, [pc, #12]	@ (8003f08 <MX_TIM3_Init+0x110>)
 8003efc:	f000 f854 	bl	8003fa8 <HAL_TIM_MspPostInit>

}
 8003f00:	bf00      	nop
 8003f02:	3738      	adds	r7, #56	@ 0x38
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	200006d8 	.word	0x200006d8
 8003f0c:	40000400 	.word	0x40000400

08003f10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8003f9c <HAL_TIM_Base_MspInit+0x8c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10e      	bne.n	8003f40 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa0 <HAL_TIM_Base_MspInit+0x90>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa0 <HAL_TIM_Base_MspInit+0x90>)
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f32:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa0 <HAL_TIM_Base_MspInit+0x90>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003f3e:	e026      	b.n	8003f8e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM2)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f48:	d10e      	bne.n	8003f68 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	4b14      	ldr	r3, [pc, #80]	@ (8003fa0 <HAL_TIM_Base_MspInit+0x90>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	4a13      	ldr	r2, [pc, #76]	@ (8003fa0 <HAL_TIM_Base_MspInit+0x90>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f5a:	4b11      	ldr	r3, [pc, #68]	@ (8003fa0 <HAL_TIM_Base_MspInit+0x90>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	693b      	ldr	r3, [r7, #16]
}
 8003f66:	e012      	b.n	8003f8e <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa4 <HAL_TIM_Base_MspInit+0x94>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d10d      	bne.n	8003f8e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <HAL_TIM_Base_MspInit+0x90>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	4a09      	ldr	r2, [pc, #36]	@ (8003fa0 <HAL_TIM_Base_MspInit+0x90>)
 8003f7c:	f043 0302 	orr.w	r3, r3, #2
 8003f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f82:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <HAL_TIM_Base_MspInit+0x90>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
}
 8003f8e:	bf00      	nop
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40010000 	.word	0x40010000
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40000400 	.word	0x40000400

08003fa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08c      	sub	sp, #48	@ 0x30
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb0:	f107 031c 	add.w	r3, r7, #28
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	60da      	str	r2, [r3, #12]
 8003fbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a55      	ldr	r2, [pc, #340]	@ (800411c <HAL_TIM_MspPostInit+0x174>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d11f      	bne.n	800400a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	4b54      	ldr	r3, [pc, #336]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd2:	4a53      	ldr	r2, [pc, #332]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fda:	4b51      	ldr	r3, [pc, #324]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	61bb      	str	r3, [r7, #24]
 8003fe4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003fe6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fec:	2302      	movs	r3, #2
 8003fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ffc:	f107 031c 	add.w	r3, r7, #28
 8004000:	4619      	mov	r1, r3
 8004002:	4848      	ldr	r0, [pc, #288]	@ (8004124 <HAL_TIM_MspPostInit+0x17c>)
 8004004:	f000 faac 	bl	8004560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004008:	e083      	b.n	8004112 <HAL_TIM_MspPostInit+0x16a>
  else if(timHandle->Instance==TIM2)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004012:	d13d      	bne.n	8004090 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	4b41      	ldr	r3, [pc, #260]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 800401a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401c:	4a40      	ldr	r2, [pc, #256]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6313      	str	r3, [r2, #48]	@ 0x30
 8004024:	4b3e      	ldr	r3, [pc, #248]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 8004026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004030:	2300      	movs	r3, #0
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	4b3a      	ldr	r3, [pc, #232]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 8004036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004038:	4a39      	ldr	r2, [pc, #228]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 800403a:	f043 0302 	orr.w	r3, r3, #2
 800403e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004040:	4b37      	ldr	r3, [pc, #220]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 8004042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800404c:	2303      	movs	r3, #3
 800404e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004050:	2302      	movs	r3, #2
 8004052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004058:	2300      	movs	r3, #0
 800405a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800405c:	2301      	movs	r3, #1
 800405e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004060:	f107 031c 	add.w	r3, r7, #28
 8004064:	4619      	mov	r1, r3
 8004066:	482f      	ldr	r0, [pc, #188]	@ (8004124 <HAL_TIM_MspPostInit+0x17c>)
 8004068:	f000 fa7a 	bl	8004560 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800406c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004072:	2302      	movs	r3, #2
 8004074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004076:	2300      	movs	r3, #0
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407a:	2300      	movs	r3, #0
 800407c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800407e:	2301      	movs	r3, #1
 8004080:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004082:	f107 031c 	add.w	r3, r7, #28
 8004086:	4619      	mov	r1, r3
 8004088:	4827      	ldr	r0, [pc, #156]	@ (8004128 <HAL_TIM_MspPostInit+0x180>)
 800408a:	f000 fa69 	bl	8004560 <HAL_GPIO_Init>
}
 800408e:	e040      	b.n	8004112 <HAL_TIM_MspPostInit+0x16a>
  else if(timHandle->Instance==TIM3)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a25      	ldr	r2, [pc, #148]	@ (800412c <HAL_TIM_MspPostInit+0x184>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d13b      	bne.n	8004112 <HAL_TIM_MspPostInit+0x16a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	4b20      	ldr	r3, [pc, #128]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	4b19      	ldr	r3, [pc, #100]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 80040c0:	f043 0302 	orr.w	r3, r3, #2
 80040c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040c6:	4b16      	ldr	r3, [pc, #88]	@ (8004120 <HAL_TIM_MspPostInit+0x178>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040d2:	23c0      	movs	r3, #192	@ 0xc0
 80040d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d6:	2302      	movs	r3, #2
 80040d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040de:	2300      	movs	r3, #0
 80040e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040e2:	2302      	movs	r3, #2
 80040e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e6:	f107 031c 	add.w	r3, r7, #28
 80040ea:	4619      	mov	r1, r3
 80040ec:	480d      	ldr	r0, [pc, #52]	@ (8004124 <HAL_TIM_MspPostInit+0x17c>)
 80040ee:	f000 fa37 	bl	8004560 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040f2:	2301      	movs	r3, #1
 80040f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f6:	2302      	movs	r3, #2
 80040f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040fe:	2300      	movs	r3, #0
 8004100:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004102:	2302      	movs	r3, #2
 8004104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004106:	f107 031c 	add.w	r3, r7, #28
 800410a:	4619      	mov	r1, r3
 800410c:	4806      	ldr	r0, [pc, #24]	@ (8004128 <HAL_TIM_MspPostInit+0x180>)
 800410e:	f000 fa27 	bl	8004560 <HAL_GPIO_Init>
}
 8004112:	bf00      	nop
 8004114:	3730      	adds	r7, #48	@ 0x30
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40010000 	.word	0x40010000
 8004120:	40023800 	.word	0x40023800
 8004124:	40020000 	.word	0x40020000
 8004128:	40020400 	.word	0x40020400
 800412c:	40000400 	.word	0x40000400

08004130 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004134:	4b11      	ldr	r3, [pc, #68]	@ (800417c <MX_USART2_UART_Init+0x4c>)
 8004136:	4a12      	ldr	r2, [pc, #72]	@ (8004180 <MX_USART2_UART_Init+0x50>)
 8004138:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800413a:	4b10      	ldr	r3, [pc, #64]	@ (800417c <MX_USART2_UART_Init+0x4c>)
 800413c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004140:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004142:	4b0e      	ldr	r3, [pc, #56]	@ (800417c <MX_USART2_UART_Init+0x4c>)
 8004144:	2200      	movs	r2, #0
 8004146:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004148:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <MX_USART2_UART_Init+0x4c>)
 800414a:	2200      	movs	r2, #0
 800414c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800414e:	4b0b      	ldr	r3, [pc, #44]	@ (800417c <MX_USART2_UART_Init+0x4c>)
 8004150:	2200      	movs	r2, #0
 8004152:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004154:	4b09      	ldr	r3, [pc, #36]	@ (800417c <MX_USART2_UART_Init+0x4c>)
 8004156:	220c      	movs	r2, #12
 8004158:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800415a:	4b08      	ldr	r3, [pc, #32]	@ (800417c <MX_USART2_UART_Init+0x4c>)
 800415c:	2200      	movs	r2, #0
 800415e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004160:	4b06      	ldr	r3, [pc, #24]	@ (800417c <MX_USART2_UART_Init+0x4c>)
 8004162:	2200      	movs	r2, #0
 8004164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004166:	4805      	ldr	r0, [pc, #20]	@ (800417c <MX_USART2_UART_Init+0x4c>)
 8004168:	f003 f836 	bl	80071d8 <HAL_UART_Init>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004172:	f7ff fbcb 	bl	800390c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000720 	.word	0x20000720
 8004180:	40004400 	.word	0x40004400

08004184 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	@ 0x28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800418c:	f107 0314 	add.w	r3, r7, #20
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	605a      	str	r2, [r3, #4]
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a19      	ldr	r2, [pc, #100]	@ (8004208 <HAL_UART_MspInit+0x84>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d12b      	bne.n	80041fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	4b18      	ldr	r3, [pc, #96]	@ (800420c <HAL_UART_MspInit+0x88>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	4a17      	ldr	r2, [pc, #92]	@ (800420c <HAL_UART_MspInit+0x88>)
 80041b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041b6:	4b15      	ldr	r3, [pc, #84]	@ (800420c <HAL_UART_MspInit+0x88>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	4b11      	ldr	r3, [pc, #68]	@ (800420c <HAL_UART_MspInit+0x88>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ca:	4a10      	ldr	r2, [pc, #64]	@ (800420c <HAL_UART_MspInit+0x88>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80041d2:	4b0e      	ldr	r3, [pc, #56]	@ (800420c <HAL_UART_MspInit+0x88>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80041de:	230c      	movs	r3, #12
 80041e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e2:	2302      	movs	r3, #2
 80041e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ea:	2300      	movs	r3, #0
 80041ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80041ee:	2307      	movs	r3, #7
 80041f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f2:	f107 0314 	add.w	r3, r7, #20
 80041f6:	4619      	mov	r1, r3
 80041f8:	4805      	ldr	r0, [pc, #20]	@ (8004210 <HAL_UART_MspInit+0x8c>)
 80041fa:	f000 f9b1 	bl	8004560 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80041fe:	bf00      	nop
 8004200:	3728      	adds	r7, #40	@ 0x28
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40004400 	.word	0x40004400
 800420c:	40023800 	.word	0x40023800
 8004210:	40020000 	.word	0x40020000

08004214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004214:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800424c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004218:	480d      	ldr	r0, [pc, #52]	@ (8004250 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800421a:	490e      	ldr	r1, [pc, #56]	@ (8004254 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800421c:	4a0e      	ldr	r2, [pc, #56]	@ (8004258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800421e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004220:	e002      	b.n	8004228 <LoopCopyDataInit>

08004222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004226:	3304      	adds	r3, #4

08004228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800422a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800422c:	d3f9      	bcc.n	8004222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800422e:	4a0b      	ldr	r2, [pc, #44]	@ (800425c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004230:	4c0b      	ldr	r4, [pc, #44]	@ (8004260 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004234:	e001      	b.n	800423a <LoopFillZerobss>

08004236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004238:	3204      	adds	r2, #4

0800423a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800423a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800423c:	d3fb      	bcc.n	8004236 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800423e:	f7ff fc85 	bl	8003b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004242:	f009 fae3 	bl	800d80c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004246:	f7ff fadd 	bl	8003804 <main>
  bx  lr    
 800424a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800424c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004254:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8004258:	08012418 	.word	0x08012418
  ldr r2, =_sbss
 800425c:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8004260:	20004684 	.word	0x20004684

08004264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004264:	e7fe      	b.n	8004264 <ADC_IRQHandler>
	...

08004268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800426c:	4b0e      	ldr	r3, [pc, #56]	@ (80042a8 <HAL_Init+0x40>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0d      	ldr	r2, [pc, #52]	@ (80042a8 <HAL_Init+0x40>)
 8004272:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004278:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <HAL_Init+0x40>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a0a      	ldr	r2, [pc, #40]	@ (80042a8 <HAL_Init+0x40>)
 800427e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004284:	4b08      	ldr	r3, [pc, #32]	@ (80042a8 <HAL_Init+0x40>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a07      	ldr	r2, [pc, #28]	@ (80042a8 <HAL_Init+0x40>)
 800428a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800428e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004290:	2003      	movs	r0, #3
 8004292:	f000 f931 	bl	80044f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004296:	200f      	movs	r0, #15
 8004298:	f000 f808 	bl	80042ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800429c:	f7ff fb3c 	bl	8003918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023c00 	.word	0x40023c00

080042ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042b4:	4b12      	ldr	r3, [pc, #72]	@ (8004300 <HAL_InitTick+0x54>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4b12      	ldr	r3, [pc, #72]	@ (8004304 <HAL_InitTick+0x58>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	4619      	mov	r1, r3
 80042be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f93b 	bl	8004546 <HAL_SYSTICK_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e00e      	b.n	80042f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b0f      	cmp	r3, #15
 80042de:	d80a      	bhi.n	80042f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042e0:	2200      	movs	r2, #0
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	f04f 30ff 	mov.w	r0, #4294967295
 80042e8:	f000 f911 	bl	800450e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042ec:	4a06      	ldr	r2, [pc, #24]	@ (8004308 <HAL_InitTick+0x5c>)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e000      	b.n	80042f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	2000000c 	.word	0x2000000c
 8004304:	20000014 	.word	0x20000014
 8004308:	20000010 	.word	0x20000010

0800430c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004310:	4b06      	ldr	r3, [pc, #24]	@ (800432c <HAL_IncTick+0x20>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <HAL_IncTick+0x24>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4413      	add	r3, r2
 800431c:	4a04      	ldr	r2, [pc, #16]	@ (8004330 <HAL_IncTick+0x24>)
 800431e:	6013      	str	r3, [r2, #0]
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000014 	.word	0x20000014
 8004330:	20000764 	.word	0x20000764

08004334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return uwTick;
 8004338:	4b03      	ldr	r3, [pc, #12]	@ (8004348 <HAL_GetTick+0x14>)
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000764 	.word	0x20000764

0800434c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004354:	f7ff ffee 	bl	8004334 <HAL_GetTick>
 8004358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d005      	beq.n	8004372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004366:	4b0a      	ldr	r3, [pc, #40]	@ (8004390 <HAL_Delay+0x44>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004372:	bf00      	nop
 8004374:	f7ff ffde 	bl	8004334 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	429a      	cmp	r2, r3
 8004382:	d8f7      	bhi.n	8004374 <HAL_Delay+0x28>
  {
  }
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000014 	.word	0x20000014

08004394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043a4:	4b0c      	ldr	r3, [pc, #48]	@ (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043b0:	4013      	ands	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043c6:	4a04      	ldr	r2, [pc, #16]	@ (80043d8 <__NVIC_SetPriorityGrouping+0x44>)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	60d3      	str	r3, [r2, #12]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043e0:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <__NVIC_GetPriorityGrouping+0x18>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	f003 0307 	and.w	r3, r3, #7
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	6039      	str	r1, [r7, #0]
 8004402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004408:	2b00      	cmp	r3, #0
 800440a:	db0a      	blt.n	8004422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	b2da      	uxtb	r2, r3
 8004410:	490c      	ldr	r1, [pc, #48]	@ (8004444 <__NVIC_SetPriority+0x4c>)
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	0112      	lsls	r2, r2, #4
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	440b      	add	r3, r1
 800441c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004420:	e00a      	b.n	8004438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	b2da      	uxtb	r2, r3
 8004426:	4908      	ldr	r1, [pc, #32]	@ (8004448 <__NVIC_SetPriority+0x50>)
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	3b04      	subs	r3, #4
 8004430:	0112      	lsls	r2, r2, #4
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	440b      	add	r3, r1
 8004436:	761a      	strb	r2, [r3, #24]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	e000e100 	.word	0xe000e100
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800444c:	b480      	push	{r7}
 800444e:	b089      	sub	sp, #36	@ 0x24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f1c3 0307 	rsb	r3, r3, #7
 8004466:	2b04      	cmp	r3, #4
 8004468:	bf28      	it	cs
 800446a:	2304      	movcs	r3, #4
 800446c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3304      	adds	r3, #4
 8004472:	2b06      	cmp	r3, #6
 8004474:	d902      	bls.n	800447c <NVIC_EncodePriority+0x30>
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	3b03      	subs	r3, #3
 800447a:	e000      	b.n	800447e <NVIC_EncodePriority+0x32>
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004480:	f04f 32ff 	mov.w	r2, #4294967295
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43da      	mvns	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	401a      	ands	r2, r3
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004494:	f04f 31ff 	mov.w	r1, #4294967295
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	fa01 f303 	lsl.w	r3, r1, r3
 800449e:	43d9      	mvns	r1, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a4:	4313      	orrs	r3, r2
         );
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3724      	adds	r7, #36	@ 0x24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
	...

080044b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3b01      	subs	r3, #1
 80044c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044c4:	d301      	bcc.n	80044ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044c6:	2301      	movs	r3, #1
 80044c8:	e00f      	b.n	80044ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044ca:	4a0a      	ldr	r2, [pc, #40]	@ (80044f4 <SysTick_Config+0x40>)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044d2:	210f      	movs	r1, #15
 80044d4:	f04f 30ff 	mov.w	r0, #4294967295
 80044d8:	f7ff ff8e 	bl	80043f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044dc:	4b05      	ldr	r3, [pc, #20]	@ (80044f4 <SysTick_Config+0x40>)
 80044de:	2200      	movs	r2, #0
 80044e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044e2:	4b04      	ldr	r3, [pc, #16]	@ (80044f4 <SysTick_Config+0x40>)
 80044e4:	2207      	movs	r2, #7
 80044e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	e000e010 	.word	0xe000e010

080044f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ff47 	bl	8004394 <__NVIC_SetPriorityGrouping>
}
 8004506:	bf00      	nop
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800450e:	b580      	push	{r7, lr}
 8004510:	b086      	sub	sp, #24
 8004512:	af00      	add	r7, sp, #0
 8004514:	4603      	mov	r3, r0
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004520:	f7ff ff5c 	bl	80043dc <__NVIC_GetPriorityGrouping>
 8004524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	6978      	ldr	r0, [r7, #20]
 800452c:	f7ff ff8e 	bl	800444c <NVIC_EncodePriority>
 8004530:	4602      	mov	r2, r0
 8004532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004536:	4611      	mov	r1, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff ff5d 	bl	80043f8 <__NVIC_SetPriority>
}
 800453e:	bf00      	nop
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff ffb0 	bl	80044b4 <SysTick_Config>
 8004554:	4603      	mov	r3, r0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004560:	b480      	push	{r7}
 8004562:	b089      	sub	sp, #36	@ 0x24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800456e:	2300      	movs	r3, #0
 8004570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004572:	2300      	movs	r3, #0
 8004574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	e159      	b.n	8004830 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800457c:	2201      	movs	r2, #1
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4013      	ands	r3, r2
 800458e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	429a      	cmp	r2, r3
 8004596:	f040 8148 	bne.w	800482a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d005      	beq.n	80045b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d130      	bne.n	8004614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	2203      	movs	r2, #3
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045e8:	2201      	movs	r2, #1
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	091b      	lsrs	r3, r3, #4
 80045fe:	f003 0201 	and.w	r2, r3, #1
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4313      	orrs	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b03      	cmp	r3, #3
 800461e:	d017      	beq.n	8004650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	2203      	movs	r2, #3
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4013      	ands	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4313      	orrs	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d123      	bne.n	80046a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	08da      	lsrs	r2, r3, #3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3208      	adds	r2, #8
 8004664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	220f      	movs	r2, #15
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4313      	orrs	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	08da      	lsrs	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3208      	adds	r2, #8
 800469e:	69b9      	ldr	r1, [r7, #24]
 80046a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	2203      	movs	r2, #3
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 0203 	and.w	r2, r3, #3
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80a2 	beq.w	800482a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	4b57      	ldr	r3, [pc, #348]	@ (8004848 <HAL_GPIO_Init+0x2e8>)
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	4a56      	ldr	r2, [pc, #344]	@ (8004848 <HAL_GPIO_Init+0x2e8>)
 80046f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80046f6:	4b54      	ldr	r3, [pc, #336]	@ (8004848 <HAL_GPIO_Init+0x2e8>)
 80046f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004702:	4a52      	ldr	r2, [pc, #328]	@ (800484c <HAL_GPIO_Init+0x2ec>)
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	3302      	adds	r3, #2
 800470a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	220f      	movs	r2, #15
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4013      	ands	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a49      	ldr	r2, [pc, #292]	@ (8004850 <HAL_GPIO_Init+0x2f0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d019      	beq.n	8004762 <HAL_GPIO_Init+0x202>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a48      	ldr	r2, [pc, #288]	@ (8004854 <HAL_GPIO_Init+0x2f4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <HAL_GPIO_Init+0x1fe>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a47      	ldr	r2, [pc, #284]	@ (8004858 <HAL_GPIO_Init+0x2f8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00d      	beq.n	800475a <HAL_GPIO_Init+0x1fa>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a46      	ldr	r2, [pc, #280]	@ (800485c <HAL_GPIO_Init+0x2fc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d007      	beq.n	8004756 <HAL_GPIO_Init+0x1f6>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a45      	ldr	r2, [pc, #276]	@ (8004860 <HAL_GPIO_Init+0x300>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d101      	bne.n	8004752 <HAL_GPIO_Init+0x1f2>
 800474e:	2304      	movs	r3, #4
 8004750:	e008      	b.n	8004764 <HAL_GPIO_Init+0x204>
 8004752:	2307      	movs	r3, #7
 8004754:	e006      	b.n	8004764 <HAL_GPIO_Init+0x204>
 8004756:	2303      	movs	r3, #3
 8004758:	e004      	b.n	8004764 <HAL_GPIO_Init+0x204>
 800475a:	2302      	movs	r3, #2
 800475c:	e002      	b.n	8004764 <HAL_GPIO_Init+0x204>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <HAL_GPIO_Init+0x204>
 8004762:	2300      	movs	r3, #0
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	f002 0203 	and.w	r2, r2, #3
 800476a:	0092      	lsls	r2, r2, #2
 800476c:	4093      	lsls	r3, r2
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004774:	4935      	ldr	r1, [pc, #212]	@ (800484c <HAL_GPIO_Init+0x2ec>)
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	089b      	lsrs	r3, r3, #2
 800477a:	3302      	adds	r3, #2
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004782:	4b38      	ldr	r3, [pc, #224]	@ (8004864 <HAL_GPIO_Init+0x304>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	43db      	mvns	r3, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004864 <HAL_GPIO_Init+0x304>)
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004864 <HAL_GPIO_Init+0x304>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047d0:	4a24      	ldr	r2, [pc, #144]	@ (8004864 <HAL_GPIO_Init+0x304>)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047d6:	4b23      	ldr	r3, [pc, #140]	@ (8004864 <HAL_GPIO_Init+0x304>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	43db      	mvns	r3, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4013      	ands	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004864 <HAL_GPIO_Init+0x304>)
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004800:	4b18      	ldr	r3, [pc, #96]	@ (8004864 <HAL_GPIO_Init+0x304>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	43db      	mvns	r3, r3
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4013      	ands	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004824:	4a0f      	ldr	r2, [pc, #60]	@ (8004864 <HAL_GPIO_Init+0x304>)
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	3301      	adds	r3, #1
 800482e:	61fb      	str	r3, [r7, #28]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b0f      	cmp	r3, #15
 8004834:	f67f aea2 	bls.w	800457c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	3724      	adds	r7, #36	@ 0x24
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40023800 	.word	0x40023800
 800484c:	40013800 	.word	0x40013800
 8004850:	40020000 	.word	0x40020000
 8004854:	40020400 	.word	0x40020400
 8004858:	40020800 	.word	0x40020800
 800485c:	40020c00 	.word	0x40020c00
 8004860:	40021000 	.word	0x40021000
 8004864:	40013c00 	.word	0x40013c00

08004868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	807b      	strh	r3, [r7, #2]
 8004874:	4613      	mov	r3, r2
 8004876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004878:	787b      	ldrb	r3, [r7, #1]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800487e:	887a      	ldrh	r2, [r7, #2]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004884:	e003      	b.n	800488e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004886:	887b      	ldrh	r3, [r7, #2]
 8004888:	041a      	lsls	r2, r3, #16
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	619a      	str	r2, [r3, #24]
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e12b      	b.n	8004b06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fe fdee 	bl	80034a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2224      	movs	r2, #36	@ 0x24
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0201 	bic.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004900:	f001 feaa 	bl	8006658 <HAL_RCC_GetPCLK1Freq>
 8004904:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	4a81      	ldr	r2, [pc, #516]	@ (8004b10 <HAL_I2C_Init+0x274>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d807      	bhi.n	8004920 <HAL_I2C_Init+0x84>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4a80      	ldr	r2, [pc, #512]	@ (8004b14 <HAL_I2C_Init+0x278>)
 8004914:	4293      	cmp	r3, r2
 8004916:	bf94      	ite	ls
 8004918:	2301      	movls	r3, #1
 800491a:	2300      	movhi	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	e006      	b.n	800492e <HAL_I2C_Init+0x92>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4a7d      	ldr	r2, [pc, #500]	@ (8004b18 <HAL_I2C_Init+0x27c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	bf94      	ite	ls
 8004928:	2301      	movls	r3, #1
 800492a:	2300      	movhi	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e0e7      	b.n	8004b06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a78      	ldr	r2, [pc, #480]	@ (8004b1c <HAL_I2C_Init+0x280>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	0c9b      	lsrs	r3, r3, #18
 8004940:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	4a6a      	ldr	r2, [pc, #424]	@ (8004b10 <HAL_I2C_Init+0x274>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d802      	bhi.n	8004970 <HAL_I2C_Init+0xd4>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	3301      	adds	r3, #1
 800496e:	e009      	b.n	8004984 <HAL_I2C_Init+0xe8>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	4a69      	ldr	r2, [pc, #420]	@ (8004b20 <HAL_I2C_Init+0x284>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	099b      	lsrs	r3, r3, #6
 8004982:	3301      	adds	r3, #1
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	430b      	orrs	r3, r1
 800498a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004996:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	495c      	ldr	r1, [pc, #368]	@ (8004b10 <HAL_I2C_Init+0x274>)
 80049a0:	428b      	cmp	r3, r1
 80049a2:	d819      	bhi.n	80049d8 <HAL_I2C_Init+0x13c>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	1e59      	subs	r1, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80049b2:	1c59      	adds	r1, r3, #1
 80049b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80049b8:	400b      	ands	r3, r1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_I2C_Init+0x138>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	1e59      	subs	r1, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80049cc:	3301      	adds	r3, #1
 80049ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d2:	e051      	b.n	8004a78 <HAL_I2C_Init+0x1dc>
 80049d4:	2304      	movs	r3, #4
 80049d6:	e04f      	b.n	8004a78 <HAL_I2C_Init+0x1dc>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d111      	bne.n	8004a04 <HAL_I2C_Init+0x168>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1e58      	subs	r0, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6859      	ldr	r1, [r3, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	440b      	add	r3, r1
 80049ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80049f2:	3301      	adds	r3, #1
 80049f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf0c      	ite	eq
 80049fc:	2301      	moveq	r3, #1
 80049fe:	2300      	movne	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	e012      	b.n	8004a2a <HAL_I2C_Init+0x18e>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1e58      	subs	r0, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	0099      	lsls	r1, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_I2C_Init+0x196>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e022      	b.n	8004a78 <HAL_I2C_Init+0x1dc>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10e      	bne.n	8004a58 <HAL_I2C_Init+0x1bc>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1e58      	subs	r0, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6859      	ldr	r1, [r3, #4]
 8004a42:	460b      	mov	r3, r1
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	440b      	add	r3, r1
 8004a48:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a56:	e00f      	b.n	8004a78 <HAL_I2C_Init+0x1dc>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	1e58      	subs	r0, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6859      	ldr	r1, [r3, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	0099      	lsls	r1, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	6809      	ldr	r1, [r1, #0]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69da      	ldr	r2, [r3, #28]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004aa6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6911      	ldr	r1, [r2, #16]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68d2      	ldr	r2, [r2, #12]
 8004ab2:	4311      	orrs	r1, r2
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695a      	ldr	r2, [r3, #20]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	000186a0 	.word	0x000186a0
 8004b14:	001e847f 	.word	0x001e847f
 8004b18:	003d08ff 	.word	0x003d08ff
 8004b1c:	431bde83 	.word	0x431bde83
 8004b20:	10624dd3 	.word	0x10624dd3

08004b24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	460b      	mov	r3, r1
 8004b32:	817b      	strh	r3, [r7, #10]
 8004b34:	4613      	mov	r3, r2
 8004b36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b38:	f7ff fbfc 	bl	8004334 <HAL_GetTick>
 8004b3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	f040 80e0 	bne.w	8004d0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	2319      	movs	r3, #25
 8004b52:	2201      	movs	r2, #1
 8004b54:	4970      	ldr	r1, [pc, #448]	@ (8004d18 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 ff30 	bl	80059bc <I2C_WaitOnFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
 8004b64:	e0d3      	b.n	8004d0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_I2C_Master_Transmit+0x50>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e0cc      	b.n	8004d0e <HAL_I2C_Master_Transmit+0x1ea>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d007      	beq.n	8004b9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0201 	orr.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ba8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2221      	movs	r2, #33	@ 0x21
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	893a      	ldrh	r2, [r7, #8]
 8004bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4a50      	ldr	r2, [pc, #320]	@ (8004d1c <HAL_I2C_Master_Transmit+0x1f8>)
 8004bda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bdc:	8979      	ldrh	r1, [r7, #10]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	6a3a      	ldr	r2, [r7, #32]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fcea 	bl	80055bc <I2C_MasterRequestWrite>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e08d      	b.n	8004d0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c08:	e066      	b.n	8004cd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	6a39      	ldr	r1, [r7, #32]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 ffaa 	bl	8005b68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00d      	beq.n	8004c36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d107      	bne.n	8004c32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e06b      	b.n	8004d0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	781a      	ldrb	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d11b      	bne.n	8004cac <HAL_I2C_Master_Transmit+0x188>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d017      	beq.n	8004cac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c80:	781a      	ldrb	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	6a39      	ldr	r1, [r7, #32]
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 ff9a 	bl	8005bea <I2C_WaitOnBTFFlagUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00d      	beq.n	8004cd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d107      	bne.n	8004cd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e01a      	b.n	8004d0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d194      	bne.n	8004c0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e000      	b.n	8004d0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
  }
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	00100002 	.word	0x00100002
 8004d1c:	ffff0000 	.word	0xffff0000

08004d20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	4608      	mov	r0, r1
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	817b      	strh	r3, [r7, #10]
 8004d32:	460b      	mov	r3, r1
 8004d34:	813b      	strh	r3, [r7, #8]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d3a:	f7ff fafb 	bl	8004334 <HAL_GetTick>
 8004d3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	f040 80d9 	bne.w	8004f00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	2319      	movs	r3, #25
 8004d54:	2201      	movs	r2, #1
 8004d56:	496d      	ldr	r1, [pc, #436]	@ (8004f0c <HAL_I2C_Mem_Write+0x1ec>)
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fe2f 	bl	80059bc <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d64:	2302      	movs	r3, #2
 8004d66:	e0cc      	b.n	8004f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d101      	bne.n	8004d76 <HAL_I2C_Mem_Write+0x56>
 8004d72:	2302      	movs	r3, #2
 8004d74:	e0c5      	b.n	8004f02 <HAL_I2C_Mem_Write+0x1e2>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d007      	beq.n	8004d9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004daa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2221      	movs	r2, #33	@ 0x21
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2240      	movs	r2, #64	@ 0x40
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a3a      	ldr	r2, [r7, #32]
 8004dc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a4d      	ldr	r2, [pc, #308]	@ (8004f10 <HAL_I2C_Mem_Write+0x1f0>)
 8004ddc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dde:	88f8      	ldrh	r0, [r7, #6]
 8004de0:	893a      	ldrh	r2, [r7, #8]
 8004de2:	8979      	ldrh	r1, [r7, #10]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	9301      	str	r3, [sp, #4]
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	4603      	mov	r3, r0
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 fc66 	bl	80056c0 <I2C_RequestMemoryWrite>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d052      	beq.n	8004ea0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e081      	b.n	8004f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 feb0 	bl	8005b68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00d      	beq.n	8004e2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d107      	bne.n	8004e26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e06b      	b.n	8004f02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2e:	781a      	ldrb	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d11b      	bne.n	8004ea0 <HAL_I2C_Mem_Write+0x180>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d017      	beq.n	8004ea0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	781a      	ldrb	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1aa      	bne.n	8004dfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 fe9c 	bl	8005bea <I2C_WaitOnBTFFlagUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00d      	beq.n	8004ed4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d107      	bne.n	8004ed0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ece:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e016      	b.n	8004f02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e000      	b.n	8004f02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f00:	2302      	movs	r3, #2
  }
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	00100002 	.word	0x00100002
 8004f10:	ffff0000 	.word	0xffff0000

08004f14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08c      	sub	sp, #48	@ 0x30
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	4611      	mov	r1, r2
 8004f20:	461a      	mov	r2, r3
 8004f22:	4603      	mov	r3, r0
 8004f24:	817b      	strh	r3, [r7, #10]
 8004f26:	460b      	mov	r3, r1
 8004f28:	813b      	strh	r3, [r7, #8]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f2e:	f7ff fa01 	bl	8004334 <HAL_GetTick>
 8004f32:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	f040 8208 	bne.w	8005352 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	2319      	movs	r3, #25
 8004f48:	2201      	movs	r2, #1
 8004f4a:	497b      	ldr	r1, [pc, #492]	@ (8005138 <HAL_I2C_Mem_Read+0x224>)
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fd35 	bl	80059bc <I2C_WaitOnFlagUntilTimeout>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e1fb      	b.n	8005354 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_I2C_Mem_Read+0x56>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e1f4      	b.n	8005354 <HAL_I2C_Mem_Read+0x440>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d007      	beq.n	8004f90 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2222      	movs	r2, #34	@ 0x22
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2240      	movs	r2, #64	@ 0x40
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4a5b      	ldr	r2, [pc, #364]	@ (800513c <HAL_I2C_Mem_Read+0x228>)
 8004fd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fd2:	88f8      	ldrh	r0, [r7, #6]
 8004fd4:	893a      	ldrh	r2, [r7, #8]
 8004fd6:	8979      	ldrh	r1, [r7, #10]
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fda:	9301      	str	r3, [sp, #4]
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 fc02 	bl	80057ec <I2C_RequestMemoryRead>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e1b0      	b.n	8005354 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d113      	bne.n	8005022 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	623b      	str	r3, [r7, #32]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	623b      	str	r3, [r7, #32]
 800500e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e184      	b.n	800532c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005026:	2b01      	cmp	r3, #1
 8005028:	d11b      	bne.n	8005062 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	e164      	b.n	800532c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005066:	2b02      	cmp	r3, #2
 8005068:	d11b      	bne.n	80050a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005078:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005088:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800508a:	2300      	movs	r3, #0
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	e144      	b.n	800532c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050b8:	e138      	b.n	800532c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050be:	2b03      	cmp	r3, #3
 80050c0:	f200 80f1 	bhi.w	80052a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d123      	bne.n	8005114 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fdcb 	bl	8005c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e139      	b.n	8005354 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691a      	ldr	r2, [r3, #16]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005112:	e10b      	b.n	800532c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005118:	2b02      	cmp	r3, #2
 800511a:	d14e      	bne.n	80051ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005122:	2200      	movs	r2, #0
 8005124:	4906      	ldr	r1, [pc, #24]	@ (8005140 <HAL_I2C_Mem_Read+0x22c>)
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 fc48 	bl	80059bc <I2C_WaitOnFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d008      	beq.n	8005144 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e10e      	b.n	8005354 <HAL_I2C_Mem_Read+0x440>
 8005136:	bf00      	nop
 8005138:	00100002 	.word	0x00100002
 800513c:	ffff0000 	.word	0xffff0000
 8005140:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051b8:	e0b8      	b.n	800532c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c0:	2200      	movs	r2, #0
 80051c2:	4966      	ldr	r1, [pc, #408]	@ (800535c <HAL_I2C_Mem_Read+0x448>)
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fbf9 	bl	80059bc <I2C_WaitOnFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0bf      	b.n	8005354 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521c:	2200      	movs	r2, #0
 800521e:	494f      	ldr	r1, [pc, #316]	@ (800535c <HAL_I2C_Mem_Read+0x448>)
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 fbcb 	bl	80059bc <I2C_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e091      	b.n	8005354 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800523e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052a4:	e042      	b.n	800532c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fcde 	bl	8005c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e04c      	b.n	8005354 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d118      	bne.n	800532c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005322:	b29b      	uxth	r3, r3
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005330:	2b00      	cmp	r3, #0
 8005332:	f47f aec2 	bne.w	80050ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2220      	movs	r2, #32
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	e000      	b.n	8005354 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005352:	2302      	movs	r3, #2
  }
}
 8005354:	4618      	mov	r0, r3
 8005356:	3728      	adds	r7, #40	@ 0x28
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	00010004 	.word	0x00010004

08005360 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	@ 0x28
 8005364:	af02      	add	r7, sp, #8
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	607a      	str	r2, [r7, #4]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	460b      	mov	r3, r1
 800536e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005370:	f7fe ffe0 	bl	8004334 <HAL_GetTick>
 8005374:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b20      	cmp	r3, #32
 8005384:	f040 8111 	bne.w	80055aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	2319      	movs	r3, #25
 800538e:	2201      	movs	r2, #1
 8005390:	4988      	ldr	r1, [pc, #544]	@ (80055b4 <HAL_I2C_IsDeviceReady+0x254>)
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fb12 	bl	80059bc <I2C_WaitOnFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800539e:	2302      	movs	r3, #2
 80053a0:	e104      	b.n	80055ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_I2C_IsDeviceReady+0x50>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e0fd      	b.n	80055ac <HAL_I2C_IsDeviceReady+0x24c>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d007      	beq.n	80053d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0201 	orr.w	r2, r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2224      	movs	r2, #36	@ 0x24
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4a70      	ldr	r2, [pc, #448]	@ (80055b8 <HAL_I2C_IsDeviceReady+0x258>)
 80053f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005408:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2200      	movs	r2, #0
 8005412:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 fad0 	bl	80059bc <I2C_WaitOnFlagUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00d      	beq.n	800543e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800542c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005430:	d103      	bne.n	800543a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005438:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e0b6      	b.n	80055ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800543e:	897b      	ldrh	r3, [r7, #10]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800544c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800544e:	f7fe ff71 	bl	8004334 <HAL_GetTick>
 8005452:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b02      	cmp	r3, #2
 8005460:	bf0c      	ite	eq
 8005462:	2301      	moveq	r3, #1
 8005464:	2300      	movne	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005478:	bf0c      	ite	eq
 800547a:	2301      	moveq	r3, #1
 800547c:	2300      	movne	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005482:	e025      	b.n	80054d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005484:	f7fe ff56 	bl	8004334 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d302      	bcc.n	800549a <HAL_I2C_IsDeviceReady+0x13a>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	22a0      	movs	r2, #160	@ 0xa0
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	bf0c      	ite	eq
 80054b0:	2301      	moveq	r3, #1
 80054b2:	2300      	movne	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c6:	bf0c      	ite	eq
 80054c8:	2301      	moveq	r3, #1
 80054ca:	2300      	movne	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80054da:	d005      	beq.n	80054e8 <HAL_I2C_IsDeviceReady+0x188>
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d102      	bne.n	80054e8 <HAL_I2C_IsDeviceReady+0x188>
 80054e2:	7dbb      	ldrb	r3, [r7, #22]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0cd      	beq.n	8005484 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d129      	bne.n	8005552 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800550c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550e:	2300      	movs	r3, #0
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	2319      	movs	r3, #25
 800552a:	2201      	movs	r2, #1
 800552c:	4921      	ldr	r1, [pc, #132]	@ (80055b4 <HAL_I2C_IsDeviceReady+0x254>)
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 fa44 	bl	80059bc <I2C_WaitOnFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e036      	b.n	80055ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	e02c      	b.n	80055ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005560:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800556a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	2319      	movs	r3, #25
 8005572:	2201      	movs	r2, #1
 8005574:	490f      	ldr	r1, [pc, #60]	@ (80055b4 <HAL_I2C_IsDeviceReady+0x254>)
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 fa20 	bl	80059bc <I2C_WaitOnFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e012      	b.n	80055ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	3301      	adds	r3, #1
 800558a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	f4ff af32 	bcc.w	80053fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80055aa:	2302      	movs	r3, #2
  }
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3720      	adds	r7, #32
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	00100002 	.word	0x00100002
 80055b8:	ffff0000 	.word	0xffff0000

080055bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	607a      	str	r2, [r7, #4]
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	460b      	mov	r3, r1
 80055ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d006      	beq.n	80055e6 <I2C_MasterRequestWrite+0x2a>
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d003      	beq.n	80055e6 <I2C_MasterRequestWrite+0x2a>
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055e4:	d108      	bne.n	80055f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e00b      	b.n	8005610 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fc:	2b12      	cmp	r3, #18
 80055fe:	d107      	bne.n	8005610 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800560e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f9cd 	bl	80059bc <I2C_WaitOnFlagUntilTimeout>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00d      	beq.n	8005644 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005636:	d103      	bne.n	8005640 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800563e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e035      	b.n	80056b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800564c:	d108      	bne.n	8005660 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800564e:	897b      	ldrh	r3, [r7, #10]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800565c:	611a      	str	r2, [r3, #16]
 800565e:	e01b      	b.n	8005698 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005660:	897b      	ldrh	r3, [r7, #10]
 8005662:	11db      	asrs	r3, r3, #7
 8005664:	b2db      	uxtb	r3, r3
 8005666:	f003 0306 	and.w	r3, r3, #6
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f063 030f 	orn	r3, r3, #15
 8005670:	b2da      	uxtb	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	490e      	ldr	r1, [pc, #56]	@ (80056b8 <I2C_MasterRequestWrite+0xfc>)
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 f9f3 	bl	8005a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e010      	b.n	80056b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800568e:	897b      	ldrh	r3, [r7, #10]
 8005690:	b2da      	uxtb	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	4907      	ldr	r1, [pc, #28]	@ (80056bc <I2C_MasterRequestWrite+0x100>)
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 f9e3 	bl	8005a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	00010008 	.word	0x00010008
 80056bc:	00010002 	.word	0x00010002

080056c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	4608      	mov	r0, r1
 80056ca:	4611      	mov	r1, r2
 80056cc:	461a      	mov	r2, r3
 80056ce:	4603      	mov	r3, r0
 80056d0:	817b      	strh	r3, [r7, #10]
 80056d2:	460b      	mov	r3, r1
 80056d4:	813b      	strh	r3, [r7, #8]
 80056d6:	4613      	mov	r3, r2
 80056d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f960 	bl	80059bc <I2C_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00d      	beq.n	800571e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005710:	d103      	bne.n	800571a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005718:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e05f      	b.n	80057de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800571e:	897b      	ldrh	r3, [r7, #10]
 8005720:	b2db      	uxtb	r3, r3
 8005722:	461a      	mov	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800572c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005730:	6a3a      	ldr	r2, [r7, #32]
 8005732:	492d      	ldr	r1, [pc, #180]	@ (80057e8 <I2C_RequestMemoryWrite+0x128>)
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 f998 	bl	8005a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e04c      	b.n	80057de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800575a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800575c:	6a39      	ldr	r1, [r7, #32]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 fa02 	bl	8005b68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00d      	beq.n	8005786 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576e:	2b04      	cmp	r3, #4
 8005770:	d107      	bne.n	8005782 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005780:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e02b      	b.n	80057de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d105      	bne.n	8005798 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800578c:	893b      	ldrh	r3, [r7, #8]
 800578e:	b2da      	uxtb	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	611a      	str	r2, [r3, #16]
 8005796:	e021      	b.n	80057dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005798:	893b      	ldrh	r3, [r7, #8]
 800579a:	0a1b      	lsrs	r3, r3, #8
 800579c:	b29b      	uxth	r3, r3
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a8:	6a39      	ldr	r1, [r7, #32]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f9dc 	bl	8005b68 <I2C_WaitOnTXEFlagUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00d      	beq.n	80057d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d107      	bne.n	80057ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e005      	b.n	80057de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057d2:	893b      	ldrh	r3, [r7, #8]
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	00010002 	.word	0x00010002

080057ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	4608      	mov	r0, r1
 80057f6:	4611      	mov	r1, r2
 80057f8:	461a      	mov	r2, r3
 80057fa:	4603      	mov	r3, r0
 80057fc:	817b      	strh	r3, [r7, #10]
 80057fe:	460b      	mov	r3, r1
 8005800:	813b      	strh	r3, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005814:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005824:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	2200      	movs	r2, #0
 800582e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f8c2 	bl	80059bc <I2C_WaitOnFlagUntilTimeout>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00d      	beq.n	800585a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800584c:	d103      	bne.n	8005856 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005854:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e0aa      	b.n	80059b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800585a:	897b      	ldrh	r3, [r7, #10]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005868:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	6a3a      	ldr	r2, [r7, #32]
 800586e:	4952      	ldr	r1, [pc, #328]	@ (80059b8 <I2C_RequestMemoryRead+0x1cc>)
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 f8fa 	bl	8005a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e097      	b.n	80059b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005898:	6a39      	ldr	r1, [r7, #32]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 f964 	bl	8005b68 <I2C_WaitOnTXEFlagUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00d      	beq.n	80058c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d107      	bne.n	80058be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e076      	b.n	80059b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058c2:	88fb      	ldrh	r3, [r7, #6]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d105      	bne.n	80058d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058c8:	893b      	ldrh	r3, [r7, #8]
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	611a      	str	r2, [r3, #16]
 80058d2:	e021      	b.n	8005918 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058d4:	893b      	ldrh	r3, [r7, #8]
 80058d6:	0a1b      	lsrs	r3, r3, #8
 80058d8:	b29b      	uxth	r3, r3
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058e4:	6a39      	ldr	r1, [r7, #32]
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 f93e 	bl	8005b68 <I2C_WaitOnTXEFlagUntilTimeout>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00d      	beq.n	800590e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d107      	bne.n	800590a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005908:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e050      	b.n	80059b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800590e:	893b      	ldrh	r3, [r7, #8]
 8005910:	b2da      	uxtb	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800591a:	6a39      	ldr	r1, [r7, #32]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f923 	bl	8005b68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00d      	beq.n	8005944 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592c:	2b04      	cmp	r3, #4
 800592e:	d107      	bne.n	8005940 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800593e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e035      	b.n	80059b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005952:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	2200      	movs	r2, #0
 800595c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f82b 	bl	80059bc <I2C_WaitOnFlagUntilTimeout>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00d      	beq.n	8005988 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800597a:	d103      	bne.n	8005984 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005982:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e013      	b.n	80059b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005988:	897b      	ldrh	r3, [r7, #10]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	b2da      	uxtb	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	6a3a      	ldr	r2, [r7, #32]
 800599c:	4906      	ldr	r1, [pc, #24]	@ (80059b8 <I2C_RequestMemoryRead+0x1cc>)
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 f863 	bl	8005a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	00010002 	.word	0x00010002

080059bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	4613      	mov	r3, r2
 80059ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059cc:	e025      	b.n	8005a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d4:	d021      	beq.n	8005a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d6:	f7fe fcad 	bl	8004334 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d302      	bcc.n	80059ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d116      	bne.n	8005a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a06:	f043 0220 	orr.w	r2, r3, #32
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e023      	b.n	8005a62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	0c1b      	lsrs	r3, r3, #16
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d10d      	bne.n	8005a40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	43da      	mvns	r2, r3
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bf0c      	ite	eq
 8005a36:	2301      	moveq	r3, #1
 8005a38:	2300      	movne	r3, #0
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	e00c      	b.n	8005a5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	43da      	mvns	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	bf0c      	ite	eq
 8005a52:	2301      	moveq	r3, #1
 8005a54:	2300      	movne	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d0b6      	beq.n	80059ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a78:	e051      	b.n	8005b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a88:	d123      	bne.n	8005ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005aa2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abe:	f043 0204 	orr.w	r2, r3, #4
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e046      	b.n	8005b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad8:	d021      	beq.n	8005b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ada:	f7fe fc2b 	bl	8004334 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d302      	bcc.n	8005af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d116      	bne.n	8005b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0a:	f043 0220 	orr.w	r2, r3, #32
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e020      	b.n	8005b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	0c1b      	lsrs	r3, r3, #16
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d10c      	bne.n	8005b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	43da      	mvns	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4013      	ands	r3, r2
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bf14      	ite	ne
 8005b3a:	2301      	movne	r3, #1
 8005b3c:	2300      	moveq	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	e00b      	b.n	8005b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	43da      	mvns	r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	bf14      	ite	ne
 8005b54:	2301      	movne	r3, #1
 8005b56:	2300      	moveq	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d18d      	bne.n	8005a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b74:	e02d      	b.n	8005bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f8ce 	bl	8005d18 <I2C_IsAcknowledgeFailed>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e02d      	b.n	8005be2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8c:	d021      	beq.n	8005bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8e:	f7fe fbd1 	bl	8004334 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d302      	bcc.n	8005ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d116      	bne.n	8005bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbe:	f043 0220 	orr.w	r2, r3, #32
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e007      	b.n	8005be2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bdc:	2b80      	cmp	r3, #128	@ 0x80
 8005bde:	d1ca      	bne.n	8005b76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bf6:	e02d      	b.n	8005c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f88d 	bl	8005d18 <I2C_IsAcknowledgeFailed>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e02d      	b.n	8005c64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d021      	beq.n	8005c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c10:	f7fe fb90 	bl	8004334 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d302      	bcc.n	8005c26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d116      	bne.n	8005c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c40:	f043 0220 	orr.w	r2, r3, #32
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e007      	b.n	8005c64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d1ca      	bne.n	8005bf8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c78:	e042      	b.n	8005d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	d119      	bne.n	8005cbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0210 	mvn.w	r2, #16
 8005c90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e029      	b.n	8005d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cbc:	f7fe fb3a 	bl	8004334 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d302      	bcc.n	8005cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d116      	bne.n	8005d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cec:	f043 0220 	orr.w	r2, r3, #32
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e007      	b.n	8005d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0a:	2b40      	cmp	r3, #64	@ 0x40
 8005d0c:	d1b5      	bne.n	8005c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d2e:	d11b      	bne.n	8005d68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d54:	f043 0204 	orr.w	r2, r3, #4
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e000      	b.n	8005d6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e267      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d075      	beq.n	8005e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d96:	4b88      	ldr	r3, [pc, #544]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d00c      	beq.n	8005dbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005da2:	4b85      	ldr	r3, [pc, #532]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	d112      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dae:	4b82      	ldr	r3, [pc, #520]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005db6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dba:	d10b      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dbc:	4b7e      	ldr	r3, [pc, #504]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d05b      	beq.n	8005e80 <HAL_RCC_OscConfig+0x108>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d157      	bne.n	8005e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e242      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ddc:	d106      	bne.n	8005dec <HAL_RCC_OscConfig+0x74>
 8005dde:	4b76      	ldr	r3, [pc, #472]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a75      	ldr	r2, [pc, #468]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	e01d      	b.n	8005e28 <HAL_RCC_OscConfig+0xb0>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005df4:	d10c      	bne.n	8005e10 <HAL_RCC_OscConfig+0x98>
 8005df6:	4b70      	ldr	r3, [pc, #448]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a6f      	ldr	r2, [pc, #444]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	4b6d      	ldr	r3, [pc, #436]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a6c      	ldr	r2, [pc, #432]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	e00b      	b.n	8005e28 <HAL_RCC_OscConfig+0xb0>
 8005e10:	4b69      	ldr	r3, [pc, #420]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a68      	ldr	r2, [pc, #416]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	4b66      	ldr	r3, [pc, #408]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a65      	ldr	r2, [pc, #404]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d013      	beq.n	8005e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e30:	f7fe fa80 	bl	8004334 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e38:	f7fe fa7c 	bl	8004334 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b64      	cmp	r3, #100	@ 0x64
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e207      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCC_OscConfig+0xc0>
 8005e56:	e014      	b.n	8005e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e58:	f7fe fa6c 	bl	8004334 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e60:	f7fe fa68 	bl	8004334 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b64      	cmp	r3, #100	@ 0x64
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e1f3      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e72:	4b51      	ldr	r3, [pc, #324]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCC_OscConfig+0xe8>
 8005e7e:	e000      	b.n	8005e82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d063      	beq.n	8005f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e9a:	4b47      	ldr	r3, [pc, #284]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ea2:	2b08      	cmp	r3, #8
 8005ea4:	d11c      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ea6:	4b44      	ldr	r3, [pc, #272]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d116      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eb2:	4b41      	ldr	r3, [pc, #260]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <HAL_RCC_OscConfig+0x152>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d001      	beq.n	8005eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e1c7      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eca:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	4937      	ldr	r1, [pc, #220]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ede:	e03a      	b.n	8005f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d020      	beq.n	8005f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ee8:	4b34      	ldr	r3, [pc, #208]	@ (8005fbc <HAL_RCC_OscConfig+0x244>)
 8005eea:	2201      	movs	r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eee:	f7fe fa21 	bl	8004334 <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ef6:	f7fe fa1d 	bl	8004334 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e1a8      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f08:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0f0      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f14:	4b28      	ldr	r3, [pc, #160]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	4925      	ldr	r1, [pc, #148]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	600b      	str	r3, [r1, #0]
 8005f28:	e015      	b.n	8005f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f2a:	4b24      	ldr	r3, [pc, #144]	@ (8005fbc <HAL_RCC_OscConfig+0x244>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f30:	f7fe fa00 	bl	8004334 <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f38:	f7fe f9fc 	bl	8004334 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e187      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f0      	bne.n	8005f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d036      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d016      	beq.n	8005f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f6a:	4b15      	ldr	r3, [pc, #84]	@ (8005fc0 <HAL_RCC_OscConfig+0x248>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f70:	f7fe f9e0 	bl	8004334 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f78:	f7fe f9dc 	bl	8004334 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e167      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0f0      	beq.n	8005f78 <HAL_RCC_OscConfig+0x200>
 8005f96:	e01b      	b.n	8005fd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f98:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <HAL_RCC_OscConfig+0x248>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f9e:	f7fe f9c9 	bl	8004334 <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fa4:	e00e      	b.n	8005fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fa6:	f7fe f9c5 	bl	8004334 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d907      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e150      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	42470000 	.word	0x42470000
 8005fc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fc4:	4b88      	ldr	r3, [pc, #544]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 8005fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1ea      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 8097 	beq.w	800610c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fe2:	4b81      	ldr	r3, [pc, #516]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10f      	bne.n	800600e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff6:	4a7c      	ldr	r2, [pc, #496]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 8005ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ffe:	4b7a      	ldr	r3, [pc, #488]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006006:	60bb      	str	r3, [r7, #8]
 8006008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800600a:	2301      	movs	r3, #1
 800600c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800600e:	4b77      	ldr	r3, [pc, #476]	@ (80061ec <HAL_RCC_OscConfig+0x474>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006016:	2b00      	cmp	r3, #0
 8006018:	d118      	bne.n	800604c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800601a:	4b74      	ldr	r3, [pc, #464]	@ (80061ec <HAL_RCC_OscConfig+0x474>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a73      	ldr	r2, [pc, #460]	@ (80061ec <HAL_RCC_OscConfig+0x474>)
 8006020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006026:	f7fe f985 	bl	8004334 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800602e:	f7fe f981 	bl	8004334 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e10c      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006040:	4b6a      	ldr	r3, [pc, #424]	@ (80061ec <HAL_RCC_OscConfig+0x474>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0f0      	beq.n	800602e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d106      	bne.n	8006062 <HAL_RCC_OscConfig+0x2ea>
 8006054:	4b64      	ldr	r3, [pc, #400]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006058:	4a63      	ldr	r2, [pc, #396]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 800605a:	f043 0301 	orr.w	r3, r3, #1
 800605e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006060:	e01c      	b.n	800609c <HAL_RCC_OscConfig+0x324>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b05      	cmp	r3, #5
 8006068:	d10c      	bne.n	8006084 <HAL_RCC_OscConfig+0x30c>
 800606a:	4b5f      	ldr	r3, [pc, #380]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 800606c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606e:	4a5e      	ldr	r2, [pc, #376]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006070:	f043 0304 	orr.w	r3, r3, #4
 8006074:	6713      	str	r3, [r2, #112]	@ 0x70
 8006076:	4b5c      	ldr	r3, [pc, #368]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607a:	4a5b      	ldr	r2, [pc, #364]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 800607c:	f043 0301 	orr.w	r3, r3, #1
 8006080:	6713      	str	r3, [r2, #112]	@ 0x70
 8006082:	e00b      	b.n	800609c <HAL_RCC_OscConfig+0x324>
 8006084:	4b58      	ldr	r3, [pc, #352]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006088:	4a57      	ldr	r2, [pc, #348]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 800608a:	f023 0301 	bic.w	r3, r3, #1
 800608e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006090:	4b55      	ldr	r3, [pc, #340]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006094:	4a54      	ldr	r2, [pc, #336]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006096:	f023 0304 	bic.w	r3, r3, #4
 800609a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d015      	beq.n	80060d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a4:	f7fe f946 	bl	8004334 <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060aa:	e00a      	b.n	80060c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ac:	f7fe f942 	bl	8004334 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e0cb      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c2:	4b49      	ldr	r3, [pc, #292]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0ee      	beq.n	80060ac <HAL_RCC_OscConfig+0x334>
 80060ce:	e014      	b.n	80060fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060d0:	f7fe f930 	bl	8004334 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060d6:	e00a      	b.n	80060ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060d8:	f7fe f92c 	bl	8004334 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e0b5      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ee:	4b3e      	ldr	r3, [pc, #248]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1ee      	bne.n	80060d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060fa:	7dfb      	ldrb	r3, [r7, #23]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d105      	bne.n	800610c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006100:	4b39      	ldr	r3, [pc, #228]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006104:	4a38      	ldr	r2, [pc, #224]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006106:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800610a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80a1 	beq.w	8006258 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006116:	4b34      	ldr	r3, [pc, #208]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 030c 	and.w	r3, r3, #12
 800611e:	2b08      	cmp	r3, #8
 8006120:	d05c      	beq.n	80061dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d141      	bne.n	80061ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800612a:	4b31      	ldr	r3, [pc, #196]	@ (80061f0 <HAL_RCC_OscConfig+0x478>)
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006130:	f7fe f900 	bl	8004334 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006138:	f7fe f8fc 	bl	8004334 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e087      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614a:	4b27      	ldr	r3, [pc, #156]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f0      	bne.n	8006138 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69da      	ldr	r2, [r3, #28]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006164:	019b      	lsls	r3, r3, #6
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	3b01      	subs	r3, #1
 8006170:	041b      	lsls	r3, r3, #16
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006178:	061b      	lsls	r3, r3, #24
 800617a:	491b      	ldr	r1, [pc, #108]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 800617c:	4313      	orrs	r3, r2
 800617e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006180:	4b1b      	ldr	r3, [pc, #108]	@ (80061f0 <HAL_RCC_OscConfig+0x478>)
 8006182:	2201      	movs	r2, #1
 8006184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006186:	f7fe f8d5 	bl	8004334 <HAL_GetTick>
 800618a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800618e:	f7fe f8d1 	bl	8004334 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e05c      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061a0:	4b11      	ldr	r3, [pc, #68]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0f0      	beq.n	800618e <HAL_RCC_OscConfig+0x416>
 80061ac:	e054      	b.n	8006258 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ae:	4b10      	ldr	r3, [pc, #64]	@ (80061f0 <HAL_RCC_OscConfig+0x478>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b4:	f7fe f8be 	bl	8004334 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061bc:	f7fe f8ba 	bl	8004334 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e045      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ce:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <HAL_RCC_OscConfig+0x470>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1f0      	bne.n	80061bc <HAL_RCC_OscConfig+0x444>
 80061da:	e03d      	b.n	8006258 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d107      	bne.n	80061f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e038      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
 80061e8:	40023800 	.word	0x40023800
 80061ec:	40007000 	.word	0x40007000
 80061f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006264 <HAL_RCC_OscConfig+0x4ec>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d028      	beq.n	8006254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800620c:	429a      	cmp	r2, r3
 800620e:	d121      	bne.n	8006254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800621a:	429a      	cmp	r2, r3
 800621c:	d11a      	bne.n	8006254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006224:	4013      	ands	r3, r2
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800622a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800622c:	4293      	cmp	r3, r2
 800622e:	d111      	bne.n	8006254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623a:	085b      	lsrs	r3, r3, #1
 800623c:	3b01      	subs	r3, #1
 800623e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006240:	429a      	cmp	r2, r3
 8006242:	d107      	bne.n	8006254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006250:	429a      	cmp	r2, r3
 8006252:	d001      	beq.n	8006258 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40023800 	.word	0x40023800

08006268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e0cc      	b.n	8006416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800627c:	4b68      	ldr	r3, [pc, #416]	@ (8006420 <HAL_RCC_ClockConfig+0x1b8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d90c      	bls.n	80062a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800628a:	4b65      	ldr	r3, [pc, #404]	@ (8006420 <HAL_RCC_ClockConfig+0x1b8>)
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006292:	4b63      	ldr	r3, [pc, #396]	@ (8006420 <HAL_RCC_ClockConfig+0x1b8>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d001      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e0b8      	b.n	8006416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d020      	beq.n	80062f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062bc:	4b59      	ldr	r3, [pc, #356]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	4a58      	ldr	r2, [pc, #352]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80062c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0308 	and.w	r3, r3, #8
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062d4:	4b53      	ldr	r3, [pc, #332]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	4a52      	ldr	r2, [pc, #328]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062e0:	4b50      	ldr	r3, [pc, #320]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	494d      	ldr	r1, [pc, #308]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d044      	beq.n	8006388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d107      	bne.n	8006316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006306:	4b47      	ldr	r3, [pc, #284]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d119      	bne.n	8006346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e07f      	b.n	8006416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d003      	beq.n	8006326 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006322:	2b03      	cmp	r3, #3
 8006324:	d107      	bne.n	8006336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006326:	4b3f      	ldr	r3, [pc, #252]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d109      	bne.n	8006346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e06f      	b.n	8006416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006336:	4b3b      	ldr	r3, [pc, #236]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e067      	b.n	8006416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006346:	4b37      	ldr	r3, [pc, #220]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f023 0203 	bic.w	r2, r3, #3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	4934      	ldr	r1, [pc, #208]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 8006354:	4313      	orrs	r3, r2
 8006356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006358:	f7fd ffec 	bl	8004334 <HAL_GetTick>
 800635c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800635e:	e00a      	b.n	8006376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006360:	f7fd ffe8 	bl	8004334 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800636e:	4293      	cmp	r3, r2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e04f      	b.n	8006416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006376:	4b2b      	ldr	r3, [pc, #172]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 020c 	and.w	r2, r3, #12
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	429a      	cmp	r2, r3
 8006386:	d1eb      	bne.n	8006360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006388:	4b25      	ldr	r3, [pc, #148]	@ (8006420 <HAL_RCC_ClockConfig+0x1b8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d20c      	bcs.n	80063b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006396:	4b22      	ldr	r3, [pc, #136]	@ (8006420 <HAL_RCC_ClockConfig+0x1b8>)
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800639e:	4b20      	ldr	r3, [pc, #128]	@ (8006420 <HAL_RCC_ClockConfig+0x1b8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d001      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e032      	b.n	8006416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063bc:	4b19      	ldr	r3, [pc, #100]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	4916      	ldr	r1, [pc, #88]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d009      	beq.n	80063ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063da:	4b12      	ldr	r3, [pc, #72]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	490e      	ldr	r1, [pc, #56]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063ee:	f000 f821 	bl	8006434 <HAL_RCC_GetSysClockFreq>
 80063f2:	4602      	mov	r2, r0
 80063f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	091b      	lsrs	r3, r3, #4
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	490a      	ldr	r1, [pc, #40]	@ (8006428 <HAL_RCC_ClockConfig+0x1c0>)
 8006400:	5ccb      	ldrb	r3, [r1, r3]
 8006402:	fa22 f303 	lsr.w	r3, r2, r3
 8006406:	4a09      	ldr	r2, [pc, #36]	@ (800642c <HAL_RCC_ClockConfig+0x1c4>)
 8006408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800640a:	4b09      	ldr	r3, [pc, #36]	@ (8006430 <HAL_RCC_ClockConfig+0x1c8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f7fd ff4c 	bl	80042ac <HAL_InitTick>

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	40023c00 	.word	0x40023c00
 8006424:	40023800 	.word	0x40023800
 8006428:	08010fbc 	.word	0x08010fbc
 800642c:	2000000c 	.word	0x2000000c
 8006430:	20000010 	.word	0x20000010

08006434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006438:	b094      	sub	sp, #80	@ 0x50
 800643a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006440:	2300      	movs	r3, #0
 8006442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006444:	2300      	movs	r3, #0
 8006446:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800644c:	4b79      	ldr	r3, [pc, #484]	@ (8006634 <HAL_RCC_GetSysClockFreq+0x200>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 030c 	and.w	r3, r3, #12
 8006454:	2b08      	cmp	r3, #8
 8006456:	d00d      	beq.n	8006474 <HAL_RCC_GetSysClockFreq+0x40>
 8006458:	2b08      	cmp	r3, #8
 800645a:	f200 80e1 	bhi.w	8006620 <HAL_RCC_GetSysClockFreq+0x1ec>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_RCC_GetSysClockFreq+0x34>
 8006462:	2b04      	cmp	r3, #4
 8006464:	d003      	beq.n	800646e <HAL_RCC_GetSysClockFreq+0x3a>
 8006466:	e0db      	b.n	8006620 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006468:	4b73      	ldr	r3, [pc, #460]	@ (8006638 <HAL_RCC_GetSysClockFreq+0x204>)
 800646a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800646c:	e0db      	b.n	8006626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800646e:	4b73      	ldr	r3, [pc, #460]	@ (800663c <HAL_RCC_GetSysClockFreq+0x208>)
 8006470:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006472:	e0d8      	b.n	8006626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006474:	4b6f      	ldr	r3, [pc, #444]	@ (8006634 <HAL_RCC_GetSysClockFreq+0x200>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800647c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800647e:	4b6d      	ldr	r3, [pc, #436]	@ (8006634 <HAL_RCC_GetSysClockFreq+0x200>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d063      	beq.n	8006552 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800648a:	4b6a      	ldr	r3, [pc, #424]	@ (8006634 <HAL_RCC_GetSysClockFreq+0x200>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	099b      	lsrs	r3, r3, #6
 8006490:	2200      	movs	r2, #0
 8006492:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006494:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649c:	633b      	str	r3, [r7, #48]	@ 0x30
 800649e:	2300      	movs	r3, #0
 80064a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80064a6:	4622      	mov	r2, r4
 80064a8:	462b      	mov	r3, r5
 80064aa:	f04f 0000 	mov.w	r0, #0
 80064ae:	f04f 0100 	mov.w	r1, #0
 80064b2:	0159      	lsls	r1, r3, #5
 80064b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064b8:	0150      	lsls	r0, r2, #5
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4621      	mov	r1, r4
 80064c0:	1a51      	subs	r1, r2, r1
 80064c2:	6139      	str	r1, [r7, #16]
 80064c4:	4629      	mov	r1, r5
 80064c6:	eb63 0301 	sbc.w	r3, r3, r1
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064d8:	4659      	mov	r1, fp
 80064da:	018b      	lsls	r3, r1, #6
 80064dc:	4651      	mov	r1, sl
 80064de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064e2:	4651      	mov	r1, sl
 80064e4:	018a      	lsls	r2, r1, #6
 80064e6:	4651      	mov	r1, sl
 80064e8:	ebb2 0801 	subs.w	r8, r2, r1
 80064ec:	4659      	mov	r1, fp
 80064ee:	eb63 0901 	sbc.w	r9, r3, r1
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006506:	4690      	mov	r8, r2
 8006508:	4699      	mov	r9, r3
 800650a:	4623      	mov	r3, r4
 800650c:	eb18 0303 	adds.w	r3, r8, r3
 8006510:	60bb      	str	r3, [r7, #8]
 8006512:	462b      	mov	r3, r5
 8006514:	eb49 0303 	adc.w	r3, r9, r3
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006526:	4629      	mov	r1, r5
 8006528:	024b      	lsls	r3, r1, #9
 800652a:	4621      	mov	r1, r4
 800652c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006530:	4621      	mov	r1, r4
 8006532:	024a      	lsls	r2, r1, #9
 8006534:	4610      	mov	r0, r2
 8006536:	4619      	mov	r1, r3
 8006538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800653a:	2200      	movs	r2, #0
 800653c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800653e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006540:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006544:	f7fa fbd8 	bl	8000cf8 <__aeabi_uldivmod>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4613      	mov	r3, r2
 800654e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006550:	e058      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006552:	4b38      	ldr	r3, [pc, #224]	@ (8006634 <HAL_RCC_GetSysClockFreq+0x200>)
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	099b      	lsrs	r3, r3, #6
 8006558:	2200      	movs	r2, #0
 800655a:	4618      	mov	r0, r3
 800655c:	4611      	mov	r1, r2
 800655e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006562:	623b      	str	r3, [r7, #32]
 8006564:	2300      	movs	r3, #0
 8006566:	627b      	str	r3, [r7, #36]	@ 0x24
 8006568:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800656c:	4642      	mov	r2, r8
 800656e:	464b      	mov	r3, r9
 8006570:	f04f 0000 	mov.w	r0, #0
 8006574:	f04f 0100 	mov.w	r1, #0
 8006578:	0159      	lsls	r1, r3, #5
 800657a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800657e:	0150      	lsls	r0, r2, #5
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4641      	mov	r1, r8
 8006586:	ebb2 0a01 	subs.w	sl, r2, r1
 800658a:	4649      	mov	r1, r9
 800658c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800659c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065a4:	ebb2 040a 	subs.w	r4, r2, sl
 80065a8:	eb63 050b 	sbc.w	r5, r3, fp
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	00eb      	lsls	r3, r5, #3
 80065b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ba:	00e2      	lsls	r2, r4, #3
 80065bc:	4614      	mov	r4, r2
 80065be:	461d      	mov	r5, r3
 80065c0:	4643      	mov	r3, r8
 80065c2:	18e3      	adds	r3, r4, r3
 80065c4:	603b      	str	r3, [r7, #0]
 80065c6:	464b      	mov	r3, r9
 80065c8:	eb45 0303 	adc.w	r3, r5, r3
 80065cc:	607b      	str	r3, [r7, #4]
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065da:	4629      	mov	r1, r5
 80065dc:	028b      	lsls	r3, r1, #10
 80065de:	4621      	mov	r1, r4
 80065e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065e4:	4621      	mov	r1, r4
 80065e6:	028a      	lsls	r2, r1, #10
 80065e8:	4610      	mov	r0, r2
 80065ea:	4619      	mov	r1, r3
 80065ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ee:	2200      	movs	r2, #0
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	61fa      	str	r2, [r7, #28]
 80065f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065f8:	f7fa fb7e 	bl	8000cf8 <__aeabi_uldivmod>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4613      	mov	r3, r2
 8006602:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006604:	4b0b      	ldr	r3, [pc, #44]	@ (8006634 <HAL_RCC_GetSysClockFreq+0x200>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	0c1b      	lsrs	r3, r3, #16
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	3301      	adds	r3, #1
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006614:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006618:	fbb2 f3f3 	udiv	r3, r2, r3
 800661c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800661e:	e002      	b.n	8006626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006620:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <HAL_RCC_GetSysClockFreq+0x204>)
 8006622:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006628:	4618      	mov	r0, r3
 800662a:	3750      	adds	r7, #80	@ 0x50
 800662c:	46bd      	mov	sp, r7
 800662e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006632:	bf00      	nop
 8006634:	40023800 	.word	0x40023800
 8006638:	00f42400 	.word	0x00f42400
 800663c:	007a1200 	.word	0x007a1200

08006640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006644:	4b03      	ldr	r3, [pc, #12]	@ (8006654 <HAL_RCC_GetHCLKFreq+0x14>)
 8006646:	681b      	ldr	r3, [r3, #0]
}
 8006648:	4618      	mov	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	2000000c 	.word	0x2000000c

08006658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800665c:	f7ff fff0 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 8006660:	4602      	mov	r2, r0
 8006662:	4b05      	ldr	r3, [pc, #20]	@ (8006678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	0a9b      	lsrs	r3, r3, #10
 8006668:	f003 0307 	and.w	r3, r3, #7
 800666c:	4903      	ldr	r1, [pc, #12]	@ (800667c <HAL_RCC_GetPCLK1Freq+0x24>)
 800666e:	5ccb      	ldrb	r3, [r1, r3]
 8006670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006674:	4618      	mov	r0, r3
 8006676:	bd80      	pop	{r7, pc}
 8006678:	40023800 	.word	0x40023800
 800667c:	08010fcc 	.word	0x08010fcc

08006680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006684:	f7ff ffdc 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 8006688:	4602      	mov	r2, r0
 800668a:	4b05      	ldr	r3, [pc, #20]	@ (80066a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	0b5b      	lsrs	r3, r3, #13
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	4903      	ldr	r1, [pc, #12]	@ (80066a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006696:	5ccb      	ldrb	r3, [r1, r3]
 8006698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800669c:	4618      	mov	r0, r3
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40023800 	.word	0x40023800
 80066a4:	08010fcc 	.word	0x08010fcc

080066a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e041      	b.n	800673e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fd fc1e 	bl	8003f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3304      	adds	r3, #4
 80066e4:	4619      	mov	r1, r3
 80066e6:	4610      	mov	r0, r2
 80066e8:	f000 fa10 	bl	8006b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e041      	b.n	80067dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d106      	bne.n	8006772 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f839 	bl	80067e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3304      	adds	r3, #4
 8006782:	4619      	mov	r1, r3
 8006784:	4610      	mov	r0, r2
 8006786:	f000 f9c1 	bl	8006b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800680e:	2b01      	cmp	r3, #1
 8006810:	d101      	bne.n	8006816 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006812:	2302      	movs	r3, #2
 8006814:	e0ae      	b.n	8006974 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2b0c      	cmp	r3, #12
 8006822:	f200 809f 	bhi.w	8006964 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006826:	a201      	add	r2, pc, #4	@ (adr r2, 800682c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682c:	08006861 	.word	0x08006861
 8006830:	08006965 	.word	0x08006965
 8006834:	08006965 	.word	0x08006965
 8006838:	08006965 	.word	0x08006965
 800683c:	080068a1 	.word	0x080068a1
 8006840:	08006965 	.word	0x08006965
 8006844:	08006965 	.word	0x08006965
 8006848:	08006965 	.word	0x08006965
 800684c:	080068e3 	.word	0x080068e3
 8006850:	08006965 	.word	0x08006965
 8006854:	08006965 	.word	0x08006965
 8006858:	08006965 	.word	0x08006965
 800685c:	08006923 	.word	0x08006923
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68b9      	ldr	r1, [r7, #8]
 8006866:	4618      	mov	r0, r3
 8006868:	f000 f9d0 	bl	8006c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	699a      	ldr	r2, [r3, #24]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0208 	orr.w	r2, r2, #8
 800687a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0204 	bic.w	r2, r2, #4
 800688a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6999      	ldr	r1, [r3, #24]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	691a      	ldr	r2, [r3, #16]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	619a      	str	r2, [r3, #24]
      break;
 800689e:	e064      	b.n	800696a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68b9      	ldr	r1, [r7, #8]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fa16 	bl	8006cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699a      	ldr	r2, [r3, #24]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699a      	ldr	r2, [r3, #24]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6999      	ldr	r1, [r3, #24]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	021a      	lsls	r2, r3, #8
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	619a      	str	r2, [r3, #24]
      break;
 80068e0:	e043      	b.n	800696a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68b9      	ldr	r1, [r7, #8]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 fa61 	bl	8006db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69da      	ldr	r2, [r3, #28]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0208 	orr.w	r2, r2, #8
 80068fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69da      	ldr	r2, [r3, #28]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0204 	bic.w	r2, r2, #4
 800690c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69d9      	ldr	r1, [r3, #28]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	61da      	str	r2, [r3, #28]
      break;
 8006920:	e023      	b.n	800696a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68b9      	ldr	r1, [r7, #8]
 8006928:	4618      	mov	r0, r3
 800692a:	f000 faab 	bl	8006e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69da      	ldr	r2, [r3, #28]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800693c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69da      	ldr	r2, [r3, #28]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800694c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69d9      	ldr	r1, [r3, #28]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	021a      	lsls	r2, r3, #8
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	61da      	str	r2, [r3, #28]
      break;
 8006962:	e002      	b.n	800696a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	75fb      	strb	r3, [r7, #23]
      break;
 8006968:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006972:	7dfb      	ldrb	r3, [r7, #23]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006990:	2b01      	cmp	r3, #1
 8006992:	d101      	bne.n	8006998 <HAL_TIM_ConfigClockSource+0x1c>
 8006994:	2302      	movs	r3, #2
 8006996:	e0b4      	b.n	8006b02 <HAL_TIM_ConfigClockSource+0x186>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80069b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069d0:	d03e      	beq.n	8006a50 <HAL_TIM_ConfigClockSource+0xd4>
 80069d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069d6:	f200 8087 	bhi.w	8006ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80069da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069de:	f000 8086 	beq.w	8006aee <HAL_TIM_ConfigClockSource+0x172>
 80069e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069e6:	d87f      	bhi.n	8006ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80069e8:	2b70      	cmp	r3, #112	@ 0x70
 80069ea:	d01a      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0xa6>
 80069ec:	2b70      	cmp	r3, #112	@ 0x70
 80069ee:	d87b      	bhi.n	8006ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80069f0:	2b60      	cmp	r3, #96	@ 0x60
 80069f2:	d050      	beq.n	8006a96 <HAL_TIM_ConfigClockSource+0x11a>
 80069f4:	2b60      	cmp	r3, #96	@ 0x60
 80069f6:	d877      	bhi.n	8006ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80069f8:	2b50      	cmp	r3, #80	@ 0x50
 80069fa:	d03c      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0xfa>
 80069fc:	2b50      	cmp	r3, #80	@ 0x50
 80069fe:	d873      	bhi.n	8006ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8006a00:	2b40      	cmp	r3, #64	@ 0x40
 8006a02:	d058      	beq.n	8006ab6 <HAL_TIM_ConfigClockSource+0x13a>
 8006a04:	2b40      	cmp	r3, #64	@ 0x40
 8006a06:	d86f      	bhi.n	8006ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8006a08:	2b30      	cmp	r3, #48	@ 0x30
 8006a0a:	d064      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a0c:	2b30      	cmp	r3, #48	@ 0x30
 8006a0e:	d86b      	bhi.n	8006ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8006a10:	2b20      	cmp	r3, #32
 8006a12:	d060      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	d867      	bhi.n	8006ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d05c      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a1c:	2b10      	cmp	r3, #16
 8006a1e:	d05a      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8006a20:	e062      	b.n	8006ae8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	6899      	ldr	r1, [r3, #8]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f000 faf1 	bl	8007018 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	609a      	str	r2, [r3, #8]
      break;
 8006a4e:	e04f      	b.n	8006af0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6818      	ldr	r0, [r3, #0]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	6899      	ldr	r1, [r3, #8]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f000 fada 	bl	8007018 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a72:	609a      	str	r2, [r3, #8]
      break;
 8006a74:	e03c      	b.n	8006af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	6859      	ldr	r1, [r3, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	461a      	mov	r2, r3
 8006a84:	f000 fa4e 	bl	8006f24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2150      	movs	r1, #80	@ 0x50
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 faa7 	bl	8006fe2 <TIM_ITRx_SetConfig>
      break;
 8006a94:	e02c      	b.n	8006af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	6859      	ldr	r1, [r3, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f000 fa6d 	bl	8006f82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2160      	movs	r1, #96	@ 0x60
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 fa97 	bl	8006fe2 <TIM_ITRx_SetConfig>
      break;
 8006ab4:	e01c      	b.n	8006af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6859      	ldr	r1, [r3, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f000 fa2e 	bl	8006f24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2140      	movs	r1, #64	@ 0x40
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fa87 	bl	8006fe2 <TIM_ITRx_SetConfig>
      break;
 8006ad4:	e00c      	b.n	8006af0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	f000 fa7e 	bl	8006fe2 <TIM_ITRx_SetConfig>
      break;
 8006ae6:	e003      	b.n	8006af0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	73fb      	strb	r3, [r7, #15]
      break;
 8006aec:	e000      	b.n	8006af0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006aee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a34      	ldr	r2, [pc, #208]	@ (8006bf0 <TIM_Base_SetConfig+0xe4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00f      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b2a:	d00b      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a31      	ldr	r2, [pc, #196]	@ (8006bf4 <TIM_Base_SetConfig+0xe8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d007      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a30      	ldr	r2, [pc, #192]	@ (8006bf8 <TIM_Base_SetConfig+0xec>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d003      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a2f      	ldr	r2, [pc, #188]	@ (8006bfc <TIM_Base_SetConfig+0xf0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d108      	bne.n	8006b56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a25      	ldr	r2, [pc, #148]	@ (8006bf0 <TIM_Base_SetConfig+0xe4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01b      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b64:	d017      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a22      	ldr	r2, [pc, #136]	@ (8006bf4 <TIM_Base_SetConfig+0xe8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a21      	ldr	r2, [pc, #132]	@ (8006bf8 <TIM_Base_SetConfig+0xec>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00f      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a20      	ldr	r2, [pc, #128]	@ (8006bfc <TIM_Base_SetConfig+0xf0>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a1f      	ldr	r2, [pc, #124]	@ (8006c00 <TIM_Base_SetConfig+0xf4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a1e      	ldr	r2, [pc, #120]	@ (8006c04 <TIM_Base_SetConfig+0xf8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a1d      	ldr	r2, [pc, #116]	@ (8006c08 <TIM_Base_SetConfig+0xfc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d108      	bne.n	8006ba8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a08      	ldr	r2, [pc, #32]	@ (8006bf0 <TIM_Base_SetConfig+0xe4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d103      	bne.n	8006bdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	691a      	ldr	r2, [r3, #16]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	615a      	str	r2, [r3, #20]
}
 8006be2:	bf00      	nop
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	40010000 	.word	0x40010000
 8006bf4:	40000400 	.word	0x40000400
 8006bf8:	40000800 	.word	0x40000800
 8006bfc:	40000c00 	.word	0x40000c00
 8006c00:	40014000 	.word	0x40014000
 8006c04:	40014400 	.word	0x40014400
 8006c08:	40014800 	.word	0x40014800

08006c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f023 0201 	bic.w	r2, r3, #1
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0303 	bic.w	r3, r3, #3
 8006c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f023 0302 	bic.w	r3, r3, #2
 8006c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a1c      	ldr	r2, [pc, #112]	@ (8006cd4 <TIM_OC1_SetConfig+0xc8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d10c      	bne.n	8006c82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f023 0308 	bic.w	r3, r3, #8
 8006c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f023 0304 	bic.w	r3, r3, #4
 8006c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a13      	ldr	r2, [pc, #76]	@ (8006cd4 <TIM_OC1_SetConfig+0xc8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d111      	bne.n	8006cae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	621a      	str	r2, [r3, #32]
}
 8006cc8:	bf00      	nop
 8006cca:	371c      	adds	r7, #28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	40010000 	.word	0x40010000

08006cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	f023 0210 	bic.w	r2, r3, #16
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	021b      	lsls	r3, r3, #8
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f023 0320 	bic.w	r3, r3, #32
 8006d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a1e      	ldr	r2, [pc, #120]	@ (8006dac <TIM_OC2_SetConfig+0xd4>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d10d      	bne.n	8006d54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a15      	ldr	r2, [pc, #84]	@ (8006dac <TIM_OC2_SetConfig+0xd4>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d113      	bne.n	8006d84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	621a      	str	r2, [r3, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	40010000 	.word	0x40010000

08006db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0303 	bic.w	r3, r3, #3
 8006de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a1d      	ldr	r2, [pc, #116]	@ (8006e80 <TIM_OC3_SetConfig+0xd0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d10d      	bne.n	8006e2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a14      	ldr	r2, [pc, #80]	@ (8006e80 <TIM_OC3_SetConfig+0xd0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d113      	bne.n	8006e5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	011b      	lsls	r3, r3, #4
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	621a      	str	r2, [r3, #32]
}
 8006e74:	bf00      	nop
 8006e76:	371c      	adds	r7, #28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	40010000 	.word	0x40010000

08006e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	021b      	lsls	r3, r3, #8
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	031b      	lsls	r3, r3, #12
 8006ed6:	693a      	ldr	r2, [r7, #16]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a10      	ldr	r2, [pc, #64]	@ (8006f20 <TIM_OC4_SetConfig+0x9c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d109      	bne.n	8006ef8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	019b      	lsls	r3, r3, #6
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	621a      	str	r2, [r3, #32]
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	40010000 	.word	0x40010000

08006f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f023 0201 	bic.w	r2, r3, #1
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	011b      	lsls	r3, r3, #4
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f023 030a 	bic.w	r3, r3, #10
 8006f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	621a      	str	r2, [r3, #32]
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b087      	sub	sp, #28
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0210 	bic.w	r2, r3, #16
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	031b      	lsls	r3, r3, #12
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006fbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b085      	sub	sp, #20
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	f043 0307 	orr.w	r3, r3, #7
 8007004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	609a      	str	r2, [r3, #8]
}
 800700c:	bf00      	nop
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007032:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	021a      	lsls	r2, r3, #8
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	431a      	orrs	r2, r3
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	4313      	orrs	r3, r2
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	609a      	str	r2, [r3, #8]
}
 800704c:	bf00      	nop
 800704e:	371c      	adds	r7, #28
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007068:	2b01      	cmp	r3, #1
 800706a:	d101      	bne.n	8007070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800706c:	2302      	movs	r3, #2
 800706e:	e050      	b.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2202      	movs	r2, #2
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1c      	ldr	r2, [pc, #112]	@ (8007120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d018      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070bc:	d013      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a18      	ldr	r2, [pc, #96]	@ (8007124 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00e      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a16      	ldr	r2, [pc, #88]	@ (8007128 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d009      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a15      	ldr	r2, [pc, #84]	@ (800712c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d004      	beq.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a13      	ldr	r2, [pc, #76]	@ (8007130 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d10c      	bne.n	8007100 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	40010000 	.word	0x40010000
 8007124:	40000400 	.word	0x40000400
 8007128:	40000800 	.word	0x40000800
 800712c:	40000c00 	.word	0x40000c00
 8007130:	40014000 	.word	0x40014000

08007134 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800714c:	2302      	movs	r3, #2
 800714e:	e03d      	b.n	80071cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	4313      	orrs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e03f      	b.n	800726a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d106      	bne.n	8007204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7fc ffc0 	bl	8004184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2224      	movs	r2, #36	@ 0x24
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800721a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f929 	bl	8007474 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	691a      	ldr	r2, [r3, #16]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695a      	ldr	r2, [r3, #20]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b08a      	sub	sp, #40	@ 0x28
 8007276:	af02      	add	r7, sp, #8
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	603b      	str	r3, [r7, #0]
 800727e:	4613      	mov	r3, r2
 8007280:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b20      	cmp	r3, #32
 8007290:	d17c      	bne.n	800738c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <HAL_UART_Transmit+0x2c>
 8007298:	88fb      	ldrh	r3, [r7, #6]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e075      	b.n	800738e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <HAL_UART_Transmit+0x3e>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e06e      	b.n	800738e <HAL_UART_Transmit+0x11c>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2221      	movs	r2, #33	@ 0x21
 80072c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072c6:	f7fd f835 	bl	8004334 <HAL_GetTick>
 80072ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	88fa      	ldrh	r2, [r7, #6]
 80072d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	88fa      	ldrh	r2, [r7, #6]
 80072d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072e0:	d108      	bne.n	80072f4 <HAL_UART_Transmit+0x82>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d104      	bne.n	80072f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	61bb      	str	r3, [r7, #24]
 80072f2:	e003      	b.n	80072fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072f8:	2300      	movs	r3, #0
 80072fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8007304:	e02a      	b.n	800735c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2200      	movs	r2, #0
 800730e:	2180      	movs	r1, #128	@ 0x80
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f840 	bl	8007396 <UART_WaitOnFlagUntilTimeout>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e036      	b.n	800738e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10b      	bne.n	800733e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007334:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	3302      	adds	r3, #2
 800733a:	61bb      	str	r3, [r7, #24]
 800733c:	e007      	b.n	800734e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	781a      	ldrb	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	3301      	adds	r3, #1
 800734c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007352:	b29b      	uxth	r3, r3
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007360:	b29b      	uxth	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1cf      	bne.n	8007306 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2200      	movs	r2, #0
 800736e:	2140      	movs	r1, #64	@ 0x40
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f810 	bl	8007396 <UART_WaitOnFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e006      	b.n	800738e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	e000      	b.n	800738e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800738c:	2302      	movs	r3, #2
  }
}
 800738e:	4618      	mov	r0, r3
 8007390:	3720      	adds	r7, #32
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b090      	sub	sp, #64	@ 0x40
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	60b9      	str	r1, [r7, #8]
 80073a0:	603b      	str	r3, [r7, #0]
 80073a2:	4613      	mov	r3, r2
 80073a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a6:	e050      	b.n	800744a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ae:	d04c      	beq.n	800744a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d007      	beq.n	80073c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80073b6:	f7fc ffbd 	bl	8004334 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d241      	bcs.n	800744a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	330c      	adds	r3, #12
 80073cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80073dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	330c      	adds	r3, #12
 80073e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80073e6:	637a      	str	r2, [r7, #52]	@ 0x34
 80073e8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e5      	bne.n	80073c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3314      	adds	r3, #20
 8007400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	613b      	str	r3, [r7, #16]
   return(result);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f023 0301 	bic.w	r3, r3, #1
 8007410:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3314      	adds	r3, #20
 8007418:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800741a:	623a      	str	r2, [r7, #32]
 800741c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	69f9      	ldr	r1, [r7, #28]
 8007420:	6a3a      	ldr	r2, [r7, #32]
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	61bb      	str	r3, [r7, #24]
   return(result);
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e5      	bne.n	80073fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2220      	movs	r2, #32
 8007432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2220      	movs	r2, #32
 800743a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e00f      	b.n	800746a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	4013      	ands	r3, r2
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	429a      	cmp	r2, r3
 8007458:	bf0c      	ite	eq
 800745a:	2301      	moveq	r3, #1
 800745c:	2300      	movne	r3, #0
 800745e:	b2db      	uxtb	r3, r3
 8007460:	461a      	mov	r2, r3
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	429a      	cmp	r2, r3
 8007466:	d09f      	beq.n	80073a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3740      	adds	r7, #64	@ 0x40
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007478:	b0c0      	sub	sp, #256	@ 0x100
 800747a:	af00      	add	r7, sp, #0
 800747c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800748c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007490:	68d9      	ldr	r1, [r3, #12]
 8007492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	ea40 0301 	orr.w	r3, r0, r1
 800749c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800749e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	431a      	orrs	r2, r3
 80074ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	431a      	orrs	r2, r3
 80074b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80074cc:	f021 010c 	bic.w	r1, r1, #12
 80074d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80074da:	430b      	orrs	r3, r1
 80074dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80074ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ee:	6999      	ldr	r1, [r3, #24]
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	ea40 0301 	orr.w	r3, r0, r1
 80074fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	4b8f      	ldr	r3, [pc, #572]	@ (8007740 <UART_SetConfig+0x2cc>)
 8007504:	429a      	cmp	r2, r3
 8007506:	d005      	beq.n	8007514 <UART_SetConfig+0xa0>
 8007508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	4b8d      	ldr	r3, [pc, #564]	@ (8007744 <UART_SetConfig+0x2d0>)
 8007510:	429a      	cmp	r2, r3
 8007512:	d104      	bne.n	800751e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007514:	f7ff f8b4 	bl	8006680 <HAL_RCC_GetPCLK2Freq>
 8007518:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800751c:	e003      	b.n	8007526 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800751e:	f7ff f89b 	bl	8006658 <HAL_RCC_GetPCLK1Freq>
 8007522:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007530:	f040 810c 	bne.w	800774c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007538:	2200      	movs	r2, #0
 800753a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800753e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007542:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007546:	4622      	mov	r2, r4
 8007548:	462b      	mov	r3, r5
 800754a:	1891      	adds	r1, r2, r2
 800754c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800754e:	415b      	adcs	r3, r3
 8007550:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007556:	4621      	mov	r1, r4
 8007558:	eb12 0801 	adds.w	r8, r2, r1
 800755c:	4629      	mov	r1, r5
 800755e:	eb43 0901 	adc.w	r9, r3, r1
 8007562:	f04f 0200 	mov.w	r2, #0
 8007566:	f04f 0300 	mov.w	r3, #0
 800756a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800756e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007576:	4690      	mov	r8, r2
 8007578:	4699      	mov	r9, r3
 800757a:	4623      	mov	r3, r4
 800757c:	eb18 0303 	adds.w	r3, r8, r3
 8007580:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007584:	462b      	mov	r3, r5
 8007586:	eb49 0303 	adc.w	r3, r9, r3
 800758a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800758e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800759a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800759e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80075a2:	460b      	mov	r3, r1
 80075a4:	18db      	adds	r3, r3, r3
 80075a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80075a8:	4613      	mov	r3, r2
 80075aa:	eb42 0303 	adc.w	r3, r2, r3
 80075ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80075b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80075b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80075b8:	f7f9 fb9e 	bl	8000cf8 <__aeabi_uldivmod>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4b61      	ldr	r3, [pc, #388]	@ (8007748 <UART_SetConfig+0x2d4>)
 80075c2:	fba3 2302 	umull	r2, r3, r3, r2
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	011c      	lsls	r4, r3, #4
 80075ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80075d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80075dc:	4642      	mov	r2, r8
 80075de:	464b      	mov	r3, r9
 80075e0:	1891      	adds	r1, r2, r2
 80075e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80075e4:	415b      	adcs	r3, r3
 80075e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80075ec:	4641      	mov	r1, r8
 80075ee:	eb12 0a01 	adds.w	sl, r2, r1
 80075f2:	4649      	mov	r1, r9
 80075f4:	eb43 0b01 	adc.w	fp, r3, r1
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007604:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800760c:	4692      	mov	sl, r2
 800760e:	469b      	mov	fp, r3
 8007610:	4643      	mov	r3, r8
 8007612:	eb1a 0303 	adds.w	r3, sl, r3
 8007616:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800761a:	464b      	mov	r3, r9
 800761c:	eb4b 0303 	adc.w	r3, fp, r3
 8007620:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007630:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007634:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007638:	460b      	mov	r3, r1
 800763a:	18db      	adds	r3, r3, r3
 800763c:	643b      	str	r3, [r7, #64]	@ 0x40
 800763e:	4613      	mov	r3, r2
 8007640:	eb42 0303 	adc.w	r3, r2, r3
 8007644:	647b      	str	r3, [r7, #68]	@ 0x44
 8007646:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800764a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800764e:	f7f9 fb53 	bl	8000cf8 <__aeabi_uldivmod>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	4611      	mov	r1, r2
 8007658:	4b3b      	ldr	r3, [pc, #236]	@ (8007748 <UART_SetConfig+0x2d4>)
 800765a:	fba3 2301 	umull	r2, r3, r3, r1
 800765e:	095b      	lsrs	r3, r3, #5
 8007660:	2264      	movs	r2, #100	@ 0x64
 8007662:	fb02 f303 	mul.w	r3, r2, r3
 8007666:	1acb      	subs	r3, r1, r3
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800766e:	4b36      	ldr	r3, [pc, #216]	@ (8007748 <UART_SetConfig+0x2d4>)
 8007670:	fba3 2302 	umull	r2, r3, r3, r2
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800767c:	441c      	add	r4, r3
 800767e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007682:	2200      	movs	r2, #0
 8007684:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007688:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800768c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007690:	4642      	mov	r2, r8
 8007692:	464b      	mov	r3, r9
 8007694:	1891      	adds	r1, r2, r2
 8007696:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007698:	415b      	adcs	r3, r3
 800769a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800769c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80076a0:	4641      	mov	r1, r8
 80076a2:	1851      	adds	r1, r2, r1
 80076a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80076a6:	4649      	mov	r1, r9
 80076a8:	414b      	adcs	r3, r1
 80076aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80076b8:	4659      	mov	r1, fp
 80076ba:	00cb      	lsls	r3, r1, #3
 80076bc:	4651      	mov	r1, sl
 80076be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076c2:	4651      	mov	r1, sl
 80076c4:	00ca      	lsls	r2, r1, #3
 80076c6:	4610      	mov	r0, r2
 80076c8:	4619      	mov	r1, r3
 80076ca:	4603      	mov	r3, r0
 80076cc:	4642      	mov	r2, r8
 80076ce:	189b      	adds	r3, r3, r2
 80076d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076d4:	464b      	mov	r3, r9
 80076d6:	460a      	mov	r2, r1
 80076d8:	eb42 0303 	adc.w	r3, r2, r3
 80076dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80076ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80076f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80076f4:	460b      	mov	r3, r1
 80076f6:	18db      	adds	r3, r3, r3
 80076f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076fa:	4613      	mov	r3, r2
 80076fc:	eb42 0303 	adc.w	r3, r2, r3
 8007700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007702:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007706:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800770a:	f7f9 faf5 	bl	8000cf8 <__aeabi_uldivmod>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	4b0d      	ldr	r3, [pc, #52]	@ (8007748 <UART_SetConfig+0x2d4>)
 8007714:	fba3 1302 	umull	r1, r3, r3, r2
 8007718:	095b      	lsrs	r3, r3, #5
 800771a:	2164      	movs	r1, #100	@ 0x64
 800771c:	fb01 f303 	mul.w	r3, r1, r3
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	00db      	lsls	r3, r3, #3
 8007724:	3332      	adds	r3, #50	@ 0x32
 8007726:	4a08      	ldr	r2, [pc, #32]	@ (8007748 <UART_SetConfig+0x2d4>)
 8007728:	fba2 2303 	umull	r2, r3, r2, r3
 800772c:	095b      	lsrs	r3, r3, #5
 800772e:	f003 0207 	and.w	r2, r3, #7
 8007732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4422      	add	r2, r4
 800773a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800773c:	e106      	b.n	800794c <UART_SetConfig+0x4d8>
 800773e:	bf00      	nop
 8007740:	40011000 	.word	0x40011000
 8007744:	40011400 	.word	0x40011400
 8007748:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800774c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007750:	2200      	movs	r2, #0
 8007752:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007756:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800775a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800775e:	4642      	mov	r2, r8
 8007760:	464b      	mov	r3, r9
 8007762:	1891      	adds	r1, r2, r2
 8007764:	6239      	str	r1, [r7, #32]
 8007766:	415b      	adcs	r3, r3
 8007768:	627b      	str	r3, [r7, #36]	@ 0x24
 800776a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800776e:	4641      	mov	r1, r8
 8007770:	1854      	adds	r4, r2, r1
 8007772:	4649      	mov	r1, r9
 8007774:	eb43 0501 	adc.w	r5, r3, r1
 8007778:	f04f 0200 	mov.w	r2, #0
 800777c:	f04f 0300 	mov.w	r3, #0
 8007780:	00eb      	lsls	r3, r5, #3
 8007782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007786:	00e2      	lsls	r2, r4, #3
 8007788:	4614      	mov	r4, r2
 800778a:	461d      	mov	r5, r3
 800778c:	4643      	mov	r3, r8
 800778e:	18e3      	adds	r3, r4, r3
 8007790:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007794:	464b      	mov	r3, r9
 8007796:	eb45 0303 	adc.w	r3, r5, r3
 800779a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800779e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80077ae:	f04f 0200 	mov.w	r2, #0
 80077b2:	f04f 0300 	mov.w	r3, #0
 80077b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80077ba:	4629      	mov	r1, r5
 80077bc:	008b      	lsls	r3, r1, #2
 80077be:	4621      	mov	r1, r4
 80077c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077c4:	4621      	mov	r1, r4
 80077c6:	008a      	lsls	r2, r1, #2
 80077c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80077cc:	f7f9 fa94 	bl	8000cf8 <__aeabi_uldivmod>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4b60      	ldr	r3, [pc, #384]	@ (8007958 <UART_SetConfig+0x4e4>)
 80077d6:	fba3 2302 	umull	r2, r3, r3, r2
 80077da:	095b      	lsrs	r3, r3, #5
 80077dc:	011c      	lsls	r4, r3, #4
 80077de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80077ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80077f0:	4642      	mov	r2, r8
 80077f2:	464b      	mov	r3, r9
 80077f4:	1891      	adds	r1, r2, r2
 80077f6:	61b9      	str	r1, [r7, #24]
 80077f8:	415b      	adcs	r3, r3
 80077fa:	61fb      	str	r3, [r7, #28]
 80077fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007800:	4641      	mov	r1, r8
 8007802:	1851      	adds	r1, r2, r1
 8007804:	6139      	str	r1, [r7, #16]
 8007806:	4649      	mov	r1, r9
 8007808:	414b      	adcs	r3, r1
 800780a:	617b      	str	r3, [r7, #20]
 800780c:	f04f 0200 	mov.w	r2, #0
 8007810:	f04f 0300 	mov.w	r3, #0
 8007814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007818:	4659      	mov	r1, fp
 800781a:	00cb      	lsls	r3, r1, #3
 800781c:	4651      	mov	r1, sl
 800781e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007822:	4651      	mov	r1, sl
 8007824:	00ca      	lsls	r2, r1, #3
 8007826:	4610      	mov	r0, r2
 8007828:	4619      	mov	r1, r3
 800782a:	4603      	mov	r3, r0
 800782c:	4642      	mov	r2, r8
 800782e:	189b      	adds	r3, r3, r2
 8007830:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007834:	464b      	mov	r3, r9
 8007836:	460a      	mov	r2, r1
 8007838:	eb42 0303 	adc.w	r3, r2, r3
 800783c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	67bb      	str	r3, [r7, #120]	@ 0x78
 800784a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	f04f 0300 	mov.w	r3, #0
 8007854:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007858:	4649      	mov	r1, r9
 800785a:	008b      	lsls	r3, r1, #2
 800785c:	4641      	mov	r1, r8
 800785e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007862:	4641      	mov	r1, r8
 8007864:	008a      	lsls	r2, r1, #2
 8007866:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800786a:	f7f9 fa45 	bl	8000cf8 <__aeabi_uldivmod>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4611      	mov	r1, r2
 8007874:	4b38      	ldr	r3, [pc, #224]	@ (8007958 <UART_SetConfig+0x4e4>)
 8007876:	fba3 2301 	umull	r2, r3, r3, r1
 800787a:	095b      	lsrs	r3, r3, #5
 800787c:	2264      	movs	r2, #100	@ 0x64
 800787e:	fb02 f303 	mul.w	r3, r2, r3
 8007882:	1acb      	subs	r3, r1, r3
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	3332      	adds	r3, #50	@ 0x32
 8007888:	4a33      	ldr	r2, [pc, #204]	@ (8007958 <UART_SetConfig+0x4e4>)
 800788a:	fba2 2303 	umull	r2, r3, r2, r3
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007894:	441c      	add	r4, r3
 8007896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800789a:	2200      	movs	r2, #0
 800789c:	673b      	str	r3, [r7, #112]	@ 0x70
 800789e:	677a      	str	r2, [r7, #116]	@ 0x74
 80078a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80078a4:	4642      	mov	r2, r8
 80078a6:	464b      	mov	r3, r9
 80078a8:	1891      	adds	r1, r2, r2
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	415b      	adcs	r3, r3
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078b4:	4641      	mov	r1, r8
 80078b6:	1851      	adds	r1, r2, r1
 80078b8:	6039      	str	r1, [r7, #0]
 80078ba:	4649      	mov	r1, r9
 80078bc:	414b      	adcs	r3, r1
 80078be:	607b      	str	r3, [r7, #4]
 80078c0:	f04f 0200 	mov.w	r2, #0
 80078c4:	f04f 0300 	mov.w	r3, #0
 80078c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078cc:	4659      	mov	r1, fp
 80078ce:	00cb      	lsls	r3, r1, #3
 80078d0:	4651      	mov	r1, sl
 80078d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078d6:	4651      	mov	r1, sl
 80078d8:	00ca      	lsls	r2, r1, #3
 80078da:	4610      	mov	r0, r2
 80078dc:	4619      	mov	r1, r3
 80078de:	4603      	mov	r3, r0
 80078e0:	4642      	mov	r2, r8
 80078e2:	189b      	adds	r3, r3, r2
 80078e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078e6:	464b      	mov	r3, r9
 80078e8:	460a      	mov	r2, r1
 80078ea:	eb42 0303 	adc.w	r3, r2, r3
 80078ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80078fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80078fc:	f04f 0200 	mov.w	r2, #0
 8007900:	f04f 0300 	mov.w	r3, #0
 8007904:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007908:	4649      	mov	r1, r9
 800790a:	008b      	lsls	r3, r1, #2
 800790c:	4641      	mov	r1, r8
 800790e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007912:	4641      	mov	r1, r8
 8007914:	008a      	lsls	r2, r1, #2
 8007916:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800791a:	f7f9 f9ed 	bl	8000cf8 <__aeabi_uldivmod>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4b0d      	ldr	r3, [pc, #52]	@ (8007958 <UART_SetConfig+0x4e4>)
 8007924:	fba3 1302 	umull	r1, r3, r3, r2
 8007928:	095b      	lsrs	r3, r3, #5
 800792a:	2164      	movs	r1, #100	@ 0x64
 800792c:	fb01 f303 	mul.w	r3, r1, r3
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	011b      	lsls	r3, r3, #4
 8007934:	3332      	adds	r3, #50	@ 0x32
 8007936:	4a08      	ldr	r2, [pc, #32]	@ (8007958 <UART_SetConfig+0x4e4>)
 8007938:	fba2 2303 	umull	r2, r3, r2, r3
 800793c:	095b      	lsrs	r3, r3, #5
 800793e:	f003 020f 	and.w	r2, r3, #15
 8007942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4422      	add	r2, r4
 800794a:	609a      	str	r2, [r3, #8]
}
 800794c:	bf00      	nop
 800794e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007952:	46bd      	mov	sp, r7
 8007954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007958:	51eb851f 	.word	0x51eb851f

0800795c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007966:	2300      	movs	r3, #0
 8007968:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800796a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800796e:	2b84      	cmp	r3, #132	@ 0x84
 8007970:	d005      	beq.n	800797e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007972:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	3303      	adds	r3, #3
 800797c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800797e:	68fb      	ldr	r3, [r7, #12]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007990:	f000 fae4 	bl	8007f5c <vTaskStartScheduler>
  
  return osOK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	bd80      	pop	{r7, pc}

0800799a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800799a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800799c:	b089      	sub	sp, #36	@ 0x24
 800799e:	af04      	add	r7, sp, #16
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d020      	beq.n	80079ee <osThreadCreate+0x54>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01c      	beq.n	80079ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685c      	ldr	r4, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691e      	ldr	r6, [r3, #16]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff ffc8 	bl	800795c <makeFreeRtosPriority>
 80079cc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079d6:	9202      	str	r2, [sp, #8]
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	9100      	str	r1, [sp, #0]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	4632      	mov	r2, r6
 80079e0:	4629      	mov	r1, r5
 80079e2:	4620      	mov	r0, r4
 80079e4:	f000 f8ed 	bl	8007bc2 <xTaskCreateStatic>
 80079e8:	4603      	mov	r3, r0
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	e01c      	b.n	8007a28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685c      	ldr	r4, [r3, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079fa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff ffaa 	bl	800795c <makeFreeRtosPriority>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	f107 030c 	add.w	r3, r7, #12
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	9200      	str	r2, [sp, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	4632      	mov	r2, r6
 8007a16:	4629      	mov	r1, r5
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 f932 	bl	8007c82 <xTaskCreate>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d001      	beq.n	8007a28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007a24:	2300      	movs	r3, #0
 8007a26:	e000      	b.n	8007a2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007a28:	68fb      	ldr	r3, [r7, #12]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b084      	sub	sp, #16
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <osDelay+0x16>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	e000      	b.n	8007a4a <osDelay+0x18>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 fa50 	bl	8007ef0 <vTaskDelay>
  
  return osOK;
 8007a50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f103 0208 	add.w	r2, r3, #8
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a72:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f103 0208 	add.w	r2, r3, #8
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f103 0208 	add.w	r2, r3, #8
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	689a      	ldr	r2, [r3, #8]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	601a      	str	r2, [r3, #0]
}
 8007af0:	bf00      	nop
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b12:	d103      	bne.n	8007b1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	60fb      	str	r3, [r7, #12]
 8007b1a:	e00c      	b.n	8007b36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3308      	adds	r3, #8
 8007b20:	60fb      	str	r3, [r7, #12]
 8007b22:	e002      	b.n	8007b2a <vListInsert+0x2e>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	60fb      	str	r3, [r7, #12]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d2f6      	bcs.n	8007b24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	601a      	str	r2, [r3, #0]
}
 8007b62:	bf00      	nop
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b085      	sub	sp, #20
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6892      	ldr	r2, [r2, #8]
 8007b84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6852      	ldr	r2, [r2, #4]
 8007b8e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d103      	bne.n	8007ba2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	1e5a      	subs	r2, r3, #1
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b08e      	sub	sp, #56	@ 0x38
 8007bc6:	af04      	add	r7, sp, #16
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
 8007bce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10b      	bne.n	8007bee <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	e7fd      	b.n	8007bea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10b      	bne.n	8007c0c <xTaskCreateStatic+0x4a>
	__asm volatile
 8007bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	61fb      	str	r3, [r7, #28]
}
 8007c06:	bf00      	nop
 8007c08:	bf00      	nop
 8007c0a:	e7fd      	b.n	8007c08 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c0c:	2354      	movs	r3, #84	@ 0x54
 8007c0e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	2b54      	cmp	r3, #84	@ 0x54
 8007c14:	d00b      	beq.n	8007c2e <xTaskCreateStatic+0x6c>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	61bb      	str	r3, [r7, #24]
}
 8007c28:	bf00      	nop
 8007c2a:	bf00      	nop
 8007c2c:	e7fd      	b.n	8007c2a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d01e      	beq.n	8007c74 <xTaskCreateStatic+0xb2>
 8007c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01b      	beq.n	8007c74 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c44:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	2202      	movs	r2, #2
 8007c4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c4e:	2300      	movs	r3, #0
 8007c50:	9303      	str	r3, [sp, #12]
 8007c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c54:	9302      	str	r3, [sp, #8]
 8007c56:	f107 0314 	add.w	r3, r7, #20
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	68b9      	ldr	r1, [r7, #8]
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 f850 	bl	8007d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c6e:	f000 f8d5 	bl	8007e1c <prvAddNewTaskToReadyList>
 8007c72:	e001      	b.n	8007c78 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007c74:	2300      	movs	r3, #0
 8007c76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c78:	697b      	ldr	r3, [r7, #20]
	}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3728      	adds	r7, #40	@ 0x28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b08c      	sub	sp, #48	@ 0x30
 8007c86:	af04      	add	r7, sp, #16
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	603b      	str	r3, [r7, #0]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c92:	88fb      	ldrh	r3, [r7, #6]
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 fefe 	bl	8008a98 <pvPortMalloc>
 8007c9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00e      	beq.n	8007cc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ca4:	2054      	movs	r0, #84	@ 0x54
 8007ca6:	f000 fef7 	bl	8008a98 <pvPortMalloc>
 8007caa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8007cb8:	e005      	b.n	8007cc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007cba:	6978      	ldr	r0, [r7, #20]
 8007cbc:	f000 ffba 	bl	8008c34 <vPortFree>
 8007cc0:	e001      	b.n	8007cc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d017      	beq.n	8007cfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007cd4:	88fa      	ldrh	r2, [r7, #6]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	9303      	str	r3, [sp, #12]
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	9302      	str	r3, [sp, #8]
 8007cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68b9      	ldr	r1, [r7, #8]
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 f80e 	bl	8007d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cf0:	69f8      	ldr	r0, [r7, #28]
 8007cf2:	f000 f893 	bl	8007e1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	e002      	b.n	8007d02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8007d00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d02:	69bb      	ldr	r3, [r7, #24]
	}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3720      	adds	r7, #32
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b088      	sub	sp, #32
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007d24:	3b01      	subs	r3, #1
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	f023 0307 	bic.w	r3, r3, #7
 8007d32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00b      	beq.n	8007d56 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	617b      	str	r3, [r7, #20]
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	e7fd      	b.n	8007d52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d01f      	beq.n	8007d9c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	61fb      	str	r3, [r7, #28]
 8007d60:	e012      	b.n	8007d88 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	4413      	add	r3, r2
 8007d68:	7819      	ldrb	r1, [r3, #0]
 8007d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	4413      	add	r3, r2
 8007d70:	3334      	adds	r3, #52	@ 0x34
 8007d72:	460a      	mov	r2, r1
 8007d74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d006      	beq.n	8007d90 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	3301      	adds	r3, #1
 8007d86:	61fb      	str	r3, [r7, #28]
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	2b0f      	cmp	r3, #15
 8007d8c:	d9e9      	bls.n	8007d62 <prvInitialiseNewTask+0x56>
 8007d8e:	e000      	b.n	8007d92 <prvInitialiseNewTask+0x86>
			{
				break;
 8007d90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d9a:	e003      	b.n	8007da4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da6:	2b06      	cmp	r3, #6
 8007da8:	d901      	bls.n	8007dae <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007daa:	2306      	movs	r3, #6
 8007dac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007db2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007db8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff fe68 	bl	8007a9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dcc:	3318      	adds	r3, #24
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff fe63 	bl	8007a9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dd8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ddc:	f1c3 0207 	rsb	r2, r3, #7
 8007de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007de8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dec:	2200      	movs	r2, #0
 8007dee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	68f9      	ldr	r1, [r7, #12]
 8007dfc:	69b8      	ldr	r0, [r7, #24]
 8007dfe:	f000 fc3b 	bl	8008678 <pxPortInitialiseStack>
 8007e02:	4602      	mov	r2, r0
 8007e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e14:	bf00      	nop
 8007e16:	3720      	adds	r7, #32
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e24:	f000 fd58 	bl	80088d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e28:	4b2a      	ldr	r3, [pc, #168]	@ (8007ed4 <prvAddNewTaskToReadyList+0xb8>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	4a29      	ldr	r2, [pc, #164]	@ (8007ed4 <prvAddNewTaskToReadyList+0xb8>)
 8007e30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e32:	4b29      	ldr	r3, [pc, #164]	@ (8007ed8 <prvAddNewTaskToReadyList+0xbc>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d109      	bne.n	8007e4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e3a:	4a27      	ldr	r2, [pc, #156]	@ (8007ed8 <prvAddNewTaskToReadyList+0xbc>)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e40:	4b24      	ldr	r3, [pc, #144]	@ (8007ed4 <prvAddNewTaskToReadyList+0xb8>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d110      	bne.n	8007e6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e48:	f000 fad4 	bl	80083f4 <prvInitialiseTaskLists>
 8007e4c:	e00d      	b.n	8007e6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e4e:	4b23      	ldr	r3, [pc, #140]	@ (8007edc <prvAddNewTaskToReadyList+0xc0>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d109      	bne.n	8007e6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e56:	4b20      	ldr	r3, [pc, #128]	@ (8007ed8 <prvAddNewTaskToReadyList+0xbc>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d802      	bhi.n	8007e6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e64:	4a1c      	ldr	r2, [pc, #112]	@ (8007ed8 <prvAddNewTaskToReadyList+0xbc>)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ee0 <prvAddNewTaskToReadyList+0xc4>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	4a1b      	ldr	r2, [pc, #108]	@ (8007ee0 <prvAddNewTaskToReadyList+0xc4>)
 8007e72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e78:	2201      	movs	r2, #1
 8007e7a:	409a      	lsls	r2, r3
 8007e7c:	4b19      	ldr	r3, [pc, #100]	@ (8007ee4 <prvAddNewTaskToReadyList+0xc8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	4a18      	ldr	r2, [pc, #96]	@ (8007ee4 <prvAddNewTaskToReadyList+0xc8>)
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4a15      	ldr	r2, [pc, #84]	@ (8007ee8 <prvAddNewTaskToReadyList+0xcc>)
 8007e94:	441a      	add	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	f7ff fe09 	bl	8007ab4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ea2:	f000 fd4b 	bl	800893c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8007edc <prvAddNewTaskToReadyList+0xc0>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00e      	beq.n	8007ecc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007eae:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed8 <prvAddNewTaskToReadyList+0xbc>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d207      	bcs.n	8007ecc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8007eec <prvAddNewTaskToReadyList+0xd0>)
 8007ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ecc:	bf00      	nop
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	20000868 	.word	0x20000868
 8007ed8:	20000768 	.word	0x20000768
 8007edc:	20000874 	.word	0x20000874
 8007ee0:	20000884 	.word	0x20000884
 8007ee4:	20000870 	.word	0x20000870
 8007ee8:	2000076c 	.word	0x2000076c
 8007eec:	e000ed04 	.word	0xe000ed04

08007ef0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d018      	beq.n	8007f34 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f02:	4b14      	ldr	r3, [pc, #80]	@ (8007f54 <vTaskDelay+0x64>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00b      	beq.n	8007f22 <vTaskDelay+0x32>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	60bb      	str	r3, [r7, #8]
}
 8007f1c:	bf00      	nop
 8007f1e:	bf00      	nop
 8007f20:	e7fd      	b.n	8007f1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f22:	f000 f87d 	bl	8008020 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f26:	2100      	movs	r1, #0
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fb3f 	bl	80085ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f2e:	f000 f885 	bl	800803c <xTaskResumeAll>
 8007f32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d107      	bne.n	8007f4a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007f3a:	4b07      	ldr	r3, [pc, #28]	@ (8007f58 <vTaskDelay+0x68>)
 8007f3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f4a:	bf00      	nop
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20000890 	.word	0x20000890
 8007f58:	e000ed04 	.word	0xe000ed04

08007f5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08a      	sub	sp, #40	@ 0x28
 8007f60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f6a:	463a      	mov	r2, r7
 8007f6c:	1d39      	adds	r1, r7, #4
 8007f6e:	f107 0308 	add.w	r3, r7, #8
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fb f8b4 	bl	80030e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	9202      	str	r2, [sp, #8]
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	2300      	movs	r3, #0
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	2300      	movs	r3, #0
 8007f88:	460a      	mov	r2, r1
 8007f8a:	491f      	ldr	r1, [pc, #124]	@ (8008008 <vTaskStartScheduler+0xac>)
 8007f8c:	481f      	ldr	r0, [pc, #124]	@ (800800c <vTaskStartScheduler+0xb0>)
 8007f8e:	f7ff fe18 	bl	8007bc2 <xTaskCreateStatic>
 8007f92:	4603      	mov	r3, r0
 8007f94:	4a1e      	ldr	r2, [pc, #120]	@ (8008010 <vTaskStartScheduler+0xb4>)
 8007f96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f98:	4b1d      	ldr	r3, [pc, #116]	@ (8008010 <vTaskStartScheduler+0xb4>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	617b      	str	r3, [r7, #20]
 8007fa4:	e001      	b.n	8007faa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d116      	bne.n	8007fde <vTaskStartScheduler+0x82>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	613b      	str	r3, [r7, #16]
}
 8007fc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007fc4:	4b13      	ldr	r3, [pc, #76]	@ (8008014 <vTaskStartScheduler+0xb8>)
 8007fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fcc:	4b12      	ldr	r3, [pc, #72]	@ (8008018 <vTaskStartScheduler+0xbc>)
 8007fce:	2201      	movs	r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fd2:	4b12      	ldr	r3, [pc, #72]	@ (800801c <vTaskStartScheduler+0xc0>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fd8:	f000 fbda 	bl	8008790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fdc:	e00f      	b.n	8007ffe <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe4:	d10b      	bne.n	8007ffe <vTaskStartScheduler+0xa2>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	60fb      	str	r3, [r7, #12]
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	e7fd      	b.n	8007ffa <vTaskStartScheduler+0x9e>
}
 8007ffe:	bf00      	nop
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	08010f44 	.word	0x08010f44
 800800c:	080083c5 	.word	0x080083c5
 8008010:	2000088c 	.word	0x2000088c
 8008014:	20000888 	.word	0x20000888
 8008018:	20000874 	.word	0x20000874
 800801c:	2000086c 	.word	0x2000086c

08008020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008020:	b480      	push	{r7}
 8008022:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008024:	4b04      	ldr	r3, [pc, #16]	@ (8008038 <vTaskSuspendAll+0x18>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	3301      	adds	r3, #1
 800802a:	4a03      	ldr	r2, [pc, #12]	@ (8008038 <vTaskSuspendAll+0x18>)
 800802c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800802e:	bf00      	nop
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	20000890 	.word	0x20000890

0800803c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008042:	2300      	movs	r3, #0
 8008044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008046:	2300      	movs	r3, #0
 8008048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800804a:	4b42      	ldr	r3, [pc, #264]	@ (8008154 <xTaskResumeAll+0x118>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10b      	bne.n	800806a <xTaskResumeAll+0x2e>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	603b      	str	r3, [r7, #0]
}
 8008064:	bf00      	nop
 8008066:	bf00      	nop
 8008068:	e7fd      	b.n	8008066 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800806a:	f000 fc35 	bl	80088d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800806e:	4b39      	ldr	r3, [pc, #228]	@ (8008154 <xTaskResumeAll+0x118>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3b01      	subs	r3, #1
 8008074:	4a37      	ldr	r2, [pc, #220]	@ (8008154 <xTaskResumeAll+0x118>)
 8008076:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008078:	4b36      	ldr	r3, [pc, #216]	@ (8008154 <xTaskResumeAll+0x118>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d161      	bne.n	8008144 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008080:	4b35      	ldr	r3, [pc, #212]	@ (8008158 <xTaskResumeAll+0x11c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d05d      	beq.n	8008144 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008088:	e02e      	b.n	80080e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800808a:	4b34      	ldr	r3, [pc, #208]	@ (800815c <xTaskResumeAll+0x120>)
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	3318      	adds	r3, #24
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff fd69 	bl	8007b6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3304      	adds	r3, #4
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7ff fd64 	bl	8007b6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080aa:	2201      	movs	r2, #1
 80080ac:	409a      	lsls	r2, r3
 80080ae:	4b2c      	ldr	r3, [pc, #176]	@ (8008160 <xTaskResumeAll+0x124>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	4a2a      	ldr	r2, [pc, #168]	@ (8008160 <xTaskResumeAll+0x124>)
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4a27      	ldr	r2, [pc, #156]	@ (8008164 <xTaskResumeAll+0x128>)
 80080c6:	441a      	add	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3304      	adds	r3, #4
 80080cc:	4619      	mov	r1, r3
 80080ce:	4610      	mov	r0, r2
 80080d0:	f7ff fcf0 	bl	8007ab4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080d8:	4b23      	ldr	r3, [pc, #140]	@ (8008168 <xTaskResumeAll+0x12c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080de:	429a      	cmp	r2, r3
 80080e0:	d302      	bcc.n	80080e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80080e2:	4b22      	ldr	r3, [pc, #136]	@ (800816c <xTaskResumeAll+0x130>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080e8:	4b1c      	ldr	r3, [pc, #112]	@ (800815c <xTaskResumeAll+0x120>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1cc      	bne.n	800808a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080f6:	f000 fa1b 	bl	8008530 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80080fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008170 <xTaskResumeAll+0x134>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d010      	beq.n	8008128 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008106:	f000 f847 	bl	8008198 <xTaskIncrementTick>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008110:	4b16      	ldr	r3, [pc, #88]	@ (800816c <xTaskResumeAll+0x130>)
 8008112:	2201      	movs	r2, #1
 8008114:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3b01      	subs	r3, #1
 800811a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1f1      	bne.n	8008106 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008122:	4b13      	ldr	r3, [pc, #76]	@ (8008170 <xTaskResumeAll+0x134>)
 8008124:	2200      	movs	r2, #0
 8008126:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008128:	4b10      	ldr	r3, [pc, #64]	@ (800816c <xTaskResumeAll+0x130>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d009      	beq.n	8008144 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008130:	2301      	movs	r3, #1
 8008132:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008134:	4b0f      	ldr	r3, [pc, #60]	@ (8008174 <xTaskResumeAll+0x138>)
 8008136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008144:	f000 fbfa 	bl	800893c <vPortExitCritical>

	return xAlreadyYielded;
 8008148:	68bb      	ldr	r3, [r7, #8]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000890 	.word	0x20000890
 8008158:	20000868 	.word	0x20000868
 800815c:	20000828 	.word	0x20000828
 8008160:	20000870 	.word	0x20000870
 8008164:	2000076c 	.word	0x2000076c
 8008168:	20000768 	.word	0x20000768
 800816c:	2000087c 	.word	0x2000087c
 8008170:	20000878 	.word	0x20000878
 8008174:	e000ed04 	.word	0xe000ed04

08008178 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800817e:	4b05      	ldr	r3, [pc, #20]	@ (8008194 <xTaskGetTickCount+0x1c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008184:	687b      	ldr	r3, [r7, #4]
}
 8008186:	4618      	mov	r0, r3
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	2000086c 	.word	0x2000086c

08008198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800819e:	2300      	movs	r3, #0
 80081a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081a2:	4b4f      	ldr	r3, [pc, #316]	@ (80082e0 <xTaskIncrementTick+0x148>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f040 808f 	bne.w	80082ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081ac:	4b4d      	ldr	r3, [pc, #308]	@ (80082e4 <xTaskIncrementTick+0x14c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	3301      	adds	r3, #1
 80081b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081b4:	4a4b      	ldr	r2, [pc, #300]	@ (80082e4 <xTaskIncrementTick+0x14c>)
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d121      	bne.n	8008204 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80081c0:	4b49      	ldr	r3, [pc, #292]	@ (80082e8 <xTaskIncrementTick+0x150>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00b      	beq.n	80081e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	603b      	str	r3, [r7, #0]
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	e7fd      	b.n	80081de <xTaskIncrementTick+0x46>
 80081e2:	4b41      	ldr	r3, [pc, #260]	@ (80082e8 <xTaskIncrementTick+0x150>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	4b40      	ldr	r3, [pc, #256]	@ (80082ec <xTaskIncrementTick+0x154>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a3e      	ldr	r2, [pc, #248]	@ (80082e8 <xTaskIncrementTick+0x150>)
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	4a3e      	ldr	r2, [pc, #248]	@ (80082ec <xTaskIncrementTick+0x154>)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	4b3e      	ldr	r3, [pc, #248]	@ (80082f0 <xTaskIncrementTick+0x158>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3301      	adds	r3, #1
 80081fc:	4a3c      	ldr	r2, [pc, #240]	@ (80082f0 <xTaskIncrementTick+0x158>)
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	f000 f996 	bl	8008530 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008204:	4b3b      	ldr	r3, [pc, #236]	@ (80082f4 <xTaskIncrementTick+0x15c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	429a      	cmp	r2, r3
 800820c:	d348      	bcc.n	80082a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800820e:	4b36      	ldr	r3, [pc, #216]	@ (80082e8 <xTaskIncrementTick+0x150>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d104      	bne.n	8008222 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008218:	4b36      	ldr	r3, [pc, #216]	@ (80082f4 <xTaskIncrementTick+0x15c>)
 800821a:	f04f 32ff 	mov.w	r2, #4294967295
 800821e:	601a      	str	r2, [r3, #0]
					break;
 8008220:	e03e      	b.n	80082a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008222:	4b31      	ldr	r3, [pc, #196]	@ (80082e8 <xTaskIncrementTick+0x150>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	429a      	cmp	r2, r3
 8008238:	d203      	bcs.n	8008242 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800823a:	4a2e      	ldr	r2, [pc, #184]	@ (80082f4 <xTaskIncrementTick+0x15c>)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008240:	e02e      	b.n	80082a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	3304      	adds	r3, #4
 8008246:	4618      	mov	r0, r3
 8008248:	f7ff fc91 	bl	8007b6e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008250:	2b00      	cmp	r3, #0
 8008252:	d004      	beq.n	800825e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	3318      	adds	r3, #24
 8008258:	4618      	mov	r0, r3
 800825a:	f7ff fc88 	bl	8007b6e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008262:	2201      	movs	r2, #1
 8008264:	409a      	lsls	r2, r3
 8008266:	4b24      	ldr	r3, [pc, #144]	@ (80082f8 <xTaskIncrementTick+0x160>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4313      	orrs	r3, r2
 800826c:	4a22      	ldr	r2, [pc, #136]	@ (80082f8 <xTaskIncrementTick+0x160>)
 800826e:	6013      	str	r3, [r2, #0]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008274:	4613      	mov	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4a1f      	ldr	r2, [pc, #124]	@ (80082fc <xTaskIncrementTick+0x164>)
 800827e:	441a      	add	r2, r3
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	3304      	adds	r3, #4
 8008284:	4619      	mov	r1, r3
 8008286:	4610      	mov	r0, r2
 8008288:	f7ff fc14 	bl	8007ab4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008290:	4b1b      	ldr	r3, [pc, #108]	@ (8008300 <xTaskIncrementTick+0x168>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008296:	429a      	cmp	r2, r3
 8008298:	d3b9      	bcc.n	800820e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800829a:	2301      	movs	r3, #1
 800829c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800829e:	e7b6      	b.n	800820e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082a0:	4b17      	ldr	r3, [pc, #92]	@ (8008300 <xTaskIncrementTick+0x168>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a6:	4915      	ldr	r1, [pc, #84]	@ (80082fc <xTaskIncrementTick+0x164>)
 80082a8:	4613      	mov	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	440b      	add	r3, r1
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d901      	bls.n	80082bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80082b8:	2301      	movs	r3, #1
 80082ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80082bc:	4b11      	ldr	r3, [pc, #68]	@ (8008304 <xTaskIncrementTick+0x16c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d007      	beq.n	80082d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80082c4:	2301      	movs	r3, #1
 80082c6:	617b      	str	r3, [r7, #20]
 80082c8:	e004      	b.n	80082d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80082ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008308 <xTaskIncrementTick+0x170>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3301      	adds	r3, #1
 80082d0:	4a0d      	ldr	r2, [pc, #52]	@ (8008308 <xTaskIncrementTick+0x170>)
 80082d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80082d4:	697b      	ldr	r3, [r7, #20]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20000890 	.word	0x20000890
 80082e4:	2000086c 	.word	0x2000086c
 80082e8:	20000820 	.word	0x20000820
 80082ec:	20000824 	.word	0x20000824
 80082f0:	20000880 	.word	0x20000880
 80082f4:	20000888 	.word	0x20000888
 80082f8:	20000870 	.word	0x20000870
 80082fc:	2000076c 	.word	0x2000076c
 8008300:	20000768 	.word	0x20000768
 8008304:	2000087c 	.word	0x2000087c
 8008308:	20000878 	.word	0x20000878

0800830c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800830c:	b480      	push	{r7}
 800830e:	b087      	sub	sp, #28
 8008310:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008312:	4b27      	ldr	r3, [pc, #156]	@ (80083b0 <vTaskSwitchContext+0xa4>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800831a:	4b26      	ldr	r3, [pc, #152]	@ (80083b4 <vTaskSwitchContext+0xa8>)
 800831c:	2201      	movs	r2, #1
 800831e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008320:	e040      	b.n	80083a4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008322:	4b24      	ldr	r3, [pc, #144]	@ (80083b4 <vTaskSwitchContext+0xa8>)
 8008324:	2200      	movs	r2, #0
 8008326:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008328:	4b23      	ldr	r3, [pc, #140]	@ (80083b8 <vTaskSwitchContext+0xac>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	fab3 f383 	clz	r3, r3
 8008334:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008336:	7afb      	ldrb	r3, [r7, #11]
 8008338:	f1c3 031f 	rsb	r3, r3, #31
 800833c:	617b      	str	r3, [r7, #20]
 800833e:	491f      	ldr	r1, [pc, #124]	@ (80083bc <vTaskSwitchContext+0xb0>)
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	440b      	add	r3, r1
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10b      	bne.n	800836a <vTaskSwitchContext+0x5e>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	607b      	str	r3, [r7, #4]
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop
 8008368:	e7fd      	b.n	8008366 <vTaskSwitchContext+0x5a>
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	4613      	mov	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4a11      	ldr	r2, [pc, #68]	@ (80083bc <vTaskSwitchContext+0xb0>)
 8008376:	4413      	add	r3, r2
 8008378:	613b      	str	r3, [r7, #16]
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	605a      	str	r2, [r3, #4]
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	3308      	adds	r3, #8
 800838c:	429a      	cmp	r2, r3
 800838e:	d104      	bne.n	800839a <vTaskSwitchContext+0x8e>
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	605a      	str	r2, [r3, #4]
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	4a07      	ldr	r2, [pc, #28]	@ (80083c0 <vTaskSwitchContext+0xb4>)
 80083a2:	6013      	str	r3, [r2, #0]
}
 80083a4:	bf00      	nop
 80083a6:	371c      	adds	r7, #28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	20000890 	.word	0x20000890
 80083b4:	2000087c 	.word	0x2000087c
 80083b8:	20000870 	.word	0x20000870
 80083bc:	2000076c 	.word	0x2000076c
 80083c0:	20000768 	.word	0x20000768

080083c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083cc:	f000 f852 	bl	8008474 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083d0:	4b06      	ldr	r3, [pc, #24]	@ (80083ec <prvIdleTask+0x28>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d9f9      	bls.n	80083cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80083d8:	4b05      	ldr	r3, [pc, #20]	@ (80083f0 <prvIdleTask+0x2c>)
 80083da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083e8:	e7f0      	b.n	80083cc <prvIdleTask+0x8>
 80083ea:	bf00      	nop
 80083ec:	2000076c 	.word	0x2000076c
 80083f0:	e000ed04 	.word	0xe000ed04

080083f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083fa:	2300      	movs	r3, #0
 80083fc:	607b      	str	r3, [r7, #4]
 80083fe:	e00c      	b.n	800841a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4a12      	ldr	r2, [pc, #72]	@ (8008454 <prvInitialiseTaskLists+0x60>)
 800840c:	4413      	add	r3, r2
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff fb23 	bl	8007a5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3301      	adds	r3, #1
 8008418:	607b      	str	r3, [r7, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b06      	cmp	r3, #6
 800841e:	d9ef      	bls.n	8008400 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008420:	480d      	ldr	r0, [pc, #52]	@ (8008458 <prvInitialiseTaskLists+0x64>)
 8008422:	f7ff fb1a 	bl	8007a5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008426:	480d      	ldr	r0, [pc, #52]	@ (800845c <prvInitialiseTaskLists+0x68>)
 8008428:	f7ff fb17 	bl	8007a5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800842c:	480c      	ldr	r0, [pc, #48]	@ (8008460 <prvInitialiseTaskLists+0x6c>)
 800842e:	f7ff fb14 	bl	8007a5a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008432:	480c      	ldr	r0, [pc, #48]	@ (8008464 <prvInitialiseTaskLists+0x70>)
 8008434:	f7ff fb11 	bl	8007a5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008438:	480b      	ldr	r0, [pc, #44]	@ (8008468 <prvInitialiseTaskLists+0x74>)
 800843a:	f7ff fb0e 	bl	8007a5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800843e:	4b0b      	ldr	r3, [pc, #44]	@ (800846c <prvInitialiseTaskLists+0x78>)
 8008440:	4a05      	ldr	r2, [pc, #20]	@ (8008458 <prvInitialiseTaskLists+0x64>)
 8008442:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008444:	4b0a      	ldr	r3, [pc, #40]	@ (8008470 <prvInitialiseTaskLists+0x7c>)
 8008446:	4a05      	ldr	r2, [pc, #20]	@ (800845c <prvInitialiseTaskLists+0x68>)
 8008448:	601a      	str	r2, [r3, #0]
}
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	2000076c 	.word	0x2000076c
 8008458:	200007f8 	.word	0x200007f8
 800845c:	2000080c 	.word	0x2000080c
 8008460:	20000828 	.word	0x20000828
 8008464:	2000083c 	.word	0x2000083c
 8008468:	20000854 	.word	0x20000854
 800846c:	20000820 	.word	0x20000820
 8008470:	20000824 	.word	0x20000824

08008474 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800847a:	e019      	b.n	80084b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800847c:	f000 fa2c 	bl	80088d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008480:	4b10      	ldr	r3, [pc, #64]	@ (80084c4 <prvCheckTasksWaitingTermination+0x50>)
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3304      	adds	r3, #4
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff fb6e 	bl	8007b6e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008492:	4b0d      	ldr	r3, [pc, #52]	@ (80084c8 <prvCheckTasksWaitingTermination+0x54>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3b01      	subs	r3, #1
 8008498:	4a0b      	ldr	r2, [pc, #44]	@ (80084c8 <prvCheckTasksWaitingTermination+0x54>)
 800849a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800849c:	4b0b      	ldr	r3, [pc, #44]	@ (80084cc <prvCheckTasksWaitingTermination+0x58>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3b01      	subs	r3, #1
 80084a2:	4a0a      	ldr	r2, [pc, #40]	@ (80084cc <prvCheckTasksWaitingTermination+0x58>)
 80084a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084a6:	f000 fa49 	bl	800893c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f810 	bl	80084d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084b0:	4b06      	ldr	r3, [pc, #24]	@ (80084cc <prvCheckTasksWaitingTermination+0x58>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1e1      	bne.n	800847c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80084b8:	bf00      	nop
 80084ba:	bf00      	nop
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	2000083c 	.word	0x2000083c
 80084c8:	20000868 	.word	0x20000868
 80084cc:	20000850 	.word	0x20000850

080084d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d108      	bne.n	80084f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 fba4 	bl	8008c34 <vPortFree>
				vPortFree( pxTCB );
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fba1 	bl	8008c34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084f2:	e019      	b.n	8008528 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d103      	bne.n	8008506 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fb98 	bl	8008c34 <vPortFree>
	}
 8008504:	e010      	b.n	8008528 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800850c:	2b02      	cmp	r3, #2
 800850e:	d00b      	beq.n	8008528 <prvDeleteTCB+0x58>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	60fb      	str	r3, [r7, #12]
}
 8008522:	bf00      	nop
 8008524:	bf00      	nop
 8008526:	e7fd      	b.n	8008524 <prvDeleteTCB+0x54>
	}
 8008528:	bf00      	nop
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008536:	4b0c      	ldr	r3, [pc, #48]	@ (8008568 <prvResetNextTaskUnblockTime+0x38>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d104      	bne.n	800854a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008540:	4b0a      	ldr	r3, [pc, #40]	@ (800856c <prvResetNextTaskUnblockTime+0x3c>)
 8008542:	f04f 32ff 	mov.w	r2, #4294967295
 8008546:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008548:	e008      	b.n	800855c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800854a:	4b07      	ldr	r3, [pc, #28]	@ (8008568 <prvResetNextTaskUnblockTime+0x38>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	4a04      	ldr	r2, [pc, #16]	@ (800856c <prvResetNextTaskUnblockTime+0x3c>)
 800855a:	6013      	str	r3, [r2, #0]
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	20000820 	.word	0x20000820
 800856c:	20000888 	.word	0x20000888

08008570 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008576:	4b0b      	ldr	r3, [pc, #44]	@ (80085a4 <xTaskGetSchedulerState+0x34>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d102      	bne.n	8008584 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800857e:	2301      	movs	r3, #1
 8008580:	607b      	str	r3, [r7, #4]
 8008582:	e008      	b.n	8008596 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008584:	4b08      	ldr	r3, [pc, #32]	@ (80085a8 <xTaskGetSchedulerState+0x38>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d102      	bne.n	8008592 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800858c:	2302      	movs	r3, #2
 800858e:	607b      	str	r3, [r7, #4]
 8008590:	e001      	b.n	8008596 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008592:	2300      	movs	r3, #0
 8008594:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008596:	687b      	ldr	r3, [r7, #4]
	}
 8008598:	4618      	mov	r0, r3
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	20000874 	.word	0x20000874
 80085a8:	20000890 	.word	0x20000890

080085ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085b6:	4b29      	ldr	r3, [pc, #164]	@ (800865c <prvAddCurrentTaskToDelayedList+0xb0>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085bc:	4b28      	ldr	r3, [pc, #160]	@ (8008660 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3304      	adds	r3, #4
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7ff fad3 	bl	8007b6e <uxListRemove>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10b      	bne.n	80085e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80085ce:	4b24      	ldr	r3, [pc, #144]	@ (8008660 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d4:	2201      	movs	r2, #1
 80085d6:	fa02 f303 	lsl.w	r3, r2, r3
 80085da:	43da      	mvns	r2, r3
 80085dc:	4b21      	ldr	r3, [pc, #132]	@ (8008664 <prvAddCurrentTaskToDelayedList+0xb8>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4013      	ands	r3, r2
 80085e2:	4a20      	ldr	r2, [pc, #128]	@ (8008664 <prvAddCurrentTaskToDelayedList+0xb8>)
 80085e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ec:	d10a      	bne.n	8008604 <prvAddCurrentTaskToDelayedList+0x58>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d007      	beq.n	8008604 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008660 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3304      	adds	r3, #4
 80085fa:	4619      	mov	r1, r3
 80085fc:	481a      	ldr	r0, [pc, #104]	@ (8008668 <prvAddCurrentTaskToDelayedList+0xbc>)
 80085fe:	f7ff fa59 	bl	8007ab4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008602:	e026      	b.n	8008652 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4413      	add	r3, r2
 800860a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800860c:	4b14      	ldr	r3, [pc, #80]	@ (8008660 <prvAddCurrentTaskToDelayedList+0xb4>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	429a      	cmp	r2, r3
 800861a:	d209      	bcs.n	8008630 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800861c:	4b13      	ldr	r3, [pc, #76]	@ (800866c <prvAddCurrentTaskToDelayedList+0xc0>)
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	4b0f      	ldr	r3, [pc, #60]	@ (8008660 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3304      	adds	r3, #4
 8008626:	4619      	mov	r1, r3
 8008628:	4610      	mov	r0, r2
 800862a:	f7ff fa67 	bl	8007afc <vListInsert>
}
 800862e:	e010      	b.n	8008652 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008630:	4b0f      	ldr	r3, [pc, #60]	@ (8008670 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	4b0a      	ldr	r3, [pc, #40]	@ (8008660 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3304      	adds	r3, #4
 800863a:	4619      	mov	r1, r3
 800863c:	4610      	mov	r0, r2
 800863e:	f7ff fa5d 	bl	8007afc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008642:	4b0c      	ldr	r3, [pc, #48]	@ (8008674 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	429a      	cmp	r2, r3
 800864a:	d202      	bcs.n	8008652 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800864c:	4a09      	ldr	r2, [pc, #36]	@ (8008674 <prvAddCurrentTaskToDelayedList+0xc8>)
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	6013      	str	r3, [r2, #0]
}
 8008652:	bf00      	nop
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	2000086c 	.word	0x2000086c
 8008660:	20000768 	.word	0x20000768
 8008664:	20000870 	.word	0x20000870
 8008668:	20000854 	.word	0x20000854
 800866c:	20000824 	.word	0x20000824
 8008670:	20000820 	.word	0x20000820
 8008674:	20000888 	.word	0x20000888

08008678 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	3b04      	subs	r3, #4
 8008688:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3b04      	subs	r3, #4
 8008696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	f023 0201 	bic.w	r2, r3, #1
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3b04      	subs	r3, #4
 80086a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086a8:	4a0c      	ldr	r2, [pc, #48]	@ (80086dc <pxPortInitialiseStack+0x64>)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3b14      	subs	r3, #20
 80086b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3b04      	subs	r3, #4
 80086be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f06f 0202 	mvn.w	r2, #2
 80086c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3b20      	subs	r3, #32
 80086cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086ce:	68fb      	ldr	r3, [r7, #12]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	080086e1 	.word	0x080086e1

080086e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086e6:	2300      	movs	r3, #0
 80086e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086ea:	4b13      	ldr	r3, [pc, #76]	@ (8008738 <prvTaskExitError+0x58>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f2:	d00b      	beq.n	800870c <prvTaskExitError+0x2c>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	60fb      	str	r3, [r7, #12]
}
 8008706:	bf00      	nop
 8008708:	bf00      	nop
 800870a:	e7fd      	b.n	8008708 <prvTaskExitError+0x28>
	__asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	60bb      	str	r3, [r7, #8]
}
 800871e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008720:	bf00      	nop
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0fc      	beq.n	8008722 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008728:	bf00      	nop
 800872a:	bf00      	nop
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20000018 	.word	0x20000018
 800873c:	00000000 	.word	0x00000000

08008740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008740:	4b07      	ldr	r3, [pc, #28]	@ (8008760 <pxCurrentTCBConst2>)
 8008742:	6819      	ldr	r1, [r3, #0]
 8008744:	6808      	ldr	r0, [r1, #0]
 8008746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874a:	f380 8809 	msr	PSP, r0
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f04f 0000 	mov.w	r0, #0
 8008756:	f380 8811 	msr	BASEPRI, r0
 800875a:	4770      	bx	lr
 800875c:	f3af 8000 	nop.w

08008760 <pxCurrentTCBConst2>:
 8008760:	20000768 	.word	0x20000768
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop

08008768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008768:	4808      	ldr	r0, [pc, #32]	@ (800878c <prvPortStartFirstTask+0x24>)
 800876a:	6800      	ldr	r0, [r0, #0]
 800876c:	6800      	ldr	r0, [r0, #0]
 800876e:	f380 8808 	msr	MSP, r0
 8008772:	f04f 0000 	mov.w	r0, #0
 8008776:	f380 8814 	msr	CONTROL, r0
 800877a:	b662      	cpsie	i
 800877c:	b661      	cpsie	f
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	df00      	svc	0
 8008788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800878a:	bf00      	nop
 800878c:	e000ed08 	.word	0xe000ed08

08008790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008796:	4b47      	ldr	r3, [pc, #284]	@ (80088b4 <xPortStartScheduler+0x124>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a47      	ldr	r2, [pc, #284]	@ (80088b8 <xPortStartScheduler+0x128>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d10b      	bne.n	80087b8 <xPortStartScheduler+0x28>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	613b      	str	r3, [r7, #16]
}
 80087b2:	bf00      	nop
 80087b4:	bf00      	nop
 80087b6:	e7fd      	b.n	80087b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087b8:	4b3e      	ldr	r3, [pc, #248]	@ (80088b4 <xPortStartScheduler+0x124>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a3f      	ldr	r2, [pc, #252]	@ (80088bc <xPortStartScheduler+0x12c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d10b      	bne.n	80087da <xPortStartScheduler+0x4a>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	60fb      	str	r3, [r7, #12]
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop
 80087d8:	e7fd      	b.n	80087d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087da:	4b39      	ldr	r3, [pc, #228]	@ (80088c0 <xPortStartScheduler+0x130>)
 80087dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	22ff      	movs	r2, #255	@ 0xff
 80087ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087f4:	78fb      	ldrb	r3, [r7, #3]
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	4b31      	ldr	r3, [pc, #196]	@ (80088c4 <xPortStartScheduler+0x134>)
 8008800:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008802:	4b31      	ldr	r3, [pc, #196]	@ (80088c8 <xPortStartScheduler+0x138>)
 8008804:	2207      	movs	r2, #7
 8008806:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008808:	e009      	b.n	800881e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800880a:	4b2f      	ldr	r3, [pc, #188]	@ (80088c8 <xPortStartScheduler+0x138>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3b01      	subs	r3, #1
 8008810:	4a2d      	ldr	r2, [pc, #180]	@ (80088c8 <xPortStartScheduler+0x138>)
 8008812:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	b2db      	uxtb	r3, r3
 800881c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	b2db      	uxtb	r3, r3
 8008822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008826:	2b80      	cmp	r3, #128	@ 0x80
 8008828:	d0ef      	beq.n	800880a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800882a:	4b27      	ldr	r3, [pc, #156]	@ (80088c8 <xPortStartScheduler+0x138>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f1c3 0307 	rsb	r3, r3, #7
 8008832:	2b04      	cmp	r3, #4
 8008834:	d00b      	beq.n	800884e <xPortStartScheduler+0xbe>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	60bb      	str	r3, [r7, #8]
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	e7fd      	b.n	800884a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800884e:	4b1e      	ldr	r3, [pc, #120]	@ (80088c8 <xPortStartScheduler+0x138>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	021b      	lsls	r3, r3, #8
 8008854:	4a1c      	ldr	r2, [pc, #112]	@ (80088c8 <xPortStartScheduler+0x138>)
 8008856:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008858:	4b1b      	ldr	r3, [pc, #108]	@ (80088c8 <xPortStartScheduler+0x138>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008860:	4a19      	ldr	r2, [pc, #100]	@ (80088c8 <xPortStartScheduler+0x138>)
 8008862:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	b2da      	uxtb	r2, r3
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800886c:	4b17      	ldr	r3, [pc, #92]	@ (80088cc <xPortStartScheduler+0x13c>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a16      	ldr	r2, [pc, #88]	@ (80088cc <xPortStartScheduler+0x13c>)
 8008872:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008878:	4b14      	ldr	r3, [pc, #80]	@ (80088cc <xPortStartScheduler+0x13c>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a13      	ldr	r2, [pc, #76]	@ (80088cc <xPortStartScheduler+0x13c>)
 800887e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008884:	f000 f8da 	bl	8008a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008888:	4b11      	ldr	r3, [pc, #68]	@ (80088d0 <xPortStartScheduler+0x140>)
 800888a:	2200      	movs	r2, #0
 800888c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800888e:	f000 f8f9 	bl	8008a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008892:	4b10      	ldr	r3, [pc, #64]	@ (80088d4 <xPortStartScheduler+0x144>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a0f      	ldr	r2, [pc, #60]	@ (80088d4 <xPortStartScheduler+0x144>)
 8008898:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800889c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800889e:	f7ff ff63 	bl	8008768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088a2:	f7ff fd33 	bl	800830c <vTaskSwitchContext>
	prvTaskExitError();
 80088a6:	f7ff ff1b 	bl	80086e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	e000ed00 	.word	0xe000ed00
 80088b8:	410fc271 	.word	0x410fc271
 80088bc:	410fc270 	.word	0x410fc270
 80088c0:	e000e400 	.word	0xe000e400
 80088c4:	20000894 	.word	0x20000894
 80088c8:	20000898 	.word	0x20000898
 80088cc:	e000ed20 	.word	0xe000ed20
 80088d0:	20000018 	.word	0x20000018
 80088d4:	e000ef34 	.word	0xe000ef34

080088d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	607b      	str	r3, [r7, #4]
}
 80088f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088f2:	4b10      	ldr	r3, [pc, #64]	@ (8008934 <vPortEnterCritical+0x5c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3301      	adds	r3, #1
 80088f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008934 <vPortEnterCritical+0x5c>)
 80088fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008934 <vPortEnterCritical+0x5c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d110      	bne.n	8008926 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008904:	4b0c      	ldr	r3, [pc, #48]	@ (8008938 <vPortEnterCritical+0x60>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00b      	beq.n	8008926 <vPortEnterCritical+0x4e>
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	603b      	str	r3, [r7, #0]
}
 8008920:	bf00      	nop
 8008922:	bf00      	nop
 8008924:	e7fd      	b.n	8008922 <vPortEnterCritical+0x4a>
	}
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20000018 	.word	0x20000018
 8008938:	e000ed04 	.word	0xe000ed04

0800893c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008942:	4b12      	ldr	r3, [pc, #72]	@ (800898c <vPortExitCritical+0x50>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10b      	bne.n	8008962 <vPortExitCritical+0x26>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	607b      	str	r3, [r7, #4]
}
 800895c:	bf00      	nop
 800895e:	bf00      	nop
 8008960:	e7fd      	b.n	800895e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008962:	4b0a      	ldr	r3, [pc, #40]	@ (800898c <vPortExitCritical+0x50>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3b01      	subs	r3, #1
 8008968:	4a08      	ldr	r2, [pc, #32]	@ (800898c <vPortExitCritical+0x50>)
 800896a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800896c:	4b07      	ldr	r3, [pc, #28]	@ (800898c <vPortExitCritical+0x50>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d105      	bne.n	8008980 <vPortExitCritical+0x44>
 8008974:	2300      	movs	r3, #0
 8008976:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800897e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	20000018 	.word	0x20000018

08008990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008990:	f3ef 8009 	mrs	r0, PSP
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	4b15      	ldr	r3, [pc, #84]	@ (80089f0 <pxCurrentTCBConst>)
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	f01e 0f10 	tst.w	lr, #16
 80089a0:	bf08      	it	eq
 80089a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089aa:	6010      	str	r0, [r2, #0]
 80089ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80089b4:	f380 8811 	msr	BASEPRI, r0
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f7ff fca4 	bl	800830c <vTaskSwitchContext>
 80089c4:	f04f 0000 	mov.w	r0, #0
 80089c8:	f380 8811 	msr	BASEPRI, r0
 80089cc:	bc09      	pop	{r0, r3}
 80089ce:	6819      	ldr	r1, [r3, #0]
 80089d0:	6808      	ldr	r0, [r1, #0]
 80089d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d6:	f01e 0f10 	tst.w	lr, #16
 80089da:	bf08      	it	eq
 80089dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089e0:	f380 8809 	msr	PSP, r0
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	f3af 8000 	nop.w

080089f0 <pxCurrentTCBConst>:
 80089f0:	20000768 	.word	0x20000768
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop

080089f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	607b      	str	r3, [r7, #4]
}
 8008a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a12:	f7ff fbc1 	bl	8008198 <xTaskIncrementTick>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d003      	beq.n	8008a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a1c:	4b06      	ldr	r3, [pc, #24]	@ (8008a38 <xPortSysTickHandler+0x40>)
 8008a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	2300      	movs	r3, #0
 8008a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	f383 8811 	msr	BASEPRI, r3
}
 8008a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	e000ed04 	.word	0xe000ed04

08008a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a40:	4b0b      	ldr	r3, [pc, #44]	@ (8008a70 <vPortSetupTimerInterrupt+0x34>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a46:	4b0b      	ldr	r3, [pc, #44]	@ (8008a74 <vPortSetupTimerInterrupt+0x38>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a78 <vPortSetupTimerInterrupt+0x3c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a0a      	ldr	r2, [pc, #40]	@ (8008a7c <vPortSetupTimerInterrupt+0x40>)
 8008a52:	fba2 2303 	umull	r2, r3, r2, r3
 8008a56:	099b      	lsrs	r3, r3, #6
 8008a58:	4a09      	ldr	r2, [pc, #36]	@ (8008a80 <vPortSetupTimerInterrupt+0x44>)
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a5e:	4b04      	ldr	r3, [pc, #16]	@ (8008a70 <vPortSetupTimerInterrupt+0x34>)
 8008a60:	2207      	movs	r2, #7
 8008a62:	601a      	str	r2, [r3, #0]
}
 8008a64:	bf00      	nop
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	e000e010 	.word	0xe000e010
 8008a74:	e000e018 	.word	0xe000e018
 8008a78:	2000000c 	.word	0x2000000c
 8008a7c:	10624dd3 	.word	0x10624dd3
 8008a80:	e000e014 	.word	0xe000e014

08008a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008a94 <vPortEnableVFP+0x10>
 8008a88:	6801      	ldr	r1, [r0, #0]
 8008a8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008a8e:	6001      	str	r1, [r0, #0]
 8008a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a92:	bf00      	nop
 8008a94:	e000ed88 	.word	0xe000ed88

08008a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08a      	sub	sp, #40	@ 0x28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008aa4:	f7ff fabc 	bl	8008020 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008aa8:	4b5c      	ldr	r3, [pc, #368]	@ (8008c1c <pvPortMalloc+0x184>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ab0:	f000 f924 	bl	8008cfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8008c20 <pvPortMalloc+0x188>)
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4013      	ands	r3, r2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f040 8095 	bne.w	8008bec <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d01e      	beq.n	8008b06 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008ac8:	2208      	movs	r2, #8
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4413      	add	r3, r2
 8008ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f003 0307 	and.w	r3, r3, #7
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d015      	beq.n	8008b06 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f023 0307 	bic.w	r3, r3, #7
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f003 0307 	and.w	r3, r3, #7
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00b      	beq.n	8008b06 <pvPortMalloc+0x6e>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	617b      	str	r3, [r7, #20]
}
 8008b00:	bf00      	nop
 8008b02:	bf00      	nop
 8008b04:	e7fd      	b.n	8008b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d06f      	beq.n	8008bec <pvPortMalloc+0x154>
 8008b0c:	4b45      	ldr	r3, [pc, #276]	@ (8008c24 <pvPortMalloc+0x18c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d86a      	bhi.n	8008bec <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b16:	4b44      	ldr	r3, [pc, #272]	@ (8008c28 <pvPortMalloc+0x190>)
 8008b18:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b1a:	4b43      	ldr	r3, [pc, #268]	@ (8008c28 <pvPortMalloc+0x190>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b20:	e004      	b.n	8008b2c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b24:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d903      	bls.n	8008b3e <pvPortMalloc+0xa6>
 8008b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1f1      	bne.n	8008b22 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b3e:	4b37      	ldr	r3, [pc, #220]	@ (8008c1c <pvPortMalloc+0x184>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d051      	beq.n	8008bec <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2208      	movs	r2, #8
 8008b4e:	4413      	add	r3, r2
 8008b50:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	1ad2      	subs	r2, r2, r3
 8008b62:	2308      	movs	r3, #8
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d920      	bls.n	8008bac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4413      	add	r3, r2
 8008b70:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	f003 0307 	and.w	r3, r3, #7
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00b      	beq.n	8008b94 <pvPortMalloc+0xfc>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	613b      	str	r3, [r7, #16]
}
 8008b8e:	bf00      	nop
 8008b90:	bf00      	nop
 8008b92:	e7fd      	b.n	8008b90 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	1ad2      	subs	r2, r2, r3
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ba6:	69b8      	ldr	r0, [r7, #24]
 8008ba8:	f000 f90a 	bl	8008dc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bac:	4b1d      	ldr	r3, [pc, #116]	@ (8008c24 <pvPortMalloc+0x18c>)
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8008c24 <pvPortMalloc+0x18c>)
 8008bb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bba:	4b1a      	ldr	r3, [pc, #104]	@ (8008c24 <pvPortMalloc+0x18c>)
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8008c2c <pvPortMalloc+0x194>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d203      	bcs.n	8008bce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008bc6:	4b17      	ldr	r3, [pc, #92]	@ (8008c24 <pvPortMalloc+0x18c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a18      	ldr	r2, [pc, #96]	@ (8008c2c <pvPortMalloc+0x194>)
 8008bcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	4b13      	ldr	r3, [pc, #76]	@ (8008c20 <pvPortMalloc+0x188>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008be2:	4b13      	ldr	r3, [pc, #76]	@ (8008c30 <pvPortMalloc+0x198>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3301      	adds	r3, #1
 8008be8:	4a11      	ldr	r2, [pc, #68]	@ (8008c30 <pvPortMalloc+0x198>)
 8008bea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008bec:	f7ff fa26 	bl	800803c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00b      	beq.n	8008c12 <pvPortMalloc+0x17a>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	60fb      	str	r3, [r7, #12]
}
 8008c0c:	bf00      	nop
 8008c0e:	bf00      	nop
 8008c10:	e7fd      	b.n	8008c0e <pvPortMalloc+0x176>
	return pvReturn;
 8008c12:	69fb      	ldr	r3, [r7, #28]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3728      	adds	r7, #40	@ 0x28
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	200044a4 	.word	0x200044a4
 8008c20:	200044b8 	.word	0x200044b8
 8008c24:	200044a8 	.word	0x200044a8
 8008c28:	2000449c 	.word	0x2000449c
 8008c2c:	200044ac 	.word	0x200044ac
 8008c30:	200044b0 	.word	0x200044b0

08008c34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d04f      	beq.n	8008ce6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c46:	2308      	movs	r3, #8
 8008c48:	425b      	negs	r3, r3
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	685a      	ldr	r2, [r3, #4]
 8008c58:	4b25      	ldr	r3, [pc, #148]	@ (8008cf0 <vPortFree+0xbc>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10b      	bne.n	8008c7a <vPortFree+0x46>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	60fb      	str	r3, [r7, #12]
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
 8008c78:	e7fd      	b.n	8008c76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <vPortFree+0x66>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	60bb      	str	r3, [r7, #8]
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop
 8008c98:	e7fd      	b.n	8008c96 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	4b14      	ldr	r3, [pc, #80]	@ (8008cf0 <vPortFree+0xbc>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d01e      	beq.n	8008ce6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d11a      	bne.n	8008ce6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8008cf0 <vPortFree+0xbc>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	401a      	ands	r2, r3
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008cc0:	f7ff f9ae 	bl	8008020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8008cf4 <vPortFree+0xc0>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4413      	add	r3, r2
 8008cce:	4a09      	ldr	r2, [pc, #36]	@ (8008cf4 <vPortFree+0xc0>)
 8008cd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008cd2:	6938      	ldr	r0, [r7, #16]
 8008cd4:	f000 f874 	bl	8008dc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008cd8:	4b07      	ldr	r3, [pc, #28]	@ (8008cf8 <vPortFree+0xc4>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	4a06      	ldr	r2, [pc, #24]	@ (8008cf8 <vPortFree+0xc4>)
 8008ce0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ce2:	f7ff f9ab 	bl	800803c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ce6:	bf00      	nop
 8008ce8:	3718      	adds	r7, #24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	200044b8 	.word	0x200044b8
 8008cf4:	200044a8 	.word	0x200044a8
 8008cf8:	200044b4 	.word	0x200044b4

08008cfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d02:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008d06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d08:	4b27      	ldr	r3, [pc, #156]	@ (8008da8 <prvHeapInit+0xac>)
 8008d0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f003 0307 	and.w	r3, r3, #7
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00c      	beq.n	8008d30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3307      	adds	r3, #7
 8008d1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f023 0307 	bic.w	r3, r3, #7
 8008d22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8008da8 <prvHeapInit+0xac>)
 8008d2c:	4413      	add	r3, r2
 8008d2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d34:	4a1d      	ldr	r2, [pc, #116]	@ (8008dac <prvHeapInit+0xb0>)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8008dac <prvHeapInit+0xb0>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	4413      	add	r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d48:	2208      	movs	r2, #8
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	1a9b      	subs	r3, r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f023 0307 	bic.w	r3, r3, #7
 8008d56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4a15      	ldr	r2, [pc, #84]	@ (8008db0 <prvHeapInit+0xb4>)
 8008d5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d5e:	4b14      	ldr	r3, [pc, #80]	@ (8008db0 <prvHeapInit+0xb4>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2200      	movs	r2, #0
 8008d64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d66:	4b12      	ldr	r3, [pc, #72]	@ (8008db0 <prvHeapInit+0xb4>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	1ad2      	subs	r2, r2, r3
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8008db0 <prvHeapInit+0xb4>)
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	4a0a      	ldr	r2, [pc, #40]	@ (8008db4 <prvHeapInit+0xb8>)
 8008d8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	4a09      	ldr	r2, [pc, #36]	@ (8008db8 <prvHeapInit+0xbc>)
 8008d92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d94:	4b09      	ldr	r3, [pc, #36]	@ (8008dbc <prvHeapInit+0xc0>)
 8008d96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008d9a:	601a      	str	r2, [r3, #0]
}
 8008d9c:	bf00      	nop
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	2000089c 	.word	0x2000089c
 8008dac:	2000449c 	.word	0x2000449c
 8008db0:	200044a4 	.word	0x200044a4
 8008db4:	200044ac 	.word	0x200044ac
 8008db8:	200044a8 	.word	0x200044a8
 8008dbc:	200044b8 	.word	0x200044b8

08008dc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008dc8:	4b28      	ldr	r3, [pc, #160]	@ (8008e6c <prvInsertBlockIntoFreeList+0xac>)
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	e002      	b.n	8008dd4 <prvInsertBlockIntoFreeList+0x14>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d8f7      	bhi.n	8008dce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	4413      	add	r3, r2
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d108      	bne.n	8008e02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	441a      	add	r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	441a      	add	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d118      	bne.n	8008e48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	4b15      	ldr	r3, [pc, #84]	@ (8008e70 <prvInsertBlockIntoFreeList+0xb0>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d00d      	beq.n	8008e3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	441a      	add	r2, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	e008      	b.n	8008e50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008e70 <prvInsertBlockIntoFreeList+0xb0>)
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	601a      	str	r2, [r3, #0]
 8008e46:	e003      	b.n	8008e50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d002      	beq.n	8008e5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e5e:	bf00      	nop
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	2000449c 	.word	0x2000449c
 8008e70:	200044a4 	.word	0x200044a4

08008e74 <i2c_write>:
#include "MPU6050/I2C.h"
#include "i2c.h"

HAL_StatusTypeDef i2c_write(uint8_t slave_addr, uint8_t reg_addr,
    uint8_t length, uint8_t *data) {
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af04      	add	r7, sp, #16
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	71fb      	strb	r3, [r7, #7]
 8008e80:	460b      	mov	r3, r1
 8008e82:	71bb      	strb	r3, [r7, #6]
 8008e84:	4613      	mov	r3, r2
 8008e86:	717b      	strb	r3, [r7, #5]
  return HAL_I2C_Mem_Write(&hi2cMPU6050, slave_addr << 1, reg_addr,
 8008e88:	79fb      	ldrb	r3, [r7, #7]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	b299      	uxth	r1, r3
 8008e90:	79bb      	ldrb	r3, [r7, #6]
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	797b      	ldrb	r3, [r7, #5]
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	200a      	movs	r0, #10
 8008e9a:	9002      	str	r0, [sp, #8]
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	4803      	ldr	r0, [pc, #12]	@ (8008eb4 <i2c_write+0x40>)
 8008ea6:	f7fb ff3b 	bl	8004d20 <HAL_I2C_Mem_Write>
 8008eaa:	4603      	mov	r3, r0
  I2C_MEMADD_SIZE_8BIT, data, length, 10);
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	200005d4 	.word	0x200005d4

08008eb8 <i2c_read>:

HAL_StatusTypeDef i2c_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t length,
    uint8_t *data) {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af04      	add	r7, sp, #16
 8008ebe:	603b      	str	r3, [r7, #0]
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	71fb      	strb	r3, [r7, #7]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	71bb      	strb	r3, [r7, #6]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	717b      	strb	r3, [r7, #5]
  return HAL_I2C_Mem_Read(&hi2cMPU6050, slave_addr << 1, reg_addr,
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	005b      	lsls	r3, r3, #1
 8008ed2:	b299      	uxth	r1, r3
 8008ed4:	79bb      	ldrb	r3, [r7, #6]
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	797b      	ldrb	r3, [r7, #5]
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	200a      	movs	r0, #10
 8008ede:	9002      	str	r0, [sp, #8]
 8008ee0:	9301      	str	r3, [sp, #4]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	4803      	ldr	r0, [pc, #12]	@ (8008ef8 <i2c_read+0x40>)
 8008eea:	f7fc f813 	bl	8004f14 <HAL_I2C_Mem_Read>
 8008eee:	4603      	mov	r3, r0
  I2C_MEMADD_SIZE_8BIT, data, length, 10);

}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	200005d4 	.word	0x200005d4

08008efc <IICwriteBit>:

HAL_StatusTypeDef IICwriteBit(uint8_t slave_addr, uint8_t reg_addr,
    uint8_t bitNum, uint8_t data) {
 8008efc:	b590      	push	{r4, r7, lr}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4604      	mov	r4, r0
 8008f04:	4608      	mov	r0, r1
 8008f06:	4611      	mov	r1, r2
 8008f08:	461a      	mov	r2, r3
 8008f0a:	4623      	mov	r3, r4
 8008f0c:	71fb      	strb	r3, [r7, #7]
 8008f0e:	4603      	mov	r3, r0
 8008f10:	71bb      	strb	r3, [r7, #6]
 8008f12:	460b      	mov	r3, r1
 8008f14:	717b      	strb	r3, [r7, #5]
 8008f16:	4613      	mov	r3, r2
 8008f18:	713b      	strb	r3, [r7, #4]
  uint8_t tmp;
  i2c_read(slave_addr, reg_addr, 1, &tmp);
 8008f1a:	f107 030f 	add.w	r3, r7, #15
 8008f1e:	79b9      	ldrb	r1, [r7, #6]
 8008f20:	79f8      	ldrb	r0, [r7, #7]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f7ff ffc8 	bl	8008eb8 <i2c_read>
  tmp = (data != 0) ? (tmp | (1 << bitNum)) : (tmp & ~(1 << bitNum));
 8008f28:	793b      	ldrb	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00a      	beq.n	8008f44 <IICwriteBit+0x48>
 8008f2e:	797b      	ldrb	r3, [r7, #5]
 8008f30:	2201      	movs	r2, #1
 8008f32:	fa02 f303 	lsl.w	r3, r2, r3
 8008f36:	b25a      	sxtb	r2, r3
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	b25b      	sxtb	r3, r3
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	b25b      	sxtb	r3, r3
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	e00b      	b.n	8008f5c <IICwriteBit+0x60>
 8008f44:	797b      	ldrb	r3, [r7, #5]
 8008f46:	2201      	movs	r2, #1
 8008f48:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4c:	b25b      	sxtb	r3, r3
 8008f4e:	43db      	mvns	r3, r3
 8008f50:	b25a      	sxtb	r2, r3
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	b25b      	sxtb	r3, r3
 8008f56:	4013      	ands	r3, r2
 8008f58:	b25b      	sxtb	r3, r3
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	73fb      	strb	r3, [r7, #15]
  return i2c_write(slave_addr, reg_addr, 1, &tmp);
 8008f5e:	f107 030f 	add.w	r3, r7, #15
 8008f62:	79b9      	ldrb	r1, [r7, #6]
 8008f64:	79f8      	ldrb	r0, [r7, #7]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f7ff ff84 	bl	8008e74 <i2c_write>
 8008f6c:	4603      	mov	r3, r0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd90      	pop	{r4, r7, pc}

08008f76 <IICwriteBits>:
;

HAL_StatusTypeDef IICwriteBits(uint8_t slave_addr, uint8_t reg_addr,
    uint8_t bitStart, uint8_t length, uint8_t data) {
 8008f76:	b590      	push	{r4, r7, lr}
 8008f78:	b085      	sub	sp, #20
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	4608      	mov	r0, r1
 8008f80:	4611      	mov	r1, r2
 8008f82:	461a      	mov	r2, r3
 8008f84:	4623      	mov	r3, r4
 8008f86:	71fb      	strb	r3, [r7, #7]
 8008f88:	4603      	mov	r3, r0
 8008f8a:	71bb      	strb	r3, [r7, #6]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	717b      	strb	r3, [r7, #5]
 8008f90:	4613      	mov	r3, r2
 8008f92:	713b      	strb	r3, [r7, #4]

  uint8_t tmp, dataShift;
  HAL_StatusTypeDef status = i2c_read(slave_addr, reg_addr, 1, &tmp);
 8008f94:	f107 030c 	add.w	r3, r7, #12
 8008f98:	79b9      	ldrb	r1, [r7, #6]
 8008f9a:	79f8      	ldrb	r0, [r7, #7]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f7ff ff8b 	bl	8008eb8 <i2c_read>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK) {
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d127      	bne.n	8008ffc <IICwriteBits+0x86>
    uint8_t mask = (((1 << length) - 1) << (bitStart - length + 1));
 8008fac:	793b      	ldrb	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb4:	1e5a      	subs	r2, r3, #1
 8008fb6:	7979      	ldrb	r1, [r7, #5]
 8008fb8:	793b      	ldrb	r3, [r7, #4]
 8008fba:	1acb      	subs	r3, r1, r3
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc2:	73bb      	strb	r3, [r7, #14]
    dataShift = data << (bitStart - length + 1);
 8008fc4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008fc8:	7979      	ldrb	r1, [r7, #5]
 8008fca:	793b      	ldrb	r3, [r7, #4]
 8008fcc:	1acb      	subs	r3, r1, r3
 8008fce:	3301      	adds	r3, #1
 8008fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd4:	737b      	strb	r3, [r7, #13]
    tmp &= mask;
 8008fd6:	7b3a      	ldrb	r2, [r7, #12]
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	4013      	ands	r3, r2
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	733b      	strb	r3, [r7, #12]
    tmp |= dataShift;
 8008fe0:	7b3a      	ldrb	r2, [r7, #12]
 8008fe2:	7b7b      	ldrb	r3, [r7, #13]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	733b      	strb	r3, [r7, #12]
    return i2c_write(slave_addr, reg_addr, 1, &tmp);
 8008fea:	f107 030c 	add.w	r3, r7, #12
 8008fee:	79b9      	ldrb	r1, [r7, #6]
 8008ff0:	79f8      	ldrb	r0, [r7, #7]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f7ff ff3e 	bl	8008e74 <i2c_write>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	e000      	b.n	8008ffe <IICwriteBits+0x88>
  } else {
    return status;
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3714      	adds	r7, #20
 8009002:	46bd      	mov	sp, r7
 8009004:	bd90      	pop	{r4, r7, pc}

08009006 <reg_int_cb>:

#define fabs        fabsf
#define min(a,b) ((a<b)?a:b)

static inline int reg_int_cb(struct int_param_s *int_param)
{
 8009006:	b480      	push	{r7}
 8009008:	b083      	sub	sp, #12
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  UNUSED(int_param);
    return 0;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	4603      	mov	r3, r0
 8009024:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8009026:	4b29      	ldr	r3, [pc, #164]	@ (80090cc <set_int_enable+0xb0>)
 8009028:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800902c:	2b00      	cmp	r3, #0
 800902e:	d01c      	beq.n	800906a <set_int_enable+0x4e>
        if (enable)
 8009030:	79fb      	ldrb	r3, [r7, #7]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d002      	beq.n	800903c <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8009036:	2302      	movs	r3, #2
 8009038:	73fb      	strb	r3, [r7, #15]
 800903a:	e001      	b.n	8009040 <set_int_enable+0x24>
        else
            tmp = 0x00;
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8009040:	4b22      	ldr	r3, [pc, #136]	@ (80090cc <set_int_enable+0xb0>)
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	7818      	ldrb	r0, [r3, #0]
 8009046:	4b21      	ldr	r3, [pc, #132]	@ (80090cc <set_int_enable+0xb0>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	7c59      	ldrb	r1, [r3, #17]
 800904c:	f107 030f 	add.w	r3, r7, #15
 8009050:	2201      	movs	r2, #1
 8009052:	f7ff ff0f 	bl	8008e74 <i2c_write>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <set_int_enable+0x46>
            return -1;
 800905c:	f04f 33ff 	mov.w	r3, #4294967295
 8009060:	e030      	b.n	80090c4 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8009062:	7bfa      	ldrb	r2, [r7, #15]
 8009064:	4b19      	ldr	r3, [pc, #100]	@ (80090cc <set_int_enable+0xb0>)
 8009066:	745a      	strb	r2, [r3, #17]
 8009068:	e02b      	b.n	80090c2 <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 800906a:	4b18      	ldr	r3, [pc, #96]	@ (80090cc <set_int_enable+0xb0>)
 800906c:	7a9b      	ldrb	r3, [r3, #10]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d102      	bne.n	8009078 <set_int_enable+0x5c>
            return -1;
 8009072:	f04f 33ff 	mov.w	r3, #4294967295
 8009076:	e025      	b.n	80090c4 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8009078:	79fb      	ldrb	r3, [r7, #7]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d005      	beq.n	800908a <set_int_enable+0x6e>
 800907e:	4b13      	ldr	r3, [pc, #76]	@ (80090cc <set_int_enable+0xb0>)
 8009080:	7c5b      	ldrb	r3, [r3, #17]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <set_int_enable+0x6e>
            return 0;
 8009086:	2300      	movs	r3, #0
 8009088:	e01c      	b.n	80090c4 <set_int_enable+0xa8>
        if (enable)
 800908a:	79fb      	ldrb	r3, [r7, #7]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8009090:	2301      	movs	r3, #1
 8009092:	73fb      	strb	r3, [r7, #15]
 8009094:	e001      	b.n	800909a <set_int_enable+0x7e>
        else
            tmp = 0x00;
 8009096:	2300      	movs	r3, #0
 8009098:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800909a:	4b0c      	ldr	r3, [pc, #48]	@ (80090cc <set_int_enable+0xb0>)
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	7818      	ldrb	r0, [r3, #0]
 80090a0:	4b0a      	ldr	r3, [pc, #40]	@ (80090cc <set_int_enable+0xb0>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	7c59      	ldrb	r1, [r3, #17]
 80090a6:	f107 030f 	add.w	r3, r7, #15
 80090aa:	2201      	movs	r2, #1
 80090ac:	f7ff fee2 	bl	8008e74 <i2c_write>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d002      	beq.n	80090bc <set_int_enable+0xa0>
            return -1;
 80090b6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ba:	e003      	b.n	80090c4 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 80090bc:	7bfa      	ldrb	r2, [r7, #15]
 80090be:	4b03      	ldr	r3, [pc, #12]	@ (80090cc <set_int_enable+0xb0>)
 80090c0:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	2000001c 	.word	0x2000001c

080090d0 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = BIT_RESET;
 80090d8:	2380      	movs	r3, #128	@ 0x80
 80090da:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80090dc:	4b81      	ldr	r3, [pc, #516]	@ (80092e4 <mpu_init+0x214>)
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	7818      	ldrb	r0, [r3, #0]
 80090e2:	4b80      	ldr	r3, [pc, #512]	@ (80092e4 <mpu_init+0x214>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	7d59      	ldrb	r1, [r3, #21]
 80090e8:	f107 0308 	add.w	r3, r7, #8
 80090ec:	2201      	movs	r2, #1
 80090ee:	f7ff fec1 	bl	8008e74 <i2c_write>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <mpu_init+0x2e>
        return -1;
 80090f8:	f04f 33ff 	mov.w	r3, #4294967295
 80090fc:	e0ed      	b.n	80092da <mpu_init+0x20a>
    delay_ms(100);
 80090fe:	2064      	movs	r0, #100	@ 0x64
 8009100:	f7fb f924 	bl	800434c <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 8009104:	2300      	movs	r3, #0
 8009106:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8009108:	4b76      	ldr	r3, [pc, #472]	@ (80092e4 <mpu_init+0x214>)
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	7818      	ldrb	r0, [r3, #0]
 800910e:	4b75      	ldr	r3, [pc, #468]	@ (80092e4 <mpu_init+0x214>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	7d59      	ldrb	r1, [r3, #21]
 8009114:	f107 0308 	add.w	r3, r7, #8
 8009118:	2201      	movs	r2, #1
 800911a:	f7ff feab 	bl	8008e74 <i2c_write>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <mpu_init+0x5a>
        return -1;
 8009124:	f04f 33ff 	mov.w	r3, #4294967295
 8009128:	e0d7      	b.n	80092da <mpu_init+0x20a>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 800912a:	4b6e      	ldr	r3, [pc, #440]	@ (80092e4 <mpu_init+0x214>)
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	7818      	ldrb	r0, [r3, #0]
 8009130:	4b6c      	ldr	r3, [pc, #432]	@ (80092e4 <mpu_init+0x214>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	7e59      	ldrb	r1, [r3, #25]
 8009136:	f107 0308 	add.w	r3, r7, #8
 800913a:	2206      	movs	r2, #6
 800913c:	f7ff febc 	bl	8008eb8 <i2c_read>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <mpu_init+0x7c>
        return -1;
 8009146:	f04f 33ff 	mov.w	r3, #4294967295
 800914a:	e0c6      	b.n	80092da <mpu_init+0x20a>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 800914c:	7b7b      	ldrb	r3, [r7, #13]
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	b25b      	sxtb	r3, r3
 8009152:	f003 0304 	and.w	r3, r3, #4
 8009156:	b25a      	sxtb	r2, r3
 8009158:	7afb      	ldrb	r3, [r7, #11]
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	b25b      	sxtb	r3, r3
 800915e:	f003 0302 	and.w	r3, r3, #2
 8009162:	b25b      	sxtb	r3, r3
 8009164:	4313      	orrs	r3, r2
 8009166:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 8009168:	7a7b      	ldrb	r3, [r7, #9]
 800916a:	b25b      	sxtb	r3, r3
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8009172:	4313      	orrs	r3, r2
 8009174:	b25b      	sxtb	r3, r3
 8009176:	73fb      	strb	r3, [r7, #15]

    if (rev) {
 8009178:	7bfb      	ldrb	r3, [r7, #15]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d010      	beq.n	80091a0 <mpu_init+0xd0>
        /* Congrats, these parts are better. */
        if (rev == 1)
 800917e:	7bfb      	ldrb	r3, [r7, #15]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d103      	bne.n	800918c <mpu_init+0xbc>
            st.chip_cfg.accel_half = 1;
 8009184:	4b57      	ldr	r3, [pc, #348]	@ (80092e4 <mpu_init+0x214>)
 8009186:	2201      	movs	r2, #1
 8009188:	74da      	strb	r2, [r3, #19]
 800918a:	e02e      	b.n	80091ea <mpu_init+0x11a>
        else if (rev == 2)
 800918c:	7bfb      	ldrb	r3, [r7, #15]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d103      	bne.n	800919a <mpu_init+0xca>
            st.chip_cfg.accel_half = 0;
 8009192:	4b54      	ldr	r3, [pc, #336]	@ (80092e4 <mpu_init+0x214>)
 8009194:	2200      	movs	r2, #0
 8009196:	74da      	strb	r2, [r3, #19]
 8009198:	e027      	b.n	80091ea <mpu_init+0x11a>
        else {
//            log_e("Unsupported software product rev %d.\n", rev);
            return -1;
 800919a:	f04f 33ff 	mov.w	r3, #4294967295
 800919e:	e09c      	b.n	80092da <mpu_init+0x20a>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, data))
 80091a0:	4b50      	ldr	r3, [pc, #320]	@ (80092e4 <mpu_init+0x214>)
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	7818      	ldrb	r0, [r3, #0]
 80091a6:	4b4f      	ldr	r3, [pc, #316]	@ (80092e4 <mpu_init+0x214>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	78d9      	ldrb	r1, [r3, #3]
 80091ac:	f107 0308 	add.w	r3, r7, #8
 80091b0:	2201      	movs	r2, #1
 80091b2:	f7ff fe81 	bl	8008eb8 <i2c_read>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <mpu_init+0xf2>
            return -1;
 80091bc:	f04f 33ff 	mov.w	r3, #4294967295
 80091c0:	e08b      	b.n	80092da <mpu_init+0x20a>
        rev = data[0] & 0x0F;
 80091c2:	7a3b      	ldrb	r3, [r7, #8]
 80091c4:	f003 030f 	and.w	r3, r3, #15
 80091c8:	73fb      	strb	r3, [r7, #15]
        if (!rev) {
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d102      	bne.n	80091d6 <mpu_init+0x106>
//            log_e("Product ID read as 0 indicates device is either "
//                "incompatible or an MPU3050.\n");
            return -1;
 80091d0:	f04f 33ff 	mov.w	r3, #4294967295
 80091d4:	e081      	b.n	80092da <mpu_init+0x20a>
        } else if (rev == 4) {
 80091d6:	7bfb      	ldrb	r3, [r7, #15]
 80091d8:	2b04      	cmp	r3, #4
 80091da:	d103      	bne.n	80091e4 <mpu_init+0x114>
//            log_i("Half sensitivity part found.\n");
            st.chip_cfg.accel_half = 1;
 80091dc:	4b41      	ldr	r3, [pc, #260]	@ (80092e4 <mpu_init+0x214>)
 80091de:	2201      	movs	r2, #1
 80091e0:	74da      	strb	r2, [r3, #19]
 80091e2:	e002      	b.n	80091ea <mpu_init+0x11a>
        } else
            st.chip_cfg.accel_half = 0;
 80091e4:	4b3f      	ldr	r3, [pc, #252]	@ (80092e4 <mpu_init+0x214>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 80091ea:	4b3e      	ldr	r3, [pc, #248]	@ (80092e4 <mpu_init+0x214>)
 80091ec:	22ff      	movs	r2, #255	@ 0xff
 80091ee:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 80091f0:	4b3c      	ldr	r3, [pc, #240]	@ (80092e4 <mpu_init+0x214>)
 80091f2:	22ff      	movs	r2, #255	@ 0xff
 80091f4:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80091f6:	4b3b      	ldr	r3, [pc, #236]	@ (80092e4 <mpu_init+0x214>)
 80091f8:	22ff      	movs	r2, #255	@ 0xff
 80091fa:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 80091fc:	4b39      	ldr	r3, [pc, #228]	@ (80092e4 <mpu_init+0x214>)
 80091fe:	22ff      	movs	r2, #255	@ 0xff
 8009200:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8009202:	4b38      	ldr	r3, [pc, #224]	@ (80092e4 <mpu_init+0x214>)
 8009204:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009208:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 800920a:	4b36      	ldr	r3, [pc, #216]	@ (80092e4 <mpu_init+0x214>)
 800920c:	22ff      	movs	r2, #255	@ 0xff
 800920e:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8009210:	4b34      	ldr	r3, [pc, #208]	@ (80092e4 <mpu_init+0x214>)
 8009212:	22ff      	movs	r2, #255	@ 0xff
 8009214:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8009216:	4b33      	ldr	r3, [pc, #204]	@ (80092e4 <mpu_init+0x214>)
 8009218:	2201      	movs	r2, #1
 800921a:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 800921c:	4b31      	ldr	r3, [pc, #196]	@ (80092e4 <mpu_init+0x214>)
 800921e:	2201      	movs	r2, #1
 8009220:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    st.chip_cfg.latched_int = 0;
 8009224:	4b2f      	ldr	r3, [pc, #188]	@ (80092e4 <mpu_init+0x214>)
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    st.chip_cfg.int_motion_only = 0;
 800922c:	4b2d      	ldr	r3, [pc, #180]	@ (80092e4 <mpu_init+0x214>)
 800922e:	2200      	movs	r2, #0
 8009230:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8009232:	4b2c      	ldr	r3, [pc, #176]	@ (80092e4 <mpu_init+0x214>)
 8009234:	2200      	movs	r2, #0
 8009236:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8009238:	220c      	movs	r2, #12
 800923a:	2100      	movs	r1, #0
 800923c:	482a      	ldr	r0, [pc, #168]	@ (80092e8 <mpu_init+0x218>)
 800923e:	f004 fa8d 	bl	800d75c <memset>
    st.chip_cfg.dmp_on = 0;
 8009242:	4b28      	ldr	r3, [pc, #160]	@ (80092e4 <mpu_init+0x214>)
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    st.chip_cfg.dmp_loaded = 0;
 800924a:	4b26      	ldr	r3, [pc, #152]	@ (80092e4 <mpu_init+0x214>)
 800924c:	2200      	movs	r2, #0
 800924e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8009252:	4b24      	ldr	r3, [pc, #144]	@ (80092e4 <mpu_init+0x214>)
 8009254:	2200      	movs	r2, #0
 8009256:	84da      	strh	r2, [r3, #38]	@ 0x26

    if (mpu_set_gyro_fsr(2000))
 8009258:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800925c:	f000 f9fa 	bl	8009654 <mpu_set_gyro_fsr>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d002      	beq.n	800926c <mpu_init+0x19c>
        return -1;
 8009266:	f04f 33ff 	mov.w	r3, #4294967295
 800926a:	e036      	b.n	80092da <mpu_init+0x20a>
    if (mpu_set_accel_fsr(2))
 800926c:	2002      	movs	r0, #2
 800926e:	f000 fa7f 	bl	8009770 <mpu_set_accel_fsr>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d002      	beq.n	800927e <mpu_init+0x1ae>
        return -1;
 8009278:	f04f 33ff 	mov.w	r3, #4294967295
 800927c:	e02d      	b.n	80092da <mpu_init+0x20a>
    if (mpu_set_lpf(42))
 800927e:	202a      	movs	r0, #42	@ 0x2a
 8009280:	f000 fb1c 	bl	80098bc <mpu_set_lpf>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <mpu_init+0x1c0>
        return -1;
 800928a:	f04f 33ff 	mov.w	r3, #4294967295
 800928e:	e024      	b.n	80092da <mpu_init+0x20a>
    if (mpu_set_sample_rate(50))
 8009290:	2032      	movs	r0, #50	@ 0x32
 8009292:	f000 fb7b 	bl	800998c <mpu_set_sample_rate>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d002      	beq.n	80092a2 <mpu_init+0x1d2>
        return -1;
 800929c:	f04f 33ff 	mov.w	r3, #4294967295
 80092a0:	e01b      	b.n	80092da <mpu_init+0x20a>
    if (mpu_configure_fifo(0))
 80092a2:	2000      	movs	r0, #0
 80092a4:	f000 fc60 	bl	8009b68 <mpu_configure_fifo>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <mpu_init+0x1e4>
        return -1;
 80092ae:	f04f 33ff 	mov.w	r3, #4294967295
 80092b2:	e012      	b.n	80092da <mpu_init+0x20a>

    if (int_param)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d002      	beq.n	80092c0 <mpu_init+0x1f0>
        reg_int_cb(int_param);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7ff fea3 	bl	8009006 <reg_int_cb>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 80092c0:	2000      	movs	r0, #0
 80092c2:	f000 fda7 	bl	8009e14 <mpu_set_bypass>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d002      	beq.n	80092d2 <mpu_init+0x202>
        return -1;
 80092cc:	f04f 33ff 	mov.w	r3, #4294967295
 80092d0:	e003      	b.n	80092da <mpu_init+0x20a>
#endif

    mpu_set_sensors(0);
 80092d2:	2000      	movs	r0, #0
 80092d4:	f000 fc9a 	bl	8009c0c <mpu_set_sensors>
    return 0;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	2000001c 	.word	0x2000001c
 80092e8:	20000032 	.word	0x20000032

080092ec <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	2b28      	cmp	r3, #40	@ 0x28
 80092fa:	d902      	bls.n	8009302 <mpu_lp_accel_mode+0x16>
        return -1;
 80092fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009300:	e06a      	b.n	80093d8 <mpu_lp_accel_mode+0xec>

    if (!rate) {
 8009302:	79fb      	ldrb	r3, [r7, #7]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d11c      	bne.n	8009342 <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 8009308:	2000      	movs	r0, #0
 800930a:	f000 fe49 	bl	8009fa0 <mpu_set_int_latched>
        tmp[0] = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8009312:	2307      	movs	r3, #7
 8009314:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8009316:	4b32      	ldr	r3, [pc, #200]	@ (80093e0 <mpu_lp_accel_mode+0xf4>)
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	7818      	ldrb	r0, [r3, #0]
 800931c:	4b30      	ldr	r3, [pc, #192]	@ (80093e0 <mpu_lp_accel_mode+0xf4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	7d59      	ldrb	r1, [r3, #21]
 8009322:	f107 030c 	add.w	r3, r7, #12
 8009326:	2202      	movs	r2, #2
 8009328:	f7ff fda4 	bl	8008e74 <i2c_write>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d002      	beq.n	8009338 <mpu_lp_accel_mode+0x4c>
            return -1;
 8009332:	f04f 33ff 	mov.w	r3, #4294967295
 8009336:	e04f      	b.n	80093d8 <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 8009338:	4b29      	ldr	r3, [pc, #164]	@ (80093e0 <mpu_lp_accel_mode+0xf4>)
 800933a:	2200      	movs	r2, #0
 800933c:	751a      	strb	r2, [r3, #20]
        return 0;
 800933e:	2300      	movs	r3, #0
 8009340:	e04a      	b.n	80093d8 <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8009342:	2001      	movs	r0, #1
 8009344:	f000 fe2c 	bl	8009fa0 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8009348:	2320      	movs	r3, #32
 800934a:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 800934c:	79fb      	ldrb	r3, [r7, #7]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d105      	bne.n	800935e <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
 8009352:	2300      	movs	r3, #0
 8009354:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8009356:	2005      	movs	r0, #5
 8009358:	f000 fab0 	bl	80098bc <mpu_set_lpf>
 800935c:	e016      	b.n	800938c <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
 800935e:	79fb      	ldrb	r3, [r7, #7]
 8009360:	2b05      	cmp	r3, #5
 8009362:	d805      	bhi.n	8009370 <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
 8009364:	2301      	movs	r3, #1
 8009366:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8009368:	2005      	movs	r0, #5
 800936a:	f000 faa7 	bl	80098bc <mpu_set_lpf>
 800936e:	e00d      	b.n	800938c <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	2b14      	cmp	r3, #20
 8009374:	d805      	bhi.n	8009382 <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
 8009376:	2302      	movs	r3, #2
 8009378:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 800937a:	200a      	movs	r0, #10
 800937c:	f000 fa9e 	bl	80098bc <mpu_set_lpf>
 8009380:	e004      	b.n	800938c <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8009382:	2303      	movs	r3, #3
 8009384:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8009386:	2014      	movs	r0, #20
 8009388:	f000 fa98 	bl	80098bc <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 800938c:	7b7b      	ldrb	r3, [r7, #13]
 800938e:	019b      	lsls	r3, r3, #6
 8009390:	b25b      	sxtb	r3, r3
 8009392:	f043 0307 	orr.w	r3, r3, #7
 8009396:	b25b      	sxtb	r3, r3
 8009398:	b2db      	uxtb	r3, r3
 800939a:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800939c:	4b10      	ldr	r3, [pc, #64]	@ (80093e0 <mpu_lp_accel_mode+0xf4>)
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	7818      	ldrb	r0, [r3, #0]
 80093a2:	4b0f      	ldr	r3, [pc, #60]	@ (80093e0 <mpu_lp_accel_mode+0xf4>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	7d59      	ldrb	r1, [r3, #21]
 80093a8:	f107 030c 	add.w	r3, r7, #12
 80093ac:	2202      	movs	r2, #2
 80093ae:	f7ff fd61 	bl	8008e74 <i2c_write>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <mpu_lp_accel_mode+0xd2>
        return -1;
 80093b8:	f04f 33ff 	mov.w	r3, #4294967295
 80093bc:	e00c      	b.n	80093d8 <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 80093be:	4b08      	ldr	r3, [pc, #32]	@ (80093e0 <mpu_lp_accel_mode+0xf4>)
 80093c0:	2208      	movs	r2, #8
 80093c2:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 80093c4:	4b06      	ldr	r3, [pc, #24]	@ (80093e0 <mpu_lp_accel_mode+0xf4>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 80093ca:	4b05      	ldr	r3, [pc, #20]	@ (80093e0 <mpu_lp_accel_mode+0xf4>)
 80093cc:	2201      	movs	r2, #1
 80093ce:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 80093d0:	2000      	movs	r0, #0
 80093d2:	f000 fbc9 	bl	8009b68 <mpu_configure_fifo>

    return 0;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	2000001c 	.word	0x2000001c

080093e4 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80093ea:	4b7e      	ldr	r3, [pc, #504]	@ (80095e4 <mpu_reset_fifo+0x200>)
 80093ec:	7a9b      	ldrb	r3, [r3, #10]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d102      	bne.n	80093f8 <mpu_reset_fifo+0x14>
        return -1;
 80093f2:	f04f 33ff 	mov.w	r3, #4294967295
 80093f6:	e0f1      	b.n	80095dc <mpu_reset_fifo+0x1f8>

    data = 0;
 80093f8:	2300      	movs	r3, #0
 80093fa:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80093fc:	4b79      	ldr	r3, [pc, #484]	@ (80095e4 <mpu_reset_fifo+0x200>)
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	7818      	ldrb	r0, [r3, #0]
 8009402:	4b78      	ldr	r3, [pc, #480]	@ (80095e4 <mpu_reset_fifo+0x200>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	7c59      	ldrb	r1, [r3, #17]
 8009408:	1dfb      	adds	r3, r7, #7
 800940a:	2201      	movs	r2, #1
 800940c:	f7ff fd32 	bl	8008e74 <i2c_write>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d002      	beq.n	800941c <mpu_reset_fifo+0x38>
        return -1;
 8009416:	f04f 33ff 	mov.w	r3, #4294967295
 800941a:	e0df      	b.n	80095dc <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800941c:	4b71      	ldr	r3, [pc, #452]	@ (80095e4 <mpu_reset_fifo+0x200>)
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	7818      	ldrb	r0, [r3, #0]
 8009422:	4b70      	ldr	r3, [pc, #448]	@ (80095e4 <mpu_reset_fifo+0x200>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	7959      	ldrb	r1, [r3, #5]
 8009428:	1dfb      	adds	r3, r7, #7
 800942a:	2201      	movs	r2, #1
 800942c:	f7ff fd22 	bl	8008e74 <i2c_write>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d002      	beq.n	800943c <mpu_reset_fifo+0x58>
        return -1;
 8009436:	f04f 33ff 	mov.w	r3, #4294967295
 800943a:	e0cf      	b.n	80095dc <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800943c:	4b69      	ldr	r3, [pc, #420]	@ (80095e4 <mpu_reset_fifo+0x200>)
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	7818      	ldrb	r0, [r3, #0]
 8009442:	4b68      	ldr	r3, [pc, #416]	@ (80095e4 <mpu_reset_fifo+0x200>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	7919      	ldrb	r1, [r3, #4]
 8009448:	1dfb      	adds	r3, r7, #7
 800944a:	2201      	movs	r2, #1
 800944c:	f7ff fd12 	bl	8008e74 <i2c_write>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d002      	beq.n	800945c <mpu_reset_fifo+0x78>
        return -1;
 8009456:	f04f 33ff 	mov.w	r3, #4294967295
 800945a:	e0bf      	b.n	80095dc <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 800945c:	4b61      	ldr	r3, [pc, #388]	@ (80095e4 <mpu_reset_fifo+0x200>)
 800945e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009462:	2b00      	cmp	r3, #0
 8009464:	d05c      	beq.n	8009520 <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8009466:	230c      	movs	r3, #12
 8009468:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800946a:	4b5e      	ldr	r3, [pc, #376]	@ (80095e4 <mpu_reset_fifo+0x200>)
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	7818      	ldrb	r0, [r3, #0]
 8009470:	4b5c      	ldr	r3, [pc, #368]	@ (80095e4 <mpu_reset_fifo+0x200>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	7919      	ldrb	r1, [r3, #4]
 8009476:	1dfb      	adds	r3, r7, #7
 8009478:	2201      	movs	r2, #1
 800947a:	f7ff fcfb 	bl	8008e74 <i2c_write>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <mpu_reset_fifo+0xa6>
            return -1;
 8009484:	f04f 33ff 	mov.w	r3, #4294967295
 8009488:	e0a8      	b.n	80095dc <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 800948a:	2032      	movs	r0, #50	@ 0x32
 800948c:	f7fa ff5e 	bl	800434c <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8009490:	23c0      	movs	r3, #192	@ 0xc0
 8009492:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8009494:	4b53      	ldr	r3, [pc, #332]	@ (80095e4 <mpu_reset_fifo+0x200>)
 8009496:	7a9b      	ldrb	r3, [r3, #10]
 8009498:	f003 0301 	and.w	r3, r3, #1
 800949c:	2b00      	cmp	r3, #0
 800949e:	d004      	beq.n	80094aa <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	f043 0320 	orr.w	r3, r3, #32
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80094aa:	4b4e      	ldr	r3, [pc, #312]	@ (80095e4 <mpu_reset_fifo+0x200>)
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	7818      	ldrb	r0, [r3, #0]
 80094b0:	4b4c      	ldr	r3, [pc, #304]	@ (80095e4 <mpu_reset_fifo+0x200>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	7919      	ldrb	r1, [r3, #4]
 80094b6:	1dfb      	adds	r3, r7, #7
 80094b8:	2201      	movs	r2, #1
 80094ba:	f7ff fcdb 	bl	8008e74 <i2c_write>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <mpu_reset_fifo+0xe6>
            return -1;
 80094c4:	f04f 33ff 	mov.w	r3, #4294967295
 80094c8:	e088      	b.n	80095dc <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 80094ca:	4b46      	ldr	r3, [pc, #280]	@ (80095e4 <mpu_reset_fifo+0x200>)
 80094cc:	7c5b      	ldrb	r3, [r3, #17]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d002      	beq.n	80094d8 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 80094d2:	2302      	movs	r3, #2
 80094d4:	71fb      	strb	r3, [r7, #7]
 80094d6:	e001      	b.n	80094dc <mpu_reset_fifo+0xf8>
        else
            data = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80094dc:	4b41      	ldr	r3, [pc, #260]	@ (80095e4 <mpu_reset_fifo+0x200>)
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	7818      	ldrb	r0, [r3, #0]
 80094e2:	4b40      	ldr	r3, [pc, #256]	@ (80095e4 <mpu_reset_fifo+0x200>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	7c59      	ldrb	r1, [r3, #17]
 80094e8:	1dfb      	adds	r3, r7, #7
 80094ea:	2201      	movs	r2, #1
 80094ec:	f7ff fcc2 	bl	8008e74 <i2c_write>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <mpu_reset_fifo+0x118>
            return -1;
 80094f6:	f04f 33ff 	mov.w	r3, #4294967295
 80094fa:	e06f      	b.n	80095dc <mpu_reset_fifo+0x1f8>
        data = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8009500:	4b38      	ldr	r3, [pc, #224]	@ (80095e4 <mpu_reset_fifo+0x200>)
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	7818      	ldrb	r0, [r3, #0]
 8009506:	4b37      	ldr	r3, [pc, #220]	@ (80095e4 <mpu_reset_fifo+0x200>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	7959      	ldrb	r1, [r3, #5]
 800950c:	1dfb      	adds	r3, r7, #7
 800950e:	2201      	movs	r2, #1
 8009510:	f7ff fcb0 	bl	8008e74 <i2c_write>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d05f      	beq.n	80095da <mpu_reset_fifo+0x1f6>
            return -1;
 800951a:	f04f 33ff 	mov.w	r3, #4294967295
 800951e:	e05d      	b.n	80095dc <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 8009520:	2304      	movs	r3, #4
 8009522:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8009524:	4b2f      	ldr	r3, [pc, #188]	@ (80095e4 <mpu_reset_fifo+0x200>)
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	7818      	ldrb	r0, [r3, #0]
 800952a:	4b2e      	ldr	r3, [pc, #184]	@ (80095e4 <mpu_reset_fifo+0x200>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	7919      	ldrb	r1, [r3, #4]
 8009530:	1dfb      	adds	r3, r7, #7
 8009532:	2201      	movs	r2, #1
 8009534:	f7ff fc9e 	bl	8008e74 <i2c_write>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d002      	beq.n	8009544 <mpu_reset_fifo+0x160>
            return -1;
 800953e:	f04f 33ff 	mov.w	r3, #4294967295
 8009542:	e04b      	b.n	80095dc <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8009544:	4b27      	ldr	r3, [pc, #156]	@ (80095e4 <mpu_reset_fifo+0x200>)
 8009546:	7c9b      	ldrb	r3, [r3, #18]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d105      	bne.n	8009558 <mpu_reset_fifo+0x174>
 800954c:	4b25      	ldr	r3, [pc, #148]	@ (80095e4 <mpu_reset_fifo+0x200>)
 800954e:	7a9b      	ldrb	r3, [r3, #10]
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	2b00      	cmp	r3, #0
 8009556:	d102      	bne.n	800955e <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 8009558:	2340      	movs	r3, #64	@ 0x40
 800955a:	71fb      	strb	r3, [r7, #7]
 800955c:	e001      	b.n	8009562 <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 800955e:	2360      	movs	r3, #96	@ 0x60
 8009560:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8009562:	4b20      	ldr	r3, [pc, #128]	@ (80095e4 <mpu_reset_fifo+0x200>)
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	7818      	ldrb	r0, [r3, #0]
 8009568:	4b1e      	ldr	r3, [pc, #120]	@ (80095e4 <mpu_reset_fifo+0x200>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	7919      	ldrb	r1, [r3, #4]
 800956e:	1dfb      	adds	r3, r7, #7
 8009570:	2201      	movs	r2, #1
 8009572:	f7ff fc7f 	bl	8008e74 <i2c_write>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <mpu_reset_fifo+0x19e>
            return -1;
 800957c:	f04f 33ff 	mov.w	r3, #4294967295
 8009580:	e02c      	b.n	80095dc <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8009582:	2032      	movs	r0, #50	@ 0x32
 8009584:	f7fa fee2 	bl	800434c <HAL_Delay>
        if (st.chip_cfg.int_enable)
 8009588:	4b16      	ldr	r3, [pc, #88]	@ (80095e4 <mpu_reset_fifo+0x200>)
 800958a:	7c5b      	ldrb	r3, [r3, #17]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 8009590:	2301      	movs	r3, #1
 8009592:	71fb      	strb	r3, [r7, #7]
 8009594:	e001      	b.n	800959a <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 8009596:	2300      	movs	r3, #0
 8009598:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800959a:	4b12      	ldr	r3, [pc, #72]	@ (80095e4 <mpu_reset_fifo+0x200>)
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	7818      	ldrb	r0, [r3, #0]
 80095a0:	4b10      	ldr	r3, [pc, #64]	@ (80095e4 <mpu_reset_fifo+0x200>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	7c59      	ldrb	r1, [r3, #17]
 80095a6:	1dfb      	adds	r3, r7, #7
 80095a8:	2201      	movs	r2, #1
 80095aa:	f7ff fc63 	bl	8008e74 <i2c_write>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <mpu_reset_fifo+0x1d6>
            return -1;
 80095b4:	f04f 33ff 	mov.w	r3, #4294967295
 80095b8:	e010      	b.n	80095dc <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 80095ba:	4b0a      	ldr	r3, [pc, #40]	@ (80095e4 <mpu_reset_fifo+0x200>)
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	7818      	ldrb	r0, [r3, #0]
 80095c0:	4b08      	ldr	r3, [pc, #32]	@ (80095e4 <mpu_reset_fifo+0x200>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	7959      	ldrb	r1, [r3, #5]
 80095c6:	4b08      	ldr	r3, [pc, #32]	@ (80095e8 <mpu_reset_fifo+0x204>)
 80095c8:	2201      	movs	r2, #1
 80095ca:	f7ff fc53 	bl	8008e74 <i2c_write>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d002      	beq.n	80095da <mpu_reset_fifo+0x1f6>
            return -1;
 80095d4:	f04f 33ff 	mov.w	r3, #4294967295
 80095d8:	e000      	b.n	80095dc <mpu_reset_fifo+0x1f8>
    }
    return 0;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	2000001c 	.word	0x2000001c
 80095e8:	2000002c 	.word	0x2000002c

080095ec <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80095f4:	4b16      	ldr	r3, [pc, #88]	@ (8009650 <mpu_get_gyro_fsr+0x64>)
 80095f6:	7a1b      	ldrb	r3, [r3, #8]
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d81e      	bhi.n	800963a <mpu_get_gyro_fsr+0x4e>
 80095fc:	a201      	add	r2, pc, #4	@ (adr r2, 8009604 <mpu_get_gyro_fsr+0x18>)
 80095fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009602:	bf00      	nop
 8009604:	08009615 	.word	0x08009615
 8009608:	0800961d 	.word	0x0800961d
 800960c:	08009627 	.word	0x08009627
 8009610:	08009631 	.word	0x08009631
    case INV_FSR_250DPS:
        fsr[0] = 250;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	22fa      	movs	r2, #250	@ 0xfa
 8009618:	801a      	strh	r2, [r3, #0]
        break;
 800961a:	e012      	b.n	8009642 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8009622:	801a      	strh	r2, [r3, #0]
        break;
 8009624:	e00d      	b.n	8009642 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800962c:	801a      	strh	r2, [r3, #0]
        break;
 800962e:	e008      	b.n	8009642 <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8009636:	801a      	strh	r2, [r3, #0]
        break;
 8009638:	e003      	b.n	8009642 <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	801a      	strh	r2, [r3, #0]
        break;
 8009640:	bf00      	nop
    }
    return 0;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	2000001c 	.word	0x2000001c

08009654 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	4603      	mov	r3, r0
 800965c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800965e:	4b26      	ldr	r3, [pc, #152]	@ (80096f8 <mpu_set_gyro_fsr+0xa4>)
 8009660:	7a9b      	ldrb	r3, [r3, #10]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d102      	bne.n	800966c <mpu_set_gyro_fsr+0x18>
        return -1;
 8009666:	f04f 33ff 	mov.w	r3, #4294967295
 800966a:	e041      	b.n	80096f0 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 800966c:	88fb      	ldrh	r3, [r7, #6]
 800966e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009672:	d017      	beq.n	80096a4 <mpu_set_gyro_fsr+0x50>
 8009674:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009678:	dc17      	bgt.n	80096aa <mpu_set_gyro_fsr+0x56>
 800967a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800967e:	d00e      	beq.n	800969e <mpu_set_gyro_fsr+0x4a>
 8009680:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009684:	dc11      	bgt.n	80096aa <mpu_set_gyro_fsr+0x56>
 8009686:	2bfa      	cmp	r3, #250	@ 0xfa
 8009688:	d003      	beq.n	8009692 <mpu_set_gyro_fsr+0x3e>
 800968a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800968e:	d003      	beq.n	8009698 <mpu_set_gyro_fsr+0x44>
 8009690:	e00b      	b.n	80096aa <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8009692:	2300      	movs	r3, #0
 8009694:	73fb      	strb	r3, [r7, #15]
        break;
 8009696:	e00b      	b.n	80096b0 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8009698:	2308      	movs	r3, #8
 800969a:	73fb      	strb	r3, [r7, #15]
        break;
 800969c:	e008      	b.n	80096b0 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800969e:	2310      	movs	r3, #16
 80096a0:	73fb      	strb	r3, [r7, #15]
        break;
 80096a2:	e005      	b.n	80096b0 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 80096a4:	2318      	movs	r3, #24
 80096a6:	73fb      	strb	r3, [r7, #15]
        break;
 80096a8:	e002      	b.n	80096b0 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 80096aa:	f04f 33ff 	mov.w	r3, #4294967295
 80096ae:	e01f      	b.n	80096f0 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 80096b0:	4b11      	ldr	r3, [pc, #68]	@ (80096f8 <mpu_set_gyro_fsr+0xa4>)
 80096b2:	7a1a      	ldrb	r2, [r3, #8]
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	08db      	lsrs	r3, r3, #3
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d101      	bne.n	80096c2 <mpu_set_gyro_fsr+0x6e>
        return 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	e016      	b.n	80096f0 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 80096c2:	4b0d      	ldr	r3, [pc, #52]	@ (80096f8 <mpu_set_gyro_fsr+0xa4>)
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	7818      	ldrb	r0, [r3, #0]
 80096c8:	4b0b      	ldr	r3, [pc, #44]	@ (80096f8 <mpu_set_gyro_fsr+0xa4>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	7999      	ldrb	r1, [r3, #6]
 80096ce:	f107 030f 	add.w	r3, r7, #15
 80096d2:	2201      	movs	r2, #1
 80096d4:	f7ff fbce 	bl	8008e74 <i2c_write>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <mpu_set_gyro_fsr+0x90>
        return -1;
 80096de:	f04f 33ff 	mov.w	r3, #4294967295
 80096e2:	e005      	b.n	80096f0 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
 80096e6:	08db      	lsrs	r3, r3, #3
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	4b03      	ldr	r3, [pc, #12]	@ (80096f8 <mpu_set_gyro_fsr+0xa4>)
 80096ec:	721a      	strb	r2, [r3, #8]
    return 0;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	2000001c 	.word	0x2000001c

080096fc <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8009704:	4b19      	ldr	r3, [pc, #100]	@ (800976c <mpu_get_accel_fsr+0x70>)
 8009706:	7a5b      	ldrb	r3, [r3, #9]
 8009708:	2b03      	cmp	r3, #3
 800970a:	d81b      	bhi.n	8009744 <mpu_get_accel_fsr+0x48>
 800970c:	a201      	add	r2, pc, #4	@ (adr r2, 8009714 <mpu_get_accel_fsr+0x18>)
 800970e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009712:	bf00      	nop
 8009714:	08009725 	.word	0x08009725
 8009718:	0800972d 	.word	0x0800972d
 800971c:	08009735 	.word	0x08009735
 8009720:	0800973d 	.word	0x0800973d
    case INV_FSR_2G:
        fsr[0] = 2;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2202      	movs	r2, #2
 8009728:	701a      	strb	r2, [r3, #0]
        break;
 800972a:	e00e      	b.n	800974a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2204      	movs	r2, #4
 8009730:	701a      	strb	r2, [r3, #0]
        break;
 8009732:	e00a      	b.n	800974a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2208      	movs	r2, #8
 8009738:	701a      	strb	r2, [r3, #0]
        break;
 800973a:	e006      	b.n	800974a <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2210      	movs	r2, #16
 8009740:	701a      	strb	r2, [r3, #0]
        break;
 8009742:	e002      	b.n	800974a <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8009744:	f04f 33ff 	mov.w	r3, #4294967295
 8009748:	e00a      	b.n	8009760 <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 800974a:	4b08      	ldr	r3, [pc, #32]	@ (800976c <mpu_get_accel_fsr+0x70>)
 800974c:	7cdb      	ldrb	r3, [r3, #19]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d005      	beq.n	800975e <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	005b      	lsls	r3, r3, #1
 8009758:	b2da      	uxtb	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	701a      	strb	r2, [r3, #0]
    return 0;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	2000001c 	.word	0x2000001c

08009770 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800977a:	4b30      	ldr	r3, [pc, #192]	@ (800983c <mpu_set_accel_fsr+0xcc>)
 800977c:	7a9b      	ldrb	r3, [r3, #10]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d102      	bne.n	8009788 <mpu_set_accel_fsr+0x18>
        return -1;
 8009782:	f04f 33ff 	mov.w	r3, #4294967295
 8009786:	e054      	b.n	8009832 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 8009788:	79fb      	ldrb	r3, [r7, #7]
 800978a:	3b02      	subs	r3, #2
 800978c:	2b0e      	cmp	r3, #14
 800978e:	d82d      	bhi.n	80097ec <mpu_set_accel_fsr+0x7c>
 8009790:	a201      	add	r2, pc, #4	@ (adr r2, 8009798 <mpu_set_accel_fsr+0x28>)
 8009792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009796:	bf00      	nop
 8009798:	080097d5 	.word	0x080097d5
 800979c:	080097ed 	.word	0x080097ed
 80097a0:	080097db 	.word	0x080097db
 80097a4:	080097ed 	.word	0x080097ed
 80097a8:	080097ed 	.word	0x080097ed
 80097ac:	080097ed 	.word	0x080097ed
 80097b0:	080097e1 	.word	0x080097e1
 80097b4:	080097ed 	.word	0x080097ed
 80097b8:	080097ed 	.word	0x080097ed
 80097bc:	080097ed 	.word	0x080097ed
 80097c0:	080097ed 	.word	0x080097ed
 80097c4:	080097ed 	.word	0x080097ed
 80097c8:	080097ed 	.word	0x080097ed
 80097cc:	080097ed 	.word	0x080097ed
 80097d0:	080097e7 	.word	0x080097e7
    case 2:
        data = INV_FSR_2G << 3;
 80097d4:	2300      	movs	r3, #0
 80097d6:	73fb      	strb	r3, [r7, #15]
        break;
 80097d8:	e00b      	b.n	80097f2 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 80097da:	2308      	movs	r3, #8
 80097dc:	73fb      	strb	r3, [r7, #15]
        break;
 80097de:	e008      	b.n	80097f2 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 80097e0:	2310      	movs	r3, #16
 80097e2:	73fb      	strb	r3, [r7, #15]
        break;
 80097e4:	e005      	b.n	80097f2 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 80097e6:	2318      	movs	r3, #24
 80097e8:	73fb      	strb	r3, [r7, #15]
        break;
 80097ea:	e002      	b.n	80097f2 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 80097ec:	f04f 33ff 	mov.w	r3, #4294967295
 80097f0:	e01f      	b.n	8009832 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 80097f2:	4b12      	ldr	r3, [pc, #72]	@ (800983c <mpu_set_accel_fsr+0xcc>)
 80097f4:	7a5a      	ldrb	r2, [r3, #9]
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
 80097f8:	08db      	lsrs	r3, r3, #3
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d101      	bne.n	8009804 <mpu_set_accel_fsr+0x94>
        return 0;
 8009800:	2300      	movs	r3, #0
 8009802:	e016      	b.n	8009832 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8009804:	4b0d      	ldr	r3, [pc, #52]	@ (800983c <mpu_set_accel_fsr+0xcc>)
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	7818      	ldrb	r0, [r3, #0]
 800980a:	4b0c      	ldr	r3, [pc, #48]	@ (800983c <mpu_set_accel_fsr+0xcc>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	79d9      	ldrb	r1, [r3, #7]
 8009810:	f107 030f 	add.w	r3, r7, #15
 8009814:	2201      	movs	r2, #1
 8009816:	f7ff fb2d 	bl	8008e74 <i2c_write>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <mpu_set_accel_fsr+0xb6>
        return -1;
 8009820:	f04f 33ff 	mov.w	r3, #4294967295
 8009824:	e005      	b.n	8009832 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 8009826:	7bfb      	ldrb	r3, [r7, #15]
 8009828:	08db      	lsrs	r3, r3, #3
 800982a:	b2da      	uxtb	r2, r3
 800982c:	4b03      	ldr	r3, [pc, #12]	@ (800983c <mpu_set_accel_fsr+0xcc>)
 800982e:	725a      	strb	r2, [r3, #9]
    return 0;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	2000001c 	.word	0x2000001c

08009840 <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 8009848:	4b1b      	ldr	r3, [pc, #108]	@ (80098b8 <mpu_get_lpf+0x78>)
 800984a:	7adb      	ldrb	r3, [r3, #11]
 800984c:	3b01      	subs	r3, #1
 800984e:	2b05      	cmp	r3, #5
 8009850:	d826      	bhi.n	80098a0 <mpu_get_lpf+0x60>
 8009852:	a201      	add	r2, pc, #4	@ (adr r2, 8009858 <mpu_get_lpf+0x18>)
 8009854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009858:	08009871 	.word	0x08009871
 800985c:	08009879 	.word	0x08009879
 8009860:	08009881 	.word	0x08009881
 8009864:	08009889 	.word	0x08009889
 8009868:	08009891 	.word	0x08009891
 800986c:	08009899 	.word	0x08009899
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	22bc      	movs	r2, #188	@ 0xbc
 8009874:	801a      	strh	r2, [r3, #0]
        break;
 8009876:	e017      	b.n	80098a8 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2262      	movs	r2, #98	@ 0x62
 800987c:	801a      	strh	r2, [r3, #0]
        break;
 800987e:	e013      	b.n	80098a8 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	222a      	movs	r2, #42	@ 0x2a
 8009884:	801a      	strh	r2, [r3, #0]
        break;
 8009886:	e00f      	b.n	80098a8 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2214      	movs	r2, #20
 800988c:	801a      	strh	r2, [r3, #0]
        break;
 800988e:	e00b      	b.n	80098a8 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	220a      	movs	r2, #10
 8009894:	801a      	strh	r2, [r3, #0]
        break;
 8009896:	e007      	b.n	80098a8 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2205      	movs	r2, #5
 800989c:	801a      	strh	r2, [r3, #0]
        break;
 800989e:	e003      	b.n	80098a8 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	801a      	strh	r2, [r3, #0]
        break;
 80098a6:	bf00      	nop
    }
    return 0;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	2000001c 	.word	0x2000001c

080098bc <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80098c6:	4b23      	ldr	r3, [pc, #140]	@ (8009954 <mpu_set_lpf+0x98>)
 80098c8:	7a9b      	ldrb	r3, [r3, #10]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d102      	bne.n	80098d4 <mpu_set_lpf+0x18>
        return -1;
 80098ce:	f04f 33ff 	mov.w	r3, #4294967295
 80098d2:	e03b      	b.n	800994c <mpu_set_lpf+0x90>

    if (lpf >= 188)
 80098d4:	88fb      	ldrh	r3, [r7, #6]
 80098d6:	2bbb      	cmp	r3, #187	@ 0xbb
 80098d8:	d902      	bls.n	80098e0 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 80098da:	2301      	movs	r3, #1
 80098dc:	73fb      	strb	r3, [r7, #15]
 80098de:	e019      	b.n	8009914 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 80098e0:	88fb      	ldrh	r3, [r7, #6]
 80098e2:	2b61      	cmp	r3, #97	@ 0x61
 80098e4:	d902      	bls.n	80098ec <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 80098e6:	2302      	movs	r3, #2
 80098e8:	73fb      	strb	r3, [r7, #15]
 80098ea:	e013      	b.n	8009914 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 80098ec:	88fb      	ldrh	r3, [r7, #6]
 80098ee:	2b29      	cmp	r3, #41	@ 0x29
 80098f0:	d902      	bls.n	80098f8 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 80098f2:	2303      	movs	r3, #3
 80098f4:	73fb      	strb	r3, [r7, #15]
 80098f6:	e00d      	b.n	8009914 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 80098f8:	88fb      	ldrh	r3, [r7, #6]
 80098fa:	2b13      	cmp	r3, #19
 80098fc:	d902      	bls.n	8009904 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 80098fe:	2304      	movs	r3, #4
 8009900:	73fb      	strb	r3, [r7, #15]
 8009902:	e007      	b.n	8009914 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8009904:	88fb      	ldrh	r3, [r7, #6]
 8009906:	2b09      	cmp	r3, #9
 8009908:	d902      	bls.n	8009910 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 800990a:	2305      	movs	r3, #5
 800990c:	73fb      	strb	r3, [r7, #15]
 800990e:	e001      	b.n	8009914 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8009910:	2306      	movs	r3, #6
 8009912:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8009914:	4b0f      	ldr	r3, [pc, #60]	@ (8009954 <mpu_set_lpf+0x98>)
 8009916:	7ada      	ldrb	r2, [r3, #11]
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	429a      	cmp	r2, r3
 800991c:	d101      	bne.n	8009922 <mpu_set_lpf+0x66>
        return 0;
 800991e:	2300      	movs	r3, #0
 8009920:	e014      	b.n	800994c <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8009922:	4b0c      	ldr	r3, [pc, #48]	@ (8009954 <mpu_set_lpf+0x98>)
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	7818      	ldrb	r0, [r3, #0]
 8009928:	4b0a      	ldr	r3, [pc, #40]	@ (8009954 <mpu_set_lpf+0x98>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	7899      	ldrb	r1, [r3, #2]
 800992e:	f107 030f 	add.w	r3, r7, #15
 8009932:	2201      	movs	r2, #1
 8009934:	f7ff fa9e 	bl	8008e74 <i2c_write>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <mpu_set_lpf+0x88>
        return -1;
 800993e:	f04f 33ff 	mov.w	r3, #4294967295
 8009942:	e003      	b.n	800994c <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 8009944:	7bfa      	ldrb	r2, [r7, #15]
 8009946:	4b03      	ldr	r3, [pc, #12]	@ (8009954 <mpu_set_lpf+0x98>)
 8009948:	72da      	strb	r2, [r3, #11]
    return 0;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	2000001c 	.word	0x2000001c

08009958 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8009960:	4b09      	ldr	r3, [pc, #36]	@ (8009988 <mpu_get_sample_rate+0x30>)
 8009962:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009966:	2b00      	cmp	r3, #0
 8009968:	d002      	beq.n	8009970 <mpu_get_sample_rate+0x18>
        return -1;
 800996a:	f04f 33ff 	mov.w	r3, #4294967295
 800996e:	e004      	b.n	800997a <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8009970:	4b05      	ldr	r3, [pc, #20]	@ (8009988 <mpu_get_sample_rate+0x30>)
 8009972:	89da      	ldrh	r2, [r3, #14]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	801a      	strh	r2, [r3, #0]
    return 0;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	2000001c 	.word	0x2000001c

0800998c <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8009996:	4b2f      	ldr	r3, [pc, #188]	@ (8009a54 <mpu_set_sample_rate+0xc8>)
 8009998:	7a9b      	ldrb	r3, [r3, #10]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d102      	bne.n	80099a4 <mpu_set_sample_rate+0x18>
        return -1;
 800999e:	f04f 33ff 	mov.w	r3, #4294967295
 80099a2:	e053      	b.n	8009a4c <mpu_set_sample_rate+0xc0>

    if (st.chip_cfg.dmp_on)
 80099a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009a54 <mpu_set_sample_rate+0xc8>)
 80099a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <mpu_set_sample_rate+0x28>
        return -1;
 80099ae:	f04f 33ff 	mov.w	r3, #4294967295
 80099b2:	e04b      	b.n	8009a4c <mpu_set_sample_rate+0xc0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 80099b4:	4b27      	ldr	r3, [pc, #156]	@ (8009a54 <mpu_set_sample_rate+0xc8>)
 80099b6:	7d1b      	ldrb	r3, [r3, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00f      	beq.n	80099dc <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 80099bc:	88fb      	ldrh	r3, [r7, #6]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d009      	beq.n	80099d6 <mpu_set_sample_rate+0x4a>
 80099c2:	88fb      	ldrh	r3, [r7, #6]
 80099c4:	2b28      	cmp	r3, #40	@ 0x28
 80099c6:	d806      	bhi.n	80099d6 <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 80099c8:	88fb      	ldrh	r3, [r7, #6]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fc8d 	bl	80092ec <mpu_lp_accel_mode>
                return 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	e03a      	b.n	8009a4c <mpu_set_sample_rate+0xc0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 80099d6:	2000      	movs	r0, #0
 80099d8:	f7ff fc88 	bl	80092ec <mpu_lp_accel_mode>
        }
        if (rate < 4)
 80099dc:	88fb      	ldrh	r3, [r7, #6]
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d802      	bhi.n	80099e8 <mpu_set_sample_rate+0x5c>
            rate = 4;
 80099e2:	2304      	movs	r3, #4
 80099e4:	80fb      	strh	r3, [r7, #6]
 80099e6:	e006      	b.n	80099f6 <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 80099e8:	88fb      	ldrh	r3, [r7, #6]
 80099ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80099ee:	d902      	bls.n	80099f6 <mpu_set_sample_rate+0x6a>
            rate = 1000;
 80099f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80099f4:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 80099f6:	88fb      	ldrh	r3, [r7, #6]
 80099f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80099fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	3b01      	subs	r3, #1
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8009a08:	4b12      	ldr	r3, [pc, #72]	@ (8009a54 <mpu_set_sample_rate+0xc8>)
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	7818      	ldrb	r0, [r3, #0]
 8009a0e:	4b11      	ldr	r3, [pc, #68]	@ (8009a54 <mpu_set_sample_rate+0xc8>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	7859      	ldrb	r1, [r3, #1]
 8009a14:	f107 030f 	add.w	r3, r7, #15
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f7ff fa2b 	bl	8008e74 <i2c_write>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <mpu_set_sample_rate+0x9e>
            return -1;
 8009a24:	f04f 33ff 	mov.w	r3, #4294967295
 8009a28:	e010      	b.n	8009a4c <mpu_set_sample_rate+0xc0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	4b06      	ldr	r3, [pc, #24]	@ (8009a54 <mpu_set_sample_rate+0xc8>)
 8009a3a:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8009a3c:	4b05      	ldr	r3, [pc, #20]	@ (8009a54 <mpu_set_sample_rate+0xc8>)
 8009a3e:	89db      	ldrh	r3, [r3, #14]
 8009a40:	085b      	lsrs	r3, r3, #1
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7ff ff39 	bl	80098bc <mpu_set_lpf>
        return 0;
 8009a4a:	2300      	movs	r3, #0
    }
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	2000001c 	.word	0x2000001c

08009a58 <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8009a60:	4b14      	ldr	r3, [pc, #80]	@ (8009ab4 <mpu_get_gyro_sens+0x5c>)
 8009a62:	7a1b      	ldrb	r3, [r3, #8]
 8009a64:	2b03      	cmp	r3, #3
 8009a66:	d81b      	bhi.n	8009aa0 <mpu_get_gyro_sens+0x48>
 8009a68:	a201      	add	r2, pc, #4	@ (adr r2, 8009a70 <mpu_get_gyro_sens+0x18>)
 8009a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6e:	bf00      	nop
 8009a70:	08009a81 	.word	0x08009a81
 8009a74:	08009a89 	.word	0x08009a89
 8009a78:	08009a91 	.word	0x08009a91
 8009a7c:	08009a99 	.word	0x08009a99
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a0d      	ldr	r2, [pc, #52]	@ (8009ab8 <mpu_get_gyro_sens+0x60>)
 8009a84:	601a      	str	r2, [r3, #0]
        break;
 8009a86:	e00e      	b.n	8009aa6 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8009abc <mpu_get_gyro_sens+0x64>)
 8009a8c:	601a      	str	r2, [r3, #0]
        break;
 8009a8e:	e00a      	b.n	8009aa6 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a0b      	ldr	r2, [pc, #44]	@ (8009ac0 <mpu_get_gyro_sens+0x68>)
 8009a94:	601a      	str	r2, [r3, #0]
        break;
 8009a96:	e006      	b.n	8009aa6 <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8009ac4 <mpu_get_gyro_sens+0x6c>)
 8009a9c:	601a      	str	r2, [r3, #0]
        break;
 8009a9e:	e002      	b.n	8009aa6 <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 8009aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa4:	e000      	b.n	8009aa8 <mpu_get_gyro_sens+0x50>
    }
    return 0;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr
 8009ab4:	2000001c 	.word	0x2000001c
 8009ab8:	43030000 	.word	0x43030000
 8009abc:	42830000 	.word	0x42830000
 8009ac0:	42033333 	.word	0x42033333
 8009ac4:	41833333 	.word	0x41833333

08009ac8 <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8009ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8009b40 <mpu_get_accel_sens+0x78>)
 8009ad2:	7a5b      	ldrb	r3, [r3, #9]
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	d81f      	bhi.n	8009b18 <mpu_get_accel_sens+0x50>
 8009ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae0 <mpu_get_accel_sens+0x18>)
 8009ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ade:	bf00      	nop
 8009ae0:	08009af1 	.word	0x08009af1
 8009ae4:	08009afb 	.word	0x08009afb
 8009ae8:	08009b05 	.word	0x08009b05
 8009aec:	08009b0f 	.word	0x08009b0f
    case INV_FSR_2G:
        sens[0] = 16384;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009af6:	801a      	strh	r2, [r3, #0]
        break;
 8009af8:	e011      	b.n	8009b1e <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f641 729c 	movw	r2, #8092	@ 0x1f9c
 8009b00:	801a      	strh	r2, [r3, #0]
        break;
 8009b02:	e00c      	b.n	8009b1e <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009b0a:	801a      	strh	r2, [r3, #0]
        break;
 8009b0c:	e007      	b.n	8009b1e <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b14:	801a      	strh	r2, [r3, #0]
        break;
 8009b16:	e002      	b.n	8009b1e <mpu_get_accel_sens+0x56>
    default:
        return -1;
 8009b18:	f04f 33ff 	mov.w	r3, #4294967295
 8009b1c:	e00a      	b.n	8009b34 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8009b1e:	4b08      	ldr	r3, [pc, #32]	@ (8009b40 <mpu_get_accel_sens+0x78>)
 8009b20:	7cdb      	ldrb	r3, [r3, #19]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d005      	beq.n	8009b32 <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	085b      	lsrs	r3, r3, #1
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	801a      	strh	r2, [r3, #0]
    return 0;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	2000001c 	.word	0x2000001c

08009b44 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8009b4c:	4b05      	ldr	r3, [pc, #20]	@ (8009b64 <mpu_get_fifo_config+0x20>)
 8009b4e:	7c1a      	ldrb	r2, [r3, #16]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	701a      	strb	r2, [r3, #0]
    return 0;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	2000001c 	.word	0x2000001c

08009b68 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8009b76:	79fb      	ldrb	r3, [r7, #7]
 8009b78:	f023 0301 	bic.w	r3, r3, #1
 8009b7c:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 8009b7e:	4b22      	ldr	r3, [pc, #136]	@ (8009c08 <mpu_configure_fifo+0xa0>)
 8009b80:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <mpu_configure_fifo+0x24>
        return 0;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	e038      	b.n	8009bfe <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 8009b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8009c08 <mpu_configure_fifo+0xa0>)
 8009b8e:	7a9b      	ldrb	r3, [r3, #10]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d102      	bne.n	8009b9a <mpu_configure_fifo+0x32>
            return -1;
 8009b94:	f04f 33ff 	mov.w	r3, #4294967295
 8009b98:	e031      	b.n	8009bfe <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 8009b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8009c08 <mpu_configure_fifo+0xa0>)
 8009b9c:	7c1b      	ldrb	r3, [r3, #16]
 8009b9e:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8009ba0:	4b19      	ldr	r3, [pc, #100]	@ (8009c08 <mpu_configure_fifo+0xa0>)
 8009ba2:	7a9a      	ldrb	r2, [r3, #10]
 8009ba4:	79fb      	ldrb	r3, [r7, #7]
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	4b17      	ldr	r3, [pc, #92]	@ (8009c08 <mpu_configure_fifo+0xa0>)
 8009bac:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8009bae:	4b16      	ldr	r3, [pc, #88]	@ (8009c08 <mpu_configure_fifo+0xa0>)
 8009bb0:	7c1b      	ldrb	r3, [r3, #16]
 8009bb2:	79fa      	ldrb	r2, [r7, #7]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d003      	beq.n	8009bc0 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8009bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bbc:	60fb      	str	r3, [r7, #12]
 8009bbe:	e001      	b.n	8009bc4 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 8009bc4:	79fb      	ldrb	r3, [r7, #7]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d103      	bne.n	8009bd2 <mpu_configure_fifo+0x6a>
 8009bca:	4b0f      	ldr	r3, [pc, #60]	@ (8009c08 <mpu_configure_fifo+0xa0>)
 8009bcc:	7d1b      	ldrb	r3, [r3, #20]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d003      	beq.n	8009bda <mpu_configure_fifo+0x72>
            set_int_enable(1);
 8009bd2:	2001      	movs	r0, #1
 8009bd4:	f7ff fa22 	bl	800901c <set_int_enable>
 8009bd8:	e002      	b.n	8009be0 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 8009bda:	2000      	movs	r0, #0
 8009bdc:	f7ff fa1e 	bl	800901c <set_int_enable>
        if (sensors) {
 8009be0:	79fb      	ldrb	r3, [r7, #7]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00a      	beq.n	8009bfc <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8009be6:	f7ff fbfd 	bl	80093e4 <mpu_reset_fifo>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d005      	beq.n	8009bfc <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8009bf0:	4a05      	ldr	r2, [pc, #20]	@ (8009c08 <mpu_configure_fifo+0xa0>)
 8009bf2:	7afb      	ldrb	r3, [r7, #11]
 8009bf4:	7413      	strb	r3, [r2, #16]
                return -1;
 8009bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfa:	e000      	b.n	8009bfe <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	2000001c 	.word	0x2000001c

08009c0c <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8009c16:	79fb      	ldrb	r3, [r7, #7]
 8009c18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d002      	beq.n	8009c26 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8009c20:	2301      	movs	r3, #1
 8009c22:	73fb      	strb	r3, [r7, #15]
 8009c24:	e007      	b.n	8009c36 <mpu_set_sensors+0x2a>
    else if (sensors)
 8009c26:	79fb      	ldrb	r3, [r7, #7]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <mpu_set_sensors+0x26>
        data = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73fb      	strb	r3, [r7, #15]
 8009c30:	e001      	b.n	8009c36 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8009c32:	2340      	movs	r3, #64	@ 0x40
 8009c34:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8009c36:	4b37      	ldr	r3, [pc, #220]	@ (8009d14 <mpu_set_sensors+0x108>)
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	7818      	ldrb	r0, [r3, #0]
 8009c3c:	4b35      	ldr	r3, [pc, #212]	@ (8009d14 <mpu_set_sensors+0x108>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	7d59      	ldrb	r1, [r3, #21]
 8009c42:	f107 030f 	add.w	r3, r7, #15
 8009c46:	2201      	movs	r2, #1
 8009c48:	f7ff f914 	bl	8008e74 <i2c_write>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d005      	beq.n	8009c5e <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 8009c52:	4b30      	ldr	r3, [pc, #192]	@ (8009d14 <mpu_set_sensors+0x108>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	729a      	strb	r2, [r3, #10]
        return -1;
 8009c58:	f04f 33ff 	mov.w	r3, #4294967295
 8009c5c:	e056      	b.n	8009d0c <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
 8009c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	4b2b      	ldr	r3, [pc, #172]	@ (8009d14 <mpu_set_sensors+0x108>)
 8009c68:	731a      	strb	r2, [r3, #12]

    data = 0;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 8009c6e:	79fb      	ldrb	r3, [r7, #7]
 8009c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d104      	bne.n	8009c82 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	f043 0304 	orr.w	r3, r3, #4
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8009c82:	79fb      	ldrb	r3, [r7, #7]
 8009c84:	f003 0320 	and.w	r3, r3, #32
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d104      	bne.n	8009c96 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
 8009c8e:	f043 0302 	orr.w	r3, r3, #2
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8009c96:	79fb      	ldrb	r3, [r7, #7]
 8009c98:	f003 0310 	and.w	r3, r3, #16
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d104      	bne.n	8009caa <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
 8009ca2:	f043 0301 	orr.w	r3, r3, #1
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 8009caa:	79fb      	ldrb	r3, [r7, #7]
 8009cac:	f003 0308 	and.w	r3, r3, #8
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d104      	bne.n	8009cbe <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
 8009cb6:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8009cbe:	4b15      	ldr	r3, [pc, #84]	@ (8009d14 <mpu_set_sensors+0x108>)
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	7818      	ldrb	r0, [r3, #0]
 8009cc4:	4b13      	ldr	r3, [pc, #76]	@ (8009d14 <mpu_set_sensors+0x108>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	7d99      	ldrb	r1, [r3, #22]
 8009cca:	f107 030f 	add.w	r3, r7, #15
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f7ff f8d0 	bl	8008e74 <i2c_write>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d005      	beq.n	8009ce6 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 8009cda:	4b0e      	ldr	r3, [pc, #56]	@ (8009d14 <mpu_set_sensors+0x108>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	729a      	strb	r2, [r3, #10]
        return -1;
 8009ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce4:	e012      	b.n	8009d0c <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d005      	beq.n	8009cf8 <mpu_set_sensors+0xec>
 8009cec:	79fb      	ldrb	r3, [r7, #7]
 8009cee:	2b08      	cmp	r3, #8
 8009cf0:	d002      	beq.n	8009cf8 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	f000 f954 	bl	8009fa0 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 8009cf8:	4a06      	ldr	r2, [pc, #24]	@ (8009d14 <mpu_set_sensors+0x108>)
 8009cfa:	79fb      	ldrb	r3, [r7, #7]
 8009cfc:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8009cfe:	4b05      	ldr	r3, [pc, #20]	@ (8009d14 <mpu_set_sensors+0x108>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8009d04:	2032      	movs	r0, #50	@ 0x32
 8009d06:	f7fa fb21 	bl	800434c <HAL_Delay>
    return 0;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	2000001c 	.word	0x2000001c

08009d18 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8009d26:	4b3a      	ldr	r3, [pc, #232]	@ (8009e10 <mpu_read_fifo_stream+0xf8>)
 8009d28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d102      	bne.n	8009d36 <mpu_read_fifo_stream+0x1e>
        return -1;
 8009d30:	f04f 33ff 	mov.w	r3, #4294967295
 8009d34:	e068      	b.n	8009e08 <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
 8009d36:	4b36      	ldr	r3, [pc, #216]	@ (8009e10 <mpu_read_fifo_stream+0xf8>)
 8009d38:	7a9b      	ldrb	r3, [r3, #10]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d102      	bne.n	8009d44 <mpu_read_fifo_stream+0x2c>
        return -1;
 8009d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d42:	e061      	b.n	8009e08 <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8009d44:	4b32      	ldr	r3, [pc, #200]	@ (8009e10 <mpu_read_fifo_stream+0xf8>)
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	7818      	ldrb	r0, [r3, #0]
 8009d4a:	4b31      	ldr	r3, [pc, #196]	@ (8009e10 <mpu_read_fifo_stream+0xf8>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	7b19      	ldrb	r1, [r3, #12]
 8009d50:	f107 0314 	add.w	r3, r7, #20
 8009d54:	2202      	movs	r2, #2
 8009d56:	f7ff f8af 	bl	8008eb8 <i2c_read>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <mpu_read_fifo_stream+0x4e>
        return -1;
 8009d60:	f04f 33ff 	mov.w	r3, #4294967295
 8009d64:	e050      	b.n	8009e08 <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8009d66:	7d3b      	ldrb	r3, [r7, #20]
 8009d68:	021b      	lsls	r3, r3, #8
 8009d6a:	b21a      	sxth	r2, r3
 8009d6c:	7d7b      	ldrb	r3, [r7, #21]
 8009d6e:	b21b      	sxth	r3, r3
 8009d70:	4313      	orrs	r3, r2
 8009d72:	b21b      	sxth	r3, r3
 8009d74:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8009d76:	8afa      	ldrh	r2, [r7, #22]
 8009d78:	89fb      	ldrh	r3, [r7, #14]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d205      	bcs.n	8009d8a <mpu_read_fifo_stream+0x72>
        more[0] = 0;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	701a      	strb	r2, [r3, #0]
        return -1;
 8009d84:	f04f 33ff 	mov.w	r3, #4294967295
 8009d88:	e03e      	b.n	8009e08 <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8009d8a:	4b21      	ldr	r3, [pc, #132]	@ (8009e10 <mpu_read_fifo_stream+0xf8>)
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	885b      	ldrh	r3, [r3, #2]
 8009d90:	085b      	lsrs	r3, r3, #1
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	8afa      	ldrh	r2, [r7, #22]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d91a      	bls.n	8009dd0 <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8009d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8009e10 <mpu_read_fifo_stream+0xf8>)
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	7818      	ldrb	r0, [r3, #0]
 8009da0:	4b1b      	ldr	r3, [pc, #108]	@ (8009e10 <mpu_read_fifo_stream+0xf8>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	7cd9      	ldrb	r1, [r3, #19]
 8009da6:	f107 0314 	add.w	r3, r7, #20
 8009daa:	2201      	movs	r2, #1
 8009dac:	f7ff f884 	bl	8008eb8 <i2c_read>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d002      	beq.n	8009dbc <mpu_read_fifo_stream+0xa4>
            return -1;
 8009db6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dba:	e025      	b.n	8009e08 <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8009dbc:	7d3b      	ldrb	r3, [r7, #20]
 8009dbe:	f003 0310 	and.w	r3, r3, #16
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d004      	beq.n	8009dd0 <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
 8009dc6:	f7ff fb0d 	bl	80093e4 <mpu_reset_fifo>
            return -2;
 8009dca:	f06f 0301 	mvn.w	r3, #1
 8009dce:	e01b      	b.n	8009e08 <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8009dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8009e10 <mpu_read_fifo_stream+0xf8>)
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	7818      	ldrb	r0, [r3, #0]
 8009dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8009e10 <mpu_read_fifo_stream+0xf8>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	7b59      	ldrb	r1, [r3, #13]
 8009ddc:	89fb      	ldrh	r3, [r7, #14]
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	f7ff f869 	bl	8008eb8 <i2c_read>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <mpu_read_fifo_stream+0xda>
        return -1;
 8009dec:	f04f 33ff 	mov.w	r3, #4294967295
 8009df0:	e00a      	b.n	8009e08 <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
 8009df2:	8afa      	ldrh	r2, [r7, #22]
 8009df4:	89fb      	ldrh	r3, [r7, #14]
 8009df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	b2da      	uxtb	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	701a      	strb	r2, [r3, #0]
    return 0;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3718      	adds	r7, #24
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	2000001c 	.word	0x2000001c

08009e14 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8009e1e:	4b5f      	ldr	r3, [pc, #380]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009e20:	7c9b      	ldrb	r3, [r3, #18]
 8009e22:	79fa      	ldrb	r2, [r7, #7]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d101      	bne.n	8009e2c <mpu_set_bypass+0x18>
        return 0;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	e0b2      	b.n	8009f92 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 8009e2c:	79fb      	ldrb	r3, [r7, #7]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d050      	beq.n	8009ed4 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8009e32:	4b5a      	ldr	r3, [pc, #360]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	7818      	ldrb	r0, [r3, #0]
 8009e38:	4b58      	ldr	r3, [pc, #352]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	7919      	ldrb	r1, [r3, #4]
 8009e3e:	f107 030f 	add.w	r3, r7, #15
 8009e42:	2201      	movs	r2, #1
 8009e44:	f7ff f838 	bl	8008eb8 <i2c_read>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d002      	beq.n	8009e54 <mpu_set_bypass+0x40>
            return -1;
 8009e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e52:	e09e      	b.n	8009f92 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	f023 0320 	bic.w	r3, r3, #32
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8009e5e:	4b4f      	ldr	r3, [pc, #316]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	7818      	ldrb	r0, [r3, #0]
 8009e64:	4b4d      	ldr	r3, [pc, #308]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	7919      	ldrb	r1, [r3, #4]
 8009e6a:	f107 030f 	add.w	r3, r7, #15
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f7ff f800 	bl	8008e74 <i2c_write>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <mpu_set_bypass+0x6c>
            return -1;
 8009e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e7e:	e088      	b.n	8009f92 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8009e80:	2003      	movs	r0, #3
 8009e82:	f7fa fa63 	bl	800434c <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8009e86:	2302      	movs	r3, #2
 8009e88:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 8009e8a:	4b44      	ldr	r3, [pc, #272]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009e8c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d004      	beq.n	8009e9e <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
 8009e96:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8009e9e:	4b3f      	ldr	r3, [pc, #252]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009ea0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d004      	beq.n	8009eb2 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8009eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	7818      	ldrb	r0, [r3, #0]
 8009eb8:	4b38      	ldr	r3, [pc, #224]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	7dd9      	ldrb	r1, [r3, #23]
 8009ebe:	f107 030f 	add.w	r3, r7, #15
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f7fe ffd6 	bl	8008e74 <i2c_write>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d05d      	beq.n	8009f8a <mpu_set_bypass+0x176>
            return -1;
 8009ece:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed2:	e05e      	b.n	8009f92 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8009ed4:	4b31      	ldr	r3, [pc, #196]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	7818      	ldrb	r0, [r3, #0]
 8009eda:	4b30      	ldr	r3, [pc, #192]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	7919      	ldrb	r1, [r3, #4]
 8009ee0:	f107 030f 	add.w	r3, r7, #15
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f7fe ffe7 	bl	8008eb8 <i2c_read>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <mpu_set_bypass+0xe2>
            return -1;
 8009ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef4:	e04d      	b.n	8009f92 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8009ef6:	4b29      	ldr	r3, [pc, #164]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009ef8:	7a9b      	ldrb	r3, [r3, #10]
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d005      	beq.n	8009f0e <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
 8009f04:	f043 0320 	orr.w	r3, r3, #32
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	73fb      	strb	r3, [r7, #15]
 8009f0c:	e004      	b.n	8009f18 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	f023 0320 	bic.w	r3, r3, #32
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8009f18:	4b20      	ldr	r3, [pc, #128]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	7818      	ldrb	r0, [r3, #0]
 8009f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	7919      	ldrb	r1, [r3, #4]
 8009f24:	f107 030f 	add.w	r3, r7, #15
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f7fe ffa3 	bl	8008e74 <i2c_write>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d002      	beq.n	8009f3a <mpu_set_bypass+0x126>
            return -1;
 8009f34:	f04f 33ff 	mov.w	r3, #4294967295
 8009f38:	e02b      	b.n	8009f92 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8009f3a:	2003      	movs	r0, #3
 8009f3c:	f7fa fa06 	bl	800434c <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8009f40:	4b16      	ldr	r3, [pc, #88]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009f42:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d002      	beq.n	8009f50 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 8009f4a:	2380      	movs	r3, #128	@ 0x80
 8009f4c:	73fb      	strb	r3, [r7, #15]
 8009f4e:	e001      	b.n	8009f54 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8009f54:	4b11      	ldr	r3, [pc, #68]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009f56:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d004      	beq.n	8009f68 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
 8009f60:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8009f68:	4b0c      	ldr	r3, [pc, #48]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	7818      	ldrb	r0, [r3, #0]
 8009f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	7dd9      	ldrb	r1, [r3, #23]
 8009f74:	f107 030f 	add.w	r3, r7, #15
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f7fe ff7b 	bl	8008e74 <i2c_write>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <mpu_set_bypass+0x176>
            return -1;
 8009f84:	f04f 33ff 	mov.w	r3, #4294967295
 8009f88:	e003      	b.n	8009f92 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8009f8a:	4a04      	ldr	r2, [pc, #16]	@ (8009f9c <mpu_set_bypass+0x188>)
 8009f8c:	79fb      	ldrb	r3, [r7, #7]
 8009f8e:	7493      	strb	r3, [r2, #18]
    return 0;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	2000001c 	.word	0x2000001c

08009fa0 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8009faa:	4b1e      	ldr	r3, [pc, #120]	@ (800a024 <mpu_set_int_latched+0x84>)
 8009fac:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009fb0:	79fa      	ldrb	r2, [r7, #7]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d101      	bne.n	8009fba <mpu_set_int_latched+0x1a>
        return 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	e030      	b.n	800a01c <mpu_set_int_latched+0x7c>

    if (enable)
 8009fba:	79fb      	ldrb	r3, [r7, #7]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d002      	beq.n	8009fc6 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8009fc0:	2330      	movs	r3, #48	@ 0x30
 8009fc2:	73fb      	strb	r3, [r7, #15]
 8009fc4:	e001      	b.n	8009fca <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 8009fca:	4b16      	ldr	r3, [pc, #88]	@ (800a024 <mpu_set_int_latched+0x84>)
 8009fcc:	7c9b      	ldrb	r3, [r3, #18]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d004      	beq.n	8009fdc <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
 8009fd4:	f043 0302 	orr.w	r3, r3, #2
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 8009fdc:	4b11      	ldr	r3, [pc, #68]	@ (800a024 <mpu_set_int_latched+0x84>)
 8009fde:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d004      	beq.n	8009ff0 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
 8009fe8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8009ff0:	4b0c      	ldr	r3, [pc, #48]	@ (800a024 <mpu_set_int_latched+0x84>)
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	7818      	ldrb	r0, [r3, #0]
 8009ff6:	4b0b      	ldr	r3, [pc, #44]	@ (800a024 <mpu_set_int_latched+0x84>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	7dd9      	ldrb	r1, [r3, #23]
 8009ffc:	f107 030f 	add.w	r3, r7, #15
 800a000:	2201      	movs	r2, #1
 800a002:	f7fe ff37 	bl	8008e74 <i2c_write>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <mpu_set_int_latched+0x72>
        return -1;
 800a00c:	f04f 33ff 	mov.w	r3, #4294967295
 800a010:	e004      	b.n	800a01c <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 800a012:	4a04      	ldr	r2, [pc, #16]	@ (800a024 <mpu_set_int_latched+0x84>)
 800a014:	79fb      	ldrb	r3, [r7, #7]
 800a016:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
    return 0;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	2000001c 	.word	0x2000001c

0800a028 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 800a030:	4b41      	ldr	r3, [pc, #260]	@ (800a138 <get_accel_prod_shift+0x110>)
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	7818      	ldrb	r0, [r3, #0]
 800a036:	f107 0310 	add.w	r3, r7, #16
 800a03a:	2204      	movs	r2, #4
 800a03c:	210d      	movs	r1, #13
 800a03e:	f7fe ff3b 	bl	8008eb8 <i2c_read>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <get_accel_prod_shift+0x24>
        return 0x07;
 800a048:	2307      	movs	r3, #7
 800a04a:	e071      	b.n	800a130 <get_accel_prod_shift+0x108>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 800a04c:	7c3b      	ldrb	r3, [r7, #16]
 800a04e:	10db      	asrs	r3, r3, #3
 800a050:	b25b      	sxtb	r3, r3
 800a052:	f003 031c 	and.w	r3, r3, #28
 800a056:	b25a      	sxtb	r2, r3
 800a058:	7cfb      	ldrb	r3, [r7, #19]
 800a05a:	111b      	asrs	r3, r3, #4
 800a05c:	b25b      	sxtb	r3, r3
 800a05e:	f003 0303 	and.w	r3, r3, #3
 800a062:	b25b      	sxtb	r3, r3
 800a064:	4313      	orrs	r3, r2
 800a066:	b25b      	sxtb	r3, r3
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 800a06c:	7c7b      	ldrb	r3, [r7, #17]
 800a06e:	10db      	asrs	r3, r3, #3
 800a070:	b25b      	sxtb	r3, r3
 800a072:	f003 031c 	and.w	r3, r3, #28
 800a076:	b25a      	sxtb	r2, r3
 800a078:	7cfb      	ldrb	r3, [r7, #19]
 800a07a:	109b      	asrs	r3, r3, #2
 800a07c:	b25b      	sxtb	r3, r3
 800a07e:	f003 0303 	and.w	r3, r3, #3
 800a082:	b25b      	sxtb	r3, r3
 800a084:	4313      	orrs	r3, r2
 800a086:	b25b      	sxtb	r3, r3
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 800a08c:	7cbb      	ldrb	r3, [r7, #18]
 800a08e:	10db      	asrs	r3, r3, #3
 800a090:	b25b      	sxtb	r3, r3
 800a092:	f003 031c 	and.w	r3, r3, #28
 800a096:	b25a      	sxtb	r2, r3
 800a098:	7cfb      	ldrb	r3, [r7, #19]
 800a09a:	b25b      	sxtb	r3, r3
 800a09c:	f003 0303 	and.w	r3, r3, #3
 800a0a0:	b25b      	sxtb	r3, r3
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	b25b      	sxtb	r3, r3
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	75fb      	strb	r3, [r7, #23]
 800a0ae:	e03b      	b.n	800a128 <get_accel_prod_shift+0x100>
        if (!shift_code[ii]) {
 800a0b0:	7dfb      	ldrb	r3, [r7, #23]
 800a0b2:	3318      	adds	r3, #24
 800a0b4:	443b      	add	r3, r7
 800a0b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d107      	bne.n	800a0ce <get_accel_prod_shift+0xa6>
            st_shift[ii] = 0.f;
 800a0be:	7dfb      	ldrb	r3, [r7, #23]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f04f 0200 	mov.w	r2, #0
 800a0ca:	601a      	str	r2, [r3, #0]
            continue;
 800a0cc:	e029      	b.n	800a122 <get_accel_prod_shift+0xfa>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	4a19      	ldr	r2, [pc, #100]	@ (800a13c <get_accel_prod_shift+0x114>)
 800a0d8:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 800a0da:	e00f      	b.n	800a0fc <get_accel_prod_shift+0xd4>
            st_shift[ii] *= 1.034f;
 800a0dc:	7dfb      	ldrb	r3, [r7, #23]
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	edd3 7a00 	vldr	s15, [r3]
 800a0e8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800a140 <get_accel_prod_shift+0x118>
 800a0f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0f8:	edc3 7a00 	vstr	s15, [r3]
        while (--shift_code[ii])
 800a0fc:	7dfb      	ldrb	r3, [r7, #23]
 800a0fe:	f103 0218 	add.w	r2, r3, #24
 800a102:	443a      	add	r2, r7
 800a104:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a108:	3a01      	subs	r2, #1
 800a10a:	b2d1      	uxtb	r1, r2
 800a10c:	f103 0218 	add.w	r2, r3, #24
 800a110:	443a      	add	r2, r7
 800a112:	f802 1c0c 	strb.w	r1, [r2, #-12]
 800a116:	3318      	adds	r3, #24
 800a118:	443b      	add	r3, r7
 800a11a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1dc      	bne.n	800a0dc <get_accel_prod_shift+0xb4>
    for (ii = 0; ii < 3; ii++) {
 800a122:	7dfb      	ldrb	r3, [r7, #23]
 800a124:	3301      	adds	r3, #1
 800a126:	75fb      	strb	r3, [r7, #23]
 800a128:	7dfb      	ldrb	r3, [r7, #23]
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d9c0      	bls.n	800a0b0 <get_accel_prod_shift+0x88>
    }
    return 0;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	2000001c 	.word	0x2000001c
 800a13c:	3eae147b 	.word	0x3eae147b
 800a140:	3f845a1d 	.word	0x3f845a1d

0800a144 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08a      	sub	sp, #40	@ 0x28
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 800a152:	f107 030c 	add.w	r3, r7, #12
 800a156:	4618      	mov	r0, r3
 800a158:	f7ff ff66 	bl	800a028 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 800a15c:	2300      	movs	r3, #0
 800a15e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a160:	e063      	b.n	800a22a <accel_self_test+0xe6>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800a162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	4413      	add	r3, r2
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	6839      	ldr	r1, [r7, #0]
 800a172:	440b      	add	r3, r1
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	2b00      	cmp	r3, #0
 800a17a:	bfb8      	it	lt
 800a17c:	425b      	neglt	r3, r3
 800a17e:	ee07 3a90 	vmov	s15, r3
 800a182:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a186:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 800a23c <accel_self_test+0xf8>
 800a18a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a18e:	edc7 7a07 	vstr	s15, [r7, #28]
        if (st_shift[jj]) {
 800a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	3328      	adds	r3, #40	@ 0x28
 800a198:	443b      	add	r3, r7
 800a19a:	3b1c      	subs	r3, #28
 800a19c:	edd3 7a00 	vldr	s15, [r3]
 800a1a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a8:	d023      	beq.n	800a1f2 <accel_self_test+0xae>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	3328      	adds	r3, #40	@ 0x28
 800a1b0:	443b      	add	r3, r7
 800a1b2:	3b1c      	subs	r3, #28
 800a1b4:	ed93 7a00 	vldr	s14, [r3]
 800a1b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a1c8:	edc7 7a06 	vstr	s15, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 800a1cc:	edd7 7a06 	vldr	s15, [r7, #24]
 800a1d0:	eef0 7ae7 	vabs.f32	s15, s15
 800a1d4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800a240 <accel_self_test+0xfc>
 800a1d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1e0:	dd20      	ble.n	800a224 <accel_self_test+0xe0>
                result |= 1 << jj;
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ea:	6a3a      	ldr	r2, [r7, #32]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	623b      	str	r3, [r7, #32]
 800a1f0:	e018      	b.n	800a224 <accel_self_test+0xe0>
        } else if ((st_shift_cust < test.min_g) ||
 800a1f2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a244 <accel_self_test+0x100>
 800a1f6:	edd7 7a07 	vldr	s15, [r7, #28]
 800a1fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a202:	d408      	bmi.n	800a216 <accel_self_test+0xd2>
            (st_shift_cust > test.max_g))
 800a204:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800a248 <accel_self_test+0x104>
        } else if ((st_shift_cust < test.min_g) ||
 800a208:	edd7 7a07 	vldr	s15, [r7, #28]
 800a20c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a214:	dd06      	ble.n	800a224 <accel_self_test+0xe0>
            result |= 1 << jj;
 800a216:	2201      	movs	r2, #1
 800a218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21a:	fa02 f303 	lsl.w	r3, r2, r3
 800a21e:	6a3a      	ldr	r2, [r7, #32]
 800a220:	4313      	orrs	r3, r2
 800a222:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 800a224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a226:	3301      	adds	r3, #1
 800a228:	627b      	str	r3, [r7, #36]	@ 0x24
 800a22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	dd98      	ble.n	800a162 <accel_self_test+0x1e>
    }

    return result;
 800a230:	6a3b      	ldr	r3, [r7, #32]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3728      	adds	r7, #40	@ 0x28
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	47800000 	.word	0x47800000
 800a240:	3e0f5c29 	.word	0x3e0f5c29
 800a244:	3e99999a 	.word	0x3e99999a
 800a248:	3f733333 	.word	0x3f733333

0800a24c <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b088      	sub	sp, #32
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 800a256:	2300      	movs	r3, #0
 800a258:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 800a25a:	4b55      	ldr	r3, [pc, #340]	@ (800a3b0 <gyro_self_test+0x164>)
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	7818      	ldrb	r0, [r3, #0]
 800a260:	f107 0308 	add.w	r3, r7, #8
 800a264:	2203      	movs	r2, #3
 800a266:	210d      	movs	r1, #13
 800a268:	f7fe fe26 	bl	8008eb8 <i2c_read>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <gyro_self_test+0x2a>
        return 0x07;
 800a272:	2307      	movs	r3, #7
 800a274:	e097      	b.n	800a3a6 <gyro_self_test+0x15a>

    tmp[0] &= 0x1F;
 800a276:	7a3b      	ldrb	r3, [r7, #8]
 800a278:	f003 031f 	and.w	r3, r3, #31
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 800a280:	7a7b      	ldrb	r3, [r7, #9]
 800a282:	f003 031f 	and.w	r3, r3, #31
 800a286:	b2db      	uxtb	r3, r3
 800a288:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 800a28a:	7abb      	ldrb	r3, [r7, #10]
 800a28c:	f003 031f 	and.w	r3, r3, #31
 800a290:	b2db      	uxtb	r3, r3
 800a292:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 800a294:	2300      	movs	r3, #0
 800a296:	61fb      	str	r3, [r7, #28]
 800a298:	e080      	b.n	800a39c <gyro_self_test+0x150>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	440b      	add	r3, r1
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	bfb8      	it	lt
 800a2b4:	425b      	neglt	r3, r3
 800a2b6:	ee07 3a90 	vmov	s15, r3
 800a2ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a2be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a3b4 <gyro_self_test+0x168>
 800a2c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2c6:	edc7 7a04 	vstr	s15, [r7, #16]
        if (tmp[jj]) {
 800a2ca:	f107 0208 	add.w	r2, r7, #8
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d045      	beq.n	800a364 <gyro_self_test+0x118>
            st_shift = 3275.f / test.gyro_sens;
 800a2d8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800a3b8 <gyro_self_test+0x16c>
 800a2dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a2e0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800a3bc <gyro_self_test+0x170>
 800a2e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2e8:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 800a2ec:	e007      	b.n	800a2fe <gyro_self_test+0xb2>
                st_shift *= 1.046f;
 800a2ee:	edd7 7a05 	vldr	s15, [r7, #20]
 800a2f2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800a3c0 <gyro_self_test+0x174>
 800a2f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a2fa:	edc7 7a05 	vstr	s15, [r7, #20]
            while (--tmp[jj])
 800a2fe:	f107 0208 	add.w	r2, r7, #8
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	4413      	add	r3, r2
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	3b01      	subs	r3, #1
 800a30a:	b2d9      	uxtb	r1, r3
 800a30c:	f107 0208 	add.w	r2, r7, #8
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	4413      	add	r3, r2
 800a314:	460a      	mov	r2, r1
 800a316:	701a      	strb	r2, [r3, #0]
 800a318:	f107 0208 	add.w	r2, r7, #8
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	4413      	add	r3, r2
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1e3      	bne.n	800a2ee <gyro_self_test+0xa2>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 800a326:	edd7 6a04 	vldr	s13, [r7, #16]
 800a32a:	ed97 7a05 	vldr	s14, [r7, #20]
 800a32e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a332:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a336:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a33a:	edc7 7a03 	vstr	s15, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 800a33e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a342:	eef0 7ae7 	vabs.f32	s15, s15
 800a346:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800a3c4 <gyro_self_test+0x178>
 800a34a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a352:	dd20      	ble.n	800a396 <gyro_self_test+0x14a>
                result |= 1 << jj;
 800a354:	2201      	movs	r2, #1
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	fa02 f303 	lsl.w	r3, r2, r3
 800a35c:	69ba      	ldr	r2, [r7, #24]
 800a35e:	4313      	orrs	r3, r2
 800a360:	61bb      	str	r3, [r7, #24]
 800a362:	e018      	b.n	800a396 <gyro_self_test+0x14a>
        } else if ((st_shift_cust < test.min_dps) ||
 800a364:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800a368:	edd7 7a04 	vldr	s15, [r7, #16]
 800a36c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a374:	d408      	bmi.n	800a388 <gyro_self_test+0x13c>
            (st_shift_cust > test.max_dps))
 800a376:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a3c8 <gyro_self_test+0x17c>
        } else if ((st_shift_cust < test.min_dps) ||
 800a37a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a37e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a386:	dd06      	ble.n	800a396 <gyro_self_test+0x14a>
            result |= 1 << jj;
 800a388:	2201      	movs	r2, #1
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	fa02 f303 	lsl.w	r3, r2, r3
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	4313      	orrs	r3, r2
 800a394:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	3301      	adds	r3, #1
 800a39a:	61fb      	str	r3, [r7, #28]
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	f77f af7b 	ble.w	800a29a <gyro_self_test+0x4e>
    }
    return result;
 800a3a4:	69bb      	ldr	r3, [r7, #24]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3720      	adds	r7, #32
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	2000001c 	.word	0x2000001c
 800a3b4:	47800000 	.word	0x47800000
 800a3b8:	00000083 	.word	0x00000083
 800a3bc:	454cb000 	.word	0x454cb000
 800a3c0:	3f85e354 	.word	0x3f85e354
 800a3c4:	3e0f5c29 	.word	0x3e0f5c29
 800a3c8:	42d20000 	.word	0x42d20000

0800a3cc <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 800a3cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3d0:	b0b8      	sub	sp, #224	@ 0xe0
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 800a3d8:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800a3dc:	4613      	mov	r3, r2
 800a3de:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    data[1] = 0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 800a3ee:	4ba5      	ldr	r3, [pc, #660]	@ (800a684 <get_st_biases+0x2b8>)
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	7818      	ldrb	r0, [r3, #0]
 800a3f4:	4ba3      	ldr	r3, [pc, #652]	@ (800a684 <get_st_biases+0x2b8>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	7d59      	ldrb	r1, [r3, #21]
 800a3fa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a3fe:	2202      	movs	r2, #2
 800a400:	f7fe fd38 	bl	8008e74 <i2c_write>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d002      	beq.n	800a410 <get_st_biases+0x44>
        return -1;
 800a40a:	f04f 33ff 	mov.w	r3, #4294967295
 800a40e:	e34b      	b.n	800aaa8 <get_st_biases+0x6dc>
    delay_ms(200);
 800a410:	20c8      	movs	r0, #200	@ 0xc8
 800a412:	f7f9 ff9b 	bl	800434c <HAL_Delay>
    data[0] = 0;
 800a416:	2300      	movs	r3, #0
 800a418:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 800a41c:	4b99      	ldr	r3, [pc, #612]	@ (800a684 <get_st_biases+0x2b8>)
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	7818      	ldrb	r0, [r3, #0]
 800a422:	4b98      	ldr	r3, [pc, #608]	@ (800a684 <get_st_biases+0x2b8>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	7c59      	ldrb	r1, [r3, #17]
 800a428:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a42c:	2201      	movs	r2, #1
 800a42e:	f7fe fd21 	bl	8008e74 <i2c_write>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <get_st_biases+0x72>
        return -1;
 800a438:	f04f 33ff 	mov.w	r3, #4294967295
 800a43c:	e334      	b.n	800aaa8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800a43e:	4b91      	ldr	r3, [pc, #580]	@ (800a684 <get_st_biases+0x2b8>)
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	7818      	ldrb	r0, [r3, #0]
 800a444:	4b8f      	ldr	r3, [pc, #572]	@ (800a684 <get_st_biases+0x2b8>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	7959      	ldrb	r1, [r3, #5]
 800a44a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a44e:	2201      	movs	r2, #1
 800a450:	f7fe fd10 	bl	8008e74 <i2c_write>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <get_st_biases+0x94>
        return -1;
 800a45a:	f04f 33ff 	mov.w	r3, #4294967295
 800a45e:	e323      	b.n	800aaa8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800a460:	4b88      	ldr	r3, [pc, #544]	@ (800a684 <get_st_biases+0x2b8>)
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	7818      	ldrb	r0, [r3, #0]
 800a466:	4b87      	ldr	r3, [pc, #540]	@ (800a684 <get_st_biases+0x2b8>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	7d59      	ldrb	r1, [r3, #21]
 800a46c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a470:	2201      	movs	r2, #1
 800a472:	f7fe fcff 	bl	8008e74 <i2c_write>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <get_st_biases+0xb6>
        return -1;
 800a47c:	f04f 33ff 	mov.w	r3, #4294967295
 800a480:	e312      	b.n	800aaa8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 800a482:	4b80      	ldr	r3, [pc, #512]	@ (800a684 <get_st_biases+0x2b8>)
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	7818      	ldrb	r0, [r3, #0]
 800a488:	4b7e      	ldr	r3, [pc, #504]	@ (800a684 <get_st_biases+0x2b8>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	7e99      	ldrb	r1, [r3, #26]
 800a48e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a492:	2201      	movs	r2, #1
 800a494:	f7fe fcee 	bl	8008e74 <i2c_write>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d002      	beq.n	800a4a4 <get_st_biases+0xd8>
        return -1;
 800a49e:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a2:	e301      	b.n	800aaa8 <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800a4a4:	4b77      	ldr	r3, [pc, #476]	@ (800a684 <get_st_biases+0x2b8>)
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	7818      	ldrb	r0, [r3, #0]
 800a4aa:	4b76      	ldr	r3, [pc, #472]	@ (800a684 <get_st_biases+0x2b8>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	7919      	ldrb	r1, [r3, #4]
 800a4b0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f7fe fcdd 	bl	8008e74 <i2c_write>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <get_st_biases+0xfa>
        return -1;
 800a4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c4:	e2f0      	b.n	800aaa8 <get_st_biases+0x6dc>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 800a4c6:	230c      	movs	r3, #12
 800a4c8:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800a4cc:	4b6d      	ldr	r3, [pc, #436]	@ (800a684 <get_st_biases+0x2b8>)
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	7818      	ldrb	r0, [r3, #0]
 800a4d2:	4b6c      	ldr	r3, [pc, #432]	@ (800a684 <get_st_biases+0x2b8>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	7919      	ldrb	r1, [r3, #4]
 800a4d8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f7fe fcc9 	bl	8008e74 <i2c_write>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d002      	beq.n	800a4ee <get_st_biases+0x122>
        return -1;
 800a4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ec:	e2dc      	b.n	800aaa8 <get_st_biases+0x6dc>
    delay_ms(15);
 800a4ee:	200f      	movs	r0, #15
 800a4f0:	f7f9 ff2c 	bl	800434c <HAL_Delay>
    data[0] = st.test->reg_lpf;
 800a4f4:	4b63      	ldr	r3, [pc, #396]	@ (800a684 <get_st_biases+0x2b8>)
 800a4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f8:	7a5b      	ldrb	r3, [r3, #9]
 800a4fa:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 800a4fe:	4b61      	ldr	r3, [pc, #388]	@ (800a684 <get_st_biases+0x2b8>)
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	7818      	ldrb	r0, [r3, #0]
 800a504:	4b5f      	ldr	r3, [pc, #380]	@ (800a684 <get_st_biases+0x2b8>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	7899      	ldrb	r1, [r3, #2]
 800a50a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a50e:	2201      	movs	r2, #1
 800a510:	f7fe fcb0 	bl	8008e74 <i2c_write>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <get_st_biases+0x154>
        return -1;
 800a51a:	f04f 33ff 	mov.w	r3, #4294967295
 800a51e:	e2c3      	b.n	800aaa8 <get_st_biases+0x6dc>
    data[0] = st.test->reg_rate_div;
 800a520:	4b58      	ldr	r3, [pc, #352]	@ (800a684 <get_st_biases+0x2b8>)
 800a522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a524:	7a1b      	ldrb	r3, [r3, #8]
 800a526:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 800a52a:	4b56      	ldr	r3, [pc, #344]	@ (800a684 <get_st_biases+0x2b8>)
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	7818      	ldrb	r0, [r3, #0]
 800a530:	4b54      	ldr	r3, [pc, #336]	@ (800a684 <get_st_biases+0x2b8>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	7859      	ldrb	r1, [r3, #1]
 800a536:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a53a:	2201      	movs	r2, #1
 800a53c:	f7fe fc9a 	bl	8008e74 <i2c_write>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d002      	beq.n	800a54c <get_st_biases+0x180>
        return -1;
 800a546:	f04f 33ff 	mov.w	r3, #4294967295
 800a54a:	e2ad      	b.n	800aaa8 <get_st_biases+0x6dc>
    if (hw_test)
 800a54c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800a550:	2b00      	cmp	r3, #0
 800a552:	d008      	beq.n	800a566 <get_st_biases+0x19a>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 800a554:	4b4b      	ldr	r3, [pc, #300]	@ (800a684 <get_st_biases+0x2b8>)
 800a556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a558:	7a9b      	ldrb	r3, [r3, #10]
 800a55a:	f063 031f 	orn	r3, r3, #31
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 800a564:	e004      	b.n	800a570 <get_st_biases+0x1a4>
    else
        data[0] = st.test->reg_gyro_fsr;
 800a566:	4b47      	ldr	r3, [pc, #284]	@ (800a684 <get_st_biases+0x2b8>)
 800a568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a56a:	7a9b      	ldrb	r3, [r3, #10]
 800a56c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 800a570:	4b44      	ldr	r3, [pc, #272]	@ (800a684 <get_st_biases+0x2b8>)
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	7818      	ldrb	r0, [r3, #0]
 800a576:	4b43      	ldr	r3, [pc, #268]	@ (800a684 <get_st_biases+0x2b8>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	7999      	ldrb	r1, [r3, #6]
 800a57c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a580:	2201      	movs	r2, #1
 800a582:	f7fe fc77 	bl	8008e74 <i2c_write>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <get_st_biases+0x1c6>
        return -1;
 800a58c:	f04f 33ff 	mov.w	r3, #4294967295
 800a590:	e28a      	b.n	800aaa8 <get_st_biases+0x6dc>

    if (hw_test)
 800a592:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800a596:	2b00      	cmp	r3, #0
 800a598:	d008      	beq.n	800a5ac <get_st_biases+0x1e0>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 800a59a:	4b3a      	ldr	r3, [pc, #232]	@ (800a684 <get_st_biases+0x2b8>)
 800a59c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a59e:	7adb      	ldrb	r3, [r3, #11]
 800a5a0:	f063 031f 	orn	r3, r3, #31
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 800a5aa:	e002      	b.n	800a5b2 <get_st_biases+0x1e6>
    else
        data[0] = test.reg_accel_fsr;
 800a5ac:	2318      	movs	r3, #24
 800a5ae:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 800a5b2:	4b34      	ldr	r3, [pc, #208]	@ (800a684 <get_st_biases+0x2b8>)
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	7818      	ldrb	r0, [r3, #0]
 800a5b8:	4b32      	ldr	r3, [pc, #200]	@ (800a684 <get_st_biases+0x2b8>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	79d9      	ldrb	r1, [r3, #7]
 800a5be:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f7fe fc56 	bl	8008e74 <i2c_write>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d002      	beq.n	800a5d4 <get_st_biases+0x208>
        return -1;
 800a5ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a5d2:	e269      	b.n	800aaa8 <get_st_biases+0x6dc>
    if (hw_test)
 800a5d4:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <get_st_biases+0x216>
        delay_ms(200);
 800a5dc:	20c8      	movs	r0, #200	@ 0xc8
 800a5de:	f7f9 feb5 	bl	800434c <HAL_Delay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 800a5e2:	2340      	movs	r3, #64	@ 0x40
 800a5e4:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 800a5e8:	4b26      	ldr	r3, [pc, #152]	@ (800a684 <get_st_biases+0x2b8>)
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	7818      	ldrb	r0, [r3, #0]
 800a5ee:	4b25      	ldr	r3, [pc, #148]	@ (800a684 <get_st_biases+0x2b8>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	7919      	ldrb	r1, [r3, #4]
 800a5f4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	f7fe fc3b 	bl	8008e74 <i2c_write>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <get_st_biases+0x23e>
        return -1;
 800a604:	f04f 33ff 	mov.w	r3, #4294967295
 800a608:	e24e      	b.n	800aaa8 <get_st_biases+0x6dc>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 800a60a:	2378      	movs	r3, #120	@ 0x78
 800a60c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800a610:	4b1c      	ldr	r3, [pc, #112]	@ (800a684 <get_st_biases+0x2b8>)
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	7818      	ldrb	r0, [r3, #0]
 800a616:	4b1b      	ldr	r3, [pc, #108]	@ (800a684 <get_st_biases+0x2b8>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	7959      	ldrb	r1, [r3, #5]
 800a61c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a620:	2201      	movs	r2, #1
 800a622:	f7fe fc27 	bl	8008e74 <i2c_write>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <get_st_biases+0x266>
        return -1;
 800a62c:	f04f 33ff 	mov.w	r3, #4294967295
 800a630:	e23a      	b.n	800aaa8 <get_st_biases+0x6dc>
    delay_ms(test.wait_ms);
 800a632:	2332      	movs	r3, #50	@ 0x32
 800a634:	4618      	mov	r0, r3
 800a636:	f7f9 fe89 	bl	800434c <HAL_Delay>
    data[0] = 0;
 800a63a:	2300      	movs	r3, #0
 800a63c:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 800a640:	4b10      	ldr	r3, [pc, #64]	@ (800a684 <get_st_biases+0x2b8>)
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	7818      	ldrb	r0, [r3, #0]
 800a646:	4b0f      	ldr	r3, [pc, #60]	@ (800a684 <get_st_biases+0x2b8>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	7959      	ldrb	r1, [r3, #5]
 800a64c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a650:	2201      	movs	r2, #1
 800a652:	f7fe fc0f 	bl	8008e74 <i2c_write>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <get_st_biases+0x296>
        return -1;
 800a65c:	f04f 33ff 	mov.w	r3, #4294967295
 800a660:	e222      	b.n	800aaa8 <get_st_biases+0x6dc>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 800a662:	4b08      	ldr	r3, [pc, #32]	@ (800a684 <get_st_biases+0x2b8>)
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	7818      	ldrb	r0, [r3, #0]
 800a668:	4b06      	ldr	r3, [pc, #24]	@ (800a684 <get_st_biases+0x2b8>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	7b19      	ldrb	r1, [r3, #12]
 800a66e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a672:	2202      	movs	r2, #2
 800a674:	f7fe fc20 	bl	8008eb8 <i2c_read>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d004      	beq.n	800a688 <get_st_biases+0x2bc>
        return -1;
 800a67e:	f04f 33ff 	mov.w	r3, #4294967295
 800a682:	e211      	b.n	800aaa8 <get_st_biases+0x6dc>
 800a684:	2000001c 	.word	0x2000001c

    fifo_count = (data[0] << 8) | data[1];
 800a688:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 800a68c:	021b      	lsls	r3, r3, #8
 800a68e:	b21a      	sxth	r2, r3
 800a690:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 800a694:	b21b      	sxth	r3, r3
 800a696:	4313      	orrs	r3, r2
 800a698:	b21b      	sxth	r3, r3
 800a69a:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 800a69e:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	@ 0xdc
 800a6a2:	4b1d      	ldr	r3, [pc, #116]	@ (800a718 <get_st_biases+0x34c>)
 800a6a4:	fba3 2302 	umull	r2, r3, r3, r2
 800a6a8:	08db      	lsrs	r3, r3, #3
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 800a6b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a6b4:	f103 0108 	add.w	r1, r3, #8
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	600b      	str	r3, [r1, #0]
 800a6bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a6c0:	1d1a      	adds	r2, r3, #4
 800a6c2:	680b      	ldr	r3, [r1, #0]
 800a6c4:	6013      	str	r3, [r2, #0]
 800a6c6:	6812      	ldr	r2, [r2, #0]
 800a6c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a6cc:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 800a6ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a6d2:	f103 0108 	add.w	r1, r3, #8
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	600b      	str	r3, [r1, #0]
 800a6da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a6de:	1d1a      	adds	r2, r3, #4
 800a6e0:	680b      	ldr	r3, [r1, #0]
 800a6e2:	6013      	str	r3, [r2, #0]
 800a6e4:	6812      	ldr	r2, [r2, #0]
 800a6e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a6ea:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800a6f2:	e0a0      	b.n	800a836 <get_st_biases+0x46a>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 800a6f4:	4b09      	ldr	r3, [pc, #36]	@ (800a71c <get_st_biases+0x350>)
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	7818      	ldrb	r0, [r3, #0]
 800a6fa:	4b08      	ldr	r3, [pc, #32]	@ (800a71c <get_st_biases+0x350>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	7b59      	ldrb	r1, [r3, #13]
 800a700:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800a704:	220c      	movs	r2, #12
 800a706:	f7fe fbd7 	bl	8008eb8 <i2c_read>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d007      	beq.n	800a720 <get_st_biases+0x354>
            return -1;
 800a710:	f04f 33ff 	mov.w	r3, #4294967295
 800a714:	e1c8      	b.n	800aaa8 <get_st_biases+0x6dc>
 800a716:	bf00      	nop
 800a718:	aaaaaaab 	.word	0xaaaaaaab
 800a71c:	2000001c 	.word	0x2000001c
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 800a720:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 800a724:	021b      	lsls	r3, r3, #8
 800a726:	b21a      	sxth	r2, r3
 800a728:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 800a72c:	b21b      	sxth	r3, r3
 800a72e:	4313      	orrs	r3, r2
 800a730:	b21b      	sxth	r3, r3
 800a732:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 800a736:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 800a73a:	021b      	lsls	r3, r3, #8
 800a73c:	b21a      	sxth	r2, r3
 800a73e:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 800a742:	b21b      	sxth	r3, r3
 800a744:	4313      	orrs	r3, r2
 800a746:	b21b      	sxth	r3, r3
 800a748:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 800a74c:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 800a750:	021b      	lsls	r3, r3, #8
 800a752:	b21a      	sxth	r2, r3
 800a754:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 800a758:	b21b      	sxth	r3, r3
 800a75a:	4313      	orrs	r3, r2
 800a75c:	b21b      	sxth	r3, r3
 800a75e:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
        accel[0] += (long)accel_cur[0];
 800a762:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 800a76c:	441a      	add	r2, r3
 800a76e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a772:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 800a774:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a778:	3304      	adds	r3, #4
 800a77a:	6819      	ldr	r1, [r3, #0]
 800a77c:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 800a780:	4618      	mov	r0, r3
 800a782:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a786:	1d1a      	adds	r2, r3, #4
 800a788:	180b      	adds	r3, r1, r0
 800a78a:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 800a78c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a790:	3308      	adds	r3, #8
 800a792:	6819      	ldr	r1, [r3, #0]
 800a794:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 800a798:	4618      	mov	r0, r3
 800a79a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a79e:	f103 0208 	add.w	r2, r3, #8
 800a7a2:	180b      	adds	r3, r1, r0
 800a7a4:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 800a7a6:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
 800a7aa:	021b      	lsls	r3, r3, #8
 800a7ac:	b21a      	sxth	r2, r3
 800a7ae:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800a7b2:	b21b      	sxth	r3, r3
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	b21b      	sxth	r3, r3
 800a7b8:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 800a7bc:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
 800a7c0:	021b      	lsls	r3, r3, #8
 800a7c2:	b21a      	sxth	r2, r3
 800a7c4:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 800a7c8:	b21b      	sxth	r3, r3
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	b21b      	sxth	r3, r3
 800a7ce:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 800a7d2:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 800a7d6:	021b      	lsls	r3, r3, #8
 800a7d8:	b21a      	sxth	r2, r3
 800a7da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800a7de:	b21b      	sxth	r3, r3
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	b21b      	sxth	r3, r3
 800a7e4:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
        gyro[0] += (long)gyro_cur[0];
 800a7e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	@ 0xbc
 800a7f2:	441a      	add	r2, r3
 800a7f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7f8:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 800a7fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7fe:	3304      	adds	r3, #4
 800a800:	6819      	ldr	r1, [r3, #0]
 800a802:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
 800a806:	4618      	mov	r0, r3
 800a808:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a80c:	1d1a      	adds	r2, r3, #4
 800a80e:	180b      	adds	r3, r1, r0
 800a810:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 800a812:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a816:	3308      	adds	r3, #8
 800a818:	6819      	ldr	r1, [r3, #0]
 800a81a:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	@ 0xc0
 800a81e:	4618      	mov	r0, r3
 800a820:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a824:	f103 0208 	add.w	r2, r3, #8
 800a828:	180b      	adds	r3, r1, r0
 800a82a:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 800a82c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800a830:	3301      	adds	r3, #1
 800a832:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800a836:	f897 20df 	ldrb.w	r2, [r7, #223]	@ 0xdf
 800a83a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a83e:	429a      	cmp	r2, r3
 800a840:	f4ff af58 	bcc.w	800a6f4 <get_st_biases+0x328>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 800a844:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	17da      	asrs	r2, r3, #31
 800a84c:	461c      	mov	r4, r3
 800a84e:	4615      	mov	r5, r2
 800a850:	1423      	asrs	r3, r4, #16
 800a852:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a856:	0423      	lsls	r3, r4, #16
 800a858:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a85c:	2283      	movs	r2, #131	@ 0x83
 800a85e:	2300      	movs	r3, #0
 800a860:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800a864:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a868:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800a86c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800a870:	f7f6 f9f2 	bl	8000c58 <__aeabi_ldivmod>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4610      	mov	r0, r2
 800a87a:	4619      	mov	r1, r3
 800a87c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a880:	2200      	movs	r2, #0
 800a882:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a886:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a88a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800a88e:	f7f6 f9e3 	bl	8000c58 <__aeabi_ldivmod>
 800a892:	4602      	mov	r2, r0
 800a894:	460b      	mov	r3, r1
 800a896:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a89a:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 800a89c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	17da      	asrs	r2, r3, #31
 800a8a6:	4698      	mov	r8, r3
 800a8a8:	4691      	mov	r9, r2
 800a8aa:	ea4f 4328 	mov.w	r3, r8, asr #16
 800a8ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a8b2:	ea4f 4308 	mov.w	r3, r8, lsl #16
 800a8b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a8ba:	2283      	movs	r2, #131	@ 0x83
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a8c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a8c6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800a8ca:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800a8ce:	f7f6 f9c3 	bl	8000c58 <__aeabi_ldivmod>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	4610      	mov	r0, r2
 800a8d8:	4619      	mov	r1, r3
 800a8da:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a8de:	2200      	movs	r2, #0
 800a8e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a8e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a8e4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800a8e8:	f7f6 f9b6 	bl	8000c58 <__aeabi_ldivmod>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a8f8:	1d1a      	adds	r2, r3, #4
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 800a8fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a902:	3308      	adds	r3, #8
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	17da      	asrs	r2, r3, #31
 800a908:	469a      	mov	sl, r3
 800a90a:	4693      	mov	fp, r2
 800a90c:	ea4f 432a 	mov.w	r3, sl, asr #16
 800a910:	677b      	str	r3, [r7, #116]	@ 0x74
 800a912:	ea4f 430a 	mov.w	r3, sl, lsl #16
 800a916:	673b      	str	r3, [r7, #112]	@ 0x70
 800a918:	2283      	movs	r2, #131	@ 0x83
 800a91a:	2300      	movs	r3, #0
 800a91c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a91e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a920:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a924:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800a928:	f7f6 f996 	bl	8000c58 <__aeabi_ldivmod>
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	4610      	mov	r0, r2
 800a932:	4619      	mov	r1, r3
 800a934:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a938:	2200      	movs	r2, #0
 800a93a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a93c:	667a      	str	r2, [r7, #100]	@ 0x64
 800a93e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a942:	f7f6 f989 	bl	8000c58 <__aeabi_ldivmod>
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	4610      	mov	r0, r2
 800a94c:	4619      	mov	r1, r3
 800a94e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a952:	f103 0208 	add.w	r2, r3, #8
 800a956:	4603      	mov	r3, r0
 800a958:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 800a95a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	17da      	asrs	r2, r3, #31
 800a962:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a964:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800a966:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a96a:	460b      	mov	r3, r1
 800a96c:	141b      	asrs	r3, r3, #16
 800a96e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a970:	460b      	mov	r3, r1
 800a972:	041b      	lsls	r3, r3, #16
 800a974:	653b      	str	r3, [r7, #80]	@ 0x50
 800a976:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a97a:	2300      	movs	r3, #0
 800a97c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a97e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a980:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a984:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a988:	f7f6 f966 	bl	8000c58 <__aeabi_ldivmod>
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	4610      	mov	r0, r2
 800a992:	4619      	mov	r1, r3
 800a994:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a998:	2200      	movs	r2, #0
 800a99a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a99c:	647a      	str	r2, [r7, #68]	@ 0x44
 800a99e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a9a2:	f7f6 f959 	bl	8000c58 <__aeabi_ldivmod>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a9ae:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 800a9b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a9b4:	3304      	adds	r3, #4
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	17da      	asrs	r2, r3, #31
 800a9ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a9be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	141b      	asrs	r3, r3, #16
 800a9c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	041b      	lsls	r3, r3, #16
 800a9cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a9d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a9dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800a9e0:	f7f6 f93a 	bl	8000c58 <__aeabi_ldivmod>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	623b      	str	r3, [r7, #32]
 800a9f4:	627a      	str	r2, [r7, #36]	@ 0x24
 800a9f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a9fa:	f7f6 f92d 	bl	8000c58 <__aeabi_ldivmod>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	460b      	mov	r3, r1
 800aa02:	4610      	mov	r0, r2
 800aa04:	4619      	mov	r1, r3
 800aa06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 800aa10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aa14:	3308      	adds	r3, #8
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	17da      	asrs	r2, r3, #31
 800aa1a:	61bb      	str	r3, [r7, #24]
 800aa1c:	61fa      	str	r2, [r7, #28]
 800aa1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aa22:	460b      	mov	r3, r1
 800aa24:	141b      	asrs	r3, r3, #16
 800aa26:	617b      	str	r3, [r7, #20]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	041b      	lsls	r3, r3, #16
 800aa2c:	613b      	str	r3, [r7, #16]
 800aa2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa32:	2300      	movs	r3, #0
 800aa34:	60ba      	str	r2, [r7, #8]
 800aa36:	60fb      	str	r3, [r7, #12]
 800aa38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aa40:	f7f6 f90a 	bl	8000c58 <__aeabi_ldivmod>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4610      	mov	r0, r2
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800aa50:	2200      	movs	r2, #0
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	607a      	str	r2, [r7, #4]
 800aa56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa5a:	f7f6 f8fd 	bl	8000c58 <__aeabi_ldivmod>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	460b      	mov	r3, r1
 800aa62:	4610      	mov	r0, r2
 800aa64:	4619      	mov	r1, r3
 800aa66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aa6a:	3308      	adds	r3, #8
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 800aa70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aa74:	3308      	adds	r3, #8
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	dd0a      	ble.n	800aa92 <get_st_biases+0x6c6>
        accel[2] -= 65536L;
 800aa7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aa80:	3308      	adds	r3, #8
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aa88:	3308      	adds	r3, #8
 800aa8a:	f5a2 3280 	sub.w	r2, r2, #65536	@ 0x10000
 800aa8e:	601a      	str	r2, [r3, #0]
 800aa90:	e009      	b.n	800aaa6 <get_st_biases+0x6da>
    else
        accel[2] += 65536L;
 800aa92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aa96:	3308      	adds	r3, #8
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800aa9e:	3308      	adds	r3, #8
 800aaa0:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
 800aaa4:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	37e0      	adds	r7, #224	@ 0xe0
 800aaac:	46bd      	mov	sp, r7
 800aaae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aab2:	bf00      	nop

0800aab4 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08e      	sub	sp, #56	@ 0x38
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 800aabe:	2302      	movs	r3, #2
 800aac0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 800aac4:	4b68      	ldr	r3, [pc, #416]	@ (800ac68 <mpu_run_self_test+0x1b4>)
 800aac6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d006      	beq.n	800aadc <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 800aace:	2000      	movs	r0, #0
 800aad0:	f000 f9ee 	bl	800aeb0 <mpu_set_dmp_state>
        dmp_was_on = 1;
 800aad4:	2301      	movs	r3, #1
 800aad6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800aada:	e002      	b.n	800aae2 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 800aadc:	2300      	movs	r3, #0
 800aade:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 800aae2:	f107 030c 	add.w	r3, r7, #12
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fe fd80 	bl	80095ec <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 800aaec:	f107 030f 	add.w	r3, r7, #15
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fe fe03 	bl	80096fc <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 800aaf6:	f107 0308 	add.w	r3, r7, #8
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fe fea0 	bl	8009840 <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 800ab00:	f107 030a 	add.w	r3, r7, #10
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fe ff27 	bl	8009958 <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 800ab0a:	4b57      	ldr	r3, [pc, #348]	@ (800ac68 <mpu_run_self_test+0x1b4>)
 800ab0c:	7a9b      	ldrb	r3, [r3, #10]
 800ab0e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 800ab12:	f107 030e 	add.w	r3, r7, #14
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7ff f814 	bl	8009b44 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab20:	e00a      	b.n	800ab38 <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 800ab22:	2200      	movs	r2, #0
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7ff fc50 	bl	800a3cc <get_st_biases>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d008      	beq.n	800ab44 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 800ab32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab34:	3301      	adds	r3, #1
 800ab36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	dbef      	blt.n	800ab22 <mpu_run_self_test+0x6e>
 800ab42:	e000      	b.n	800ab46 <mpu_run_self_test+0x92>
            break;
 800ab44:	bf00      	nop
    if (ii == tries) {
 800ab46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d102      	bne.n	800ab56 <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 800ab54:	e045      	b.n	800abe2 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 800ab56:	2300      	movs	r3, #0
 800ab58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab5a:	e00d      	b.n	800ab78 <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 800ab5c:	f107 0110 	add.w	r1, r7, #16
 800ab60:	f107 031c 	add.w	r3, r7, #28
 800ab64:	2201      	movs	r2, #1
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7ff fc30 	bl	800a3cc <get_st_biases>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d008      	beq.n	800ab84 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 800ab72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab74:	3301      	adds	r3, #1
 800ab76:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	dbec      	blt.n	800ab5c <mpu_run_self_test+0xa8>
 800ab82:	e000      	b.n	800ab86 <mpu_run_self_test+0xd2>
            break;
 800ab84:	bf00      	nop
    if (ii == tries) {
 800ab86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d102      	bne.n	800ab96 <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 800ab90:	2300      	movs	r3, #0
 800ab92:	633b      	str	r3, [r7, #48]	@ 0x30
        goto restore;
 800ab94:	e025      	b.n	800abe2 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 800ab96:	f107 0310 	add.w	r3, r7, #16
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6838      	ldr	r0, [r7, #0]
 800ab9e:	f7ff fad1 	bl	800a144 <accel_self_test>
 800aba2:	4603      	mov	r3, r0
 800aba4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 800aba8:	f107 031c 	add.w	r3, r7, #28
 800abac:	4619      	mov	r1, r3
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7ff fb4c 	bl	800a24c <gyro_self_test>
 800abb4:	4603      	mov	r3, r0
 800abb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    result = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!gyro_result)
 800abbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d103      	bne.n	800abce <mpu_run_self_test+0x11a>
        result |= 0x01;
 800abc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc8:	f043 0301 	orr.w	r3, r3, #1
 800abcc:	633b      	str	r3, [r7, #48]	@ 0x30
    if (!accel_result)
 800abce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d104      	bne.n	800abe0 <mpu_run_self_test+0x12c>
        result |= 0x02;
 800abd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd8:	f043 0302 	orr.w	r3, r3, #2
 800abdc:	633b      	str	r3, [r7, #48]	@ 0x30
 800abde:	e000      	b.n	800abe2 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 800abe0:	bf00      	nop
#if defined MPU6050
    /* For now, this function will return a "pass" result for all three sensors
     * for compatibility with current test applications.
     */
    get_st_biases(gyro, accel, 0);
 800abe2:	2200      	movs	r2, #0
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f7ff fbf0 	bl	800a3cc <get_st_biases>
    result = 0x7;
 800abec:	2307      	movs	r3, #7
 800abee:	633b      	str	r3, [r7, #48]	@ 0x30
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 800abf0:	4b1d      	ldr	r3, [pc, #116]	@ (800ac68 <mpu_run_self_test+0x1b4>)
 800abf2:	22ff      	movs	r2, #255	@ 0xff
 800abf4:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800abf6:	4b1c      	ldr	r3, [pc, #112]	@ (800ac68 <mpu_run_self_test+0x1b4>)
 800abf8:	22ff      	movs	r2, #255	@ 0xff
 800abfa:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800abfc:	4b1a      	ldr	r3, [pc, #104]	@ (800ac68 <mpu_run_self_test+0x1b4>)
 800abfe:	22ff      	movs	r2, #255	@ 0xff
 800ac00:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800ac02:	4b19      	ldr	r3, [pc, #100]	@ (800ac68 <mpu_run_self_test+0x1b4>)
 800ac04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ac08:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 800ac0a:	4b17      	ldr	r3, [pc, #92]	@ (800ac68 <mpu_run_self_test+0x1b4>)
 800ac0c:	22ff      	movs	r2, #255	@ 0xff
 800ac0e:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 800ac10:	4b15      	ldr	r3, [pc, #84]	@ (800ac68 <mpu_run_self_test+0x1b4>)
 800ac12:	22ff      	movs	r2, #255	@ 0xff
 800ac14:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800ac16:	4b14      	ldr	r3, [pc, #80]	@ (800ac68 <mpu_run_self_test+0x1b4>)
 800ac18:	2201      	movs	r2, #1
 800ac1a:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 800ac1c:	89bb      	ldrh	r3, [r7, #12]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fe fd18 	bl	8009654 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 800ac24:	7bfb      	ldrb	r3, [r7, #15]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fe fda2 	bl	8009770 <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 800ac2c:	893b      	ldrh	r3, [r7, #8]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fe fe44 	bl	80098bc <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 800ac34:	897b      	ldrh	r3, [r7, #10]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe fea8 	bl	800998c <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 800ac3c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fe ffe3 	bl	8009c0c <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7fe ff8d 	bl	8009b68 <mpu_configure_fifo>

    if (dmp_was_on)
 800ac4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d002      	beq.n	800ac5c <mpu_run_self_test+0x1a8>
        mpu_set_dmp_state(1);
 800ac56:	2001      	movs	r0, #1
 800ac58:	f000 f92a 	bl	800aeb0 <mpu_set_dmp_state>

    return result;
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3738      	adds	r7, #56	@ 0x38
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	2000001c 	.word	0x2000001c

0800ac6c <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	4603      	mov	r3, r0
 800ac74:	603a      	str	r2, [r7, #0]
 800ac76:	80fb      	strh	r3, [r7, #6]
 800ac78:	460b      	mov	r3, r1
 800ac7a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d102      	bne.n	800ac88 <mpu_write_mem+0x1c>
        return -1;
 800ac82:	f04f 33ff 	mov.w	r3, #4294967295
 800ac86:	e03d      	b.n	800ad04 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 800ac88:	4b20      	ldr	r3, [pc, #128]	@ (800ad0c <mpu_write_mem+0xa0>)
 800ac8a:	7a9b      	ldrb	r3, [r3, #10]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d102      	bne.n	800ac96 <mpu_write_mem+0x2a>
        return -1;
 800ac90:	f04f 33ff 	mov.w	r3, #4294967295
 800ac94:	e036      	b.n	800ad04 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800ac96:	88fb      	ldrh	r3, [r7, #6]
 800ac98:	0a1b      	lsrs	r3, r3, #8
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800aca0:	88fb      	ldrh	r3, [r7, #6]
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800aca6:	7b7b      	ldrb	r3, [r7, #13]
 800aca8:	461a      	mov	r2, r3
 800acaa:	88bb      	ldrh	r3, [r7, #4]
 800acac:	4413      	add	r3, r2
 800acae:	4a17      	ldr	r2, [pc, #92]	@ (800ad0c <mpu_write_mem+0xa0>)
 800acb0:	6852      	ldr	r2, [r2, #4]
 800acb2:	8952      	ldrh	r2, [r2, #10]
 800acb4:	4293      	cmp	r3, r2
 800acb6:	dd02      	ble.n	800acbe <mpu_write_mem+0x52>
        return -1;
 800acb8:	f04f 33ff 	mov.w	r3, #4294967295
 800acbc:	e022      	b.n	800ad04 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800acbe:	4b13      	ldr	r3, [pc, #76]	@ (800ad0c <mpu_write_mem+0xa0>)
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	7818      	ldrb	r0, [r3, #0]
 800acc4:	4b11      	ldr	r3, [pc, #68]	@ (800ad0c <mpu_write_mem+0xa0>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	7ed9      	ldrb	r1, [r3, #27]
 800acca:	f107 030c 	add.w	r3, r7, #12
 800acce:	2202      	movs	r2, #2
 800acd0:	f7fe f8d0 	bl	8008e74 <i2c_write>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d002      	beq.n	800ace0 <mpu_write_mem+0x74>
        return -1;
 800acda:	f04f 33ff 	mov.w	r3, #4294967295
 800acde:	e011      	b.n	800ad04 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 800ace0:	4b0a      	ldr	r3, [pc, #40]	@ (800ad0c <mpu_write_mem+0xa0>)
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	7818      	ldrb	r0, [r3, #0]
 800ace6:	4b09      	ldr	r3, [pc, #36]	@ (800ad0c <mpu_write_mem+0xa0>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	7e19      	ldrb	r1, [r3, #24]
 800acec:	88bb      	ldrh	r3, [r7, #4]
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	f7fe f8bf 	bl	8008e74 <i2c_write>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <mpu_write_mem+0x96>
        return -1;
 800acfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ad00:	e000      	b.n	800ad04 <mpu_write_mem+0x98>
    return 0;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	2000001c 	.word	0x2000001c

0800ad10 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	4603      	mov	r3, r0
 800ad18:	603a      	str	r2, [r7, #0]
 800ad1a:	80fb      	strh	r3, [r7, #6]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d102      	bne.n	800ad2c <mpu_read_mem+0x1c>
        return -1;
 800ad26:	f04f 33ff 	mov.w	r3, #4294967295
 800ad2a:	e03d      	b.n	800ada8 <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 800ad2c:	4b20      	ldr	r3, [pc, #128]	@ (800adb0 <mpu_read_mem+0xa0>)
 800ad2e:	7a9b      	ldrb	r3, [r3, #10]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d102      	bne.n	800ad3a <mpu_read_mem+0x2a>
        return -1;
 800ad34:	f04f 33ff 	mov.w	r3, #4294967295
 800ad38:	e036      	b.n	800ada8 <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800ad3a:	88fb      	ldrh	r3, [r7, #6]
 800ad3c:	0a1b      	lsrs	r3, r3, #8
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800ad44:	88fb      	ldrh	r3, [r7, #6]
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800ad4a:	7b7b      	ldrb	r3, [r7, #13]
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	88bb      	ldrh	r3, [r7, #4]
 800ad50:	4413      	add	r3, r2
 800ad52:	4a17      	ldr	r2, [pc, #92]	@ (800adb0 <mpu_read_mem+0xa0>)
 800ad54:	6852      	ldr	r2, [r2, #4]
 800ad56:	8952      	ldrh	r2, [r2, #10]
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	dd02      	ble.n	800ad62 <mpu_read_mem+0x52>
        return -1;
 800ad5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad60:	e022      	b.n	800ada8 <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800ad62:	4b13      	ldr	r3, [pc, #76]	@ (800adb0 <mpu_read_mem+0xa0>)
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	7818      	ldrb	r0, [r3, #0]
 800ad68:	4b11      	ldr	r3, [pc, #68]	@ (800adb0 <mpu_read_mem+0xa0>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	7ed9      	ldrb	r1, [r3, #27]
 800ad6e:	f107 030c 	add.w	r3, r7, #12
 800ad72:	2202      	movs	r2, #2
 800ad74:	f7fe f87e 	bl	8008e74 <i2c_write>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d002      	beq.n	800ad84 <mpu_read_mem+0x74>
        return -1;
 800ad7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad82:	e011      	b.n	800ada8 <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 800ad84:	4b0a      	ldr	r3, [pc, #40]	@ (800adb0 <mpu_read_mem+0xa0>)
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	7818      	ldrb	r0, [r3, #0]
 800ad8a:	4b09      	ldr	r3, [pc, #36]	@ (800adb0 <mpu_read_mem+0xa0>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	7e19      	ldrb	r1, [r3, #24]
 800ad90:	88bb      	ldrh	r3, [r7, #4]
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	f7fe f88f 	bl	8008eb8 <i2c_read>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d002      	beq.n	800ada6 <mpu_read_mem+0x96>
        return -1;
 800ada0:	f04f 33ff 	mov.w	r3, #4294967295
 800ada4:	e000      	b.n	800ada8 <mpu_read_mem+0x98>
    return 0;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	2000001c 	.word	0x2000001c

0800adb4 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08a      	sub	sp, #40	@ 0x28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60b9      	str	r1, [r7, #8]
 800adbc:	4611      	mov	r1, r2
 800adbe:	461a      	mov	r2, r3
 800adc0:	4603      	mov	r3, r0
 800adc2:	81fb      	strh	r3, [r7, #14]
 800adc4:	460b      	mov	r3, r1
 800adc6:	81bb      	strh	r3, [r7, #12]
 800adc8:	4613      	mov	r3, r2
 800adca:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 800adcc:	4b37      	ldr	r3, [pc, #220]	@ (800aeac <mpu_load_firmware+0xf8>)
 800adce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800add2:	2b00      	cmp	r3, #0
 800add4:	d002      	beq.n	800addc <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800add6:	f04f 33ff 	mov.w	r3, #4294967295
 800adda:	e062      	b.n	800aea2 <mpu_load_firmware+0xee>

    if (!firmware)
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d102      	bne.n	800ade8 <mpu_load_firmware+0x34>
        return -1;
 800ade2:	f04f 33ff 	mov.w	r3, #4294967295
 800ade6:	e05c      	b.n	800aea2 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 800ade8:	2300      	movs	r3, #0
 800adea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800adec:	e034      	b.n	800ae58 <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 800adee:	89fa      	ldrh	r2, [r7, #14]
 800adf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	2b10      	cmp	r3, #16
 800adf6:	bfa8      	it	ge
 800adf8:	2310      	movge	r3, #16
 800adfa:	84bb      	strh	r3, [r7, #36]	@ 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 800adfc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	441a      	add	r2, r3
 800ae02:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800ae04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7ff ff30 	bl	800ac6c <mpu_write_mem>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <mpu_load_firmware+0x64>
            return -1;
 800ae12:	f04f 33ff 	mov.w	r3, #4294967295
 800ae16:	e044      	b.n	800aea2 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 800ae18:	f107 0214 	add.w	r2, r7, #20
 800ae1c:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800ae1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7ff ff75 	bl	800ad10 <mpu_read_mem>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d002      	beq.n	800ae32 <mpu_load_firmware+0x7e>
            return -1;
 800ae2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae30:	e037      	b.n	800aea2 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 800ae32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	4413      	add	r3, r2
 800ae38:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ae3a:	f107 0114 	add.w	r1, r7, #20
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f002 fc7c 	bl	800d73c <memcmp>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d002      	beq.n	800ae50 <mpu_load_firmware+0x9c>
            return -2;
 800ae4a:	f06f 0301 	mvn.w	r3, #1
 800ae4e:	e028      	b.n	800aea2 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 800ae50:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ae52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ae54:	4413      	add	r3, r2
 800ae56:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ae58:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ae5a:	89fb      	ldrh	r3, [r7, #14]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d3c6      	bcc.n	800adee <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 800ae60:	89bb      	ldrh	r3, [r7, #12]
 800ae62:	0a1b      	lsrs	r3, r3, #8
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 800ae6a:	89bb      	ldrh	r3, [r7, #12]
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 800ae70:	4b0e      	ldr	r3, [pc, #56]	@ (800aeac <mpu_load_firmware+0xf8>)
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	7818      	ldrb	r0, [r3, #0]
 800ae76:	4b0d      	ldr	r3, [pc, #52]	@ (800aeac <mpu_load_firmware+0xf8>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	7f59      	ldrb	r1, [r3, #29]
 800ae7c:	f107 0310 	add.w	r3, r7, #16
 800ae80:	2202      	movs	r2, #2
 800ae82:	f7fd fff7 	bl	8008e74 <i2c_write>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d002      	beq.n	800ae92 <mpu_load_firmware+0xde>
        return -1;
 800ae8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae90:	e007      	b.n	800aea2 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 800ae92:	4b06      	ldr	r3, [pc, #24]	@ (800aeac <mpu_load_firmware+0xf8>)
 800ae94:	2201      	movs	r2, #1
 800ae96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 800ae9a:	4a04      	ldr	r2, [pc, #16]	@ (800aeac <mpu_load_firmware+0xf8>)
 800ae9c:	88fb      	ldrh	r3, [r7, #6]
 800ae9e:	84d3      	strh	r3, [r2, #38]	@ 0x26
    return 0;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3728      	adds	r7, #40	@ 0x28
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	2000001c 	.word	0x2000001c

0800aeb0 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 800aeba:	4b26      	ldr	r3, [pc, #152]	@ (800af54 <mpu_set_dmp_state+0xa4>)
 800aebc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800aec0:	79fa      	ldrb	r2, [r7, #7]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d101      	bne.n	800aeca <mpu_set_dmp_state+0x1a>
        return 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	e040      	b.n	800af4c <mpu_set_dmp_state+0x9c>

    if (enable) {
 800aeca:	79fb      	ldrb	r3, [r7, #7]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d027      	beq.n	800af20 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 800aed0:	4b20      	ldr	r3, [pc, #128]	@ (800af54 <mpu_set_dmp_state+0xa4>)
 800aed2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d102      	bne.n	800aee0 <mpu_set_dmp_state+0x30>
            return -1;
 800aeda:	f04f 33ff 	mov.w	r3, #4294967295
 800aede:	e035      	b.n	800af4c <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 800aee0:	2000      	movs	r0, #0
 800aee2:	f7fe f89b 	bl	800901c <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800aee6:	2000      	movs	r0, #0
 800aee8:	f7fe ff94 	bl	8009e14 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 800aeec:	4b19      	ldr	r3, [pc, #100]	@ (800af54 <mpu_set_dmp_state+0xa4>)
 800aeee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fe fd4b 	bl	800998c <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800aefa:	4b16      	ldr	r3, [pc, #88]	@ (800af54 <mpu_set_dmp_state+0xa4>)
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	7818      	ldrb	r0, [r3, #0]
 800af00:	f107 030f 	add.w	r3, r7, #15
 800af04:	2201      	movs	r2, #1
 800af06:	2123      	movs	r1, #35	@ 0x23
 800af08:	f7fd ffb4 	bl	8008e74 <i2c_write>
        st.chip_cfg.dmp_on = 1;
 800af0c:	4b11      	ldr	r3, [pc, #68]	@ (800af54 <mpu_set_dmp_state+0xa4>)
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 800af14:	2001      	movs	r0, #1
 800af16:	f7fe f881 	bl	800901c <set_int_enable>
        mpu_reset_fifo();
 800af1a:	f7fe fa63 	bl	80093e4 <mpu_reset_fifo>
 800af1e:	e014      	b.n	800af4a <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 800af20:	2000      	movs	r0, #0
 800af22:	f7fe f87b 	bl	800901c <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 800af26:	4b0b      	ldr	r3, [pc, #44]	@ (800af54 <mpu_set_dmp_state+0xa4>)
 800af28:	7c1b      	ldrb	r3, [r3, #16]
 800af2a:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800af2c:	4b09      	ldr	r3, [pc, #36]	@ (800af54 <mpu_set_dmp_state+0xa4>)
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	7818      	ldrb	r0, [r3, #0]
 800af32:	f107 030f 	add.w	r3, r7, #15
 800af36:	2201      	movs	r2, #1
 800af38:	2123      	movs	r1, #35	@ 0x23
 800af3a:	f7fd ff9b 	bl	8008e74 <i2c_write>
        st.chip_cfg.dmp_on = 0;
 800af3e:	4b05      	ldr	r3, [pc, #20]	@ (800af54 <mpu_set_dmp_state+0xa4>)
 800af40:	2200      	movs	r2, #0
 800af42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        mpu_reset_fifo();
 800af46:	f7fe fa4d 	bl	80093e4 <mpu_reset_fifo>
    }
    return 0;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	2000001c 	.word	0x2000001c

0800af58 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 800af5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800af60:	23c8      	movs	r3, #200	@ 0xc8
 800af62:	4904      	ldr	r1, [pc, #16]	@ (800af74 <dmp_load_motion_driver_firmware+0x1c>)
 800af64:	f640 30f6 	movw	r0, #3062	@ 0xbf6
 800af68:	f7ff ff24 	bl	800adb4 <mpu_load_firmware>
 800af6c:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 800af6e:	4618      	mov	r0, r3
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	08011028 	.word	0x08011028

0800af78 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b088      	sub	sp, #32
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 800af82:	4a6e      	ldr	r2, [pc, #440]	@ (800b13c <dmp_set_orientation+0x1c4>)
 800af84:	f107 0314 	add.w	r3, r7, #20
 800af88:	6812      	ldr	r2, [r2, #0]
 800af8a:	4611      	mov	r1, r2
 800af8c:	8019      	strh	r1, [r3, #0]
 800af8e:	3302      	adds	r3, #2
 800af90:	0c12      	lsrs	r2, r2, #16
 800af92:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 800af94:	4a6a      	ldr	r2, [pc, #424]	@ (800b140 <dmp_set_orientation+0x1c8>)
 800af96:	f107 0310 	add.w	r3, r7, #16
 800af9a:	6812      	ldr	r2, [r2, #0]
 800af9c:	4611      	mov	r1, r2
 800af9e:	8019      	strh	r1, [r3, #0]
 800afa0:	3302      	adds	r3, #2
 800afa2:	0c12      	lsrs	r2, r2, #16
 800afa4:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 800afa6:	4a67      	ldr	r2, [pc, #412]	@ (800b144 <dmp_set_orientation+0x1cc>)
 800afa8:	f107 030c 	add.w	r3, r7, #12
 800afac:	6812      	ldr	r2, [r2, #0]
 800afae:	4611      	mov	r1, r2
 800afb0:	8019      	strh	r1, [r3, #0]
 800afb2:	3302      	adds	r3, #2
 800afb4:	0c12      	lsrs	r2, r2, #16
 800afb6:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 800afb8:	4a63      	ldr	r2, [pc, #396]	@ (800b148 <dmp_set_orientation+0x1d0>)
 800afba:	f107 0308 	add.w	r3, r7, #8
 800afbe:	6812      	ldr	r2, [r2, #0]
 800afc0:	4611      	mov	r1, r2
 800afc2:	8019      	strh	r1, [r3, #0]
 800afc4:	3302      	adds	r3, #2
 800afc6:	0c12      	lsrs	r2, r2, #16
 800afc8:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 800afca:	88fb      	ldrh	r3, [r7, #6]
 800afcc:	f003 0303 	and.w	r3, r3, #3
 800afd0:	3320      	adds	r3, #32
 800afd2:	443b      	add	r3, r7
 800afd4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800afd8:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 800afda:	88fb      	ldrh	r3, [r7, #6]
 800afdc:	08db      	lsrs	r3, r3, #3
 800afde:	b29b      	uxth	r3, r3
 800afe0:	f003 0303 	and.w	r3, r3, #3
 800afe4:	3320      	adds	r3, #32
 800afe6:	443b      	add	r3, r7
 800afe8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800afec:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 800afee:	88fb      	ldrh	r3, [r7, #6]
 800aff0:	099b      	lsrs	r3, r3, #6
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	f003 0303 	and.w	r3, r3, #3
 800aff8:	3320      	adds	r3, #32
 800affa:	443b      	add	r3, r7
 800affc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800b000:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 800b002:	88fb      	ldrh	r3, [r7, #6]
 800b004:	f003 0303 	and.w	r3, r3, #3
 800b008:	3320      	adds	r3, #32
 800b00a:	443b      	add	r3, r7
 800b00c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800b010:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 800b012:	88fb      	ldrh	r3, [r7, #6]
 800b014:	08db      	lsrs	r3, r3, #3
 800b016:	b29b      	uxth	r3, r3
 800b018:	f003 0303 	and.w	r3, r3, #3
 800b01c:	3320      	adds	r3, #32
 800b01e:	443b      	add	r3, r7
 800b020:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800b024:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 800b026:	88fb      	ldrh	r3, [r7, #6]
 800b028:	099b      	lsrs	r3, r3, #6
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	f003 0303 	and.w	r3, r3, #3
 800b030:	3320      	adds	r3, #32
 800b032:	443b      	add	r3, r7
 800b034:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800b038:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 800b03a:	f107 031c 	add.w	r3, r7, #28
 800b03e:	461a      	mov	r2, r3
 800b040:	2103      	movs	r1, #3
 800b042:	f240 4026 	movw	r0, #1062	@ 0x426
 800b046:	f7ff fe11 	bl	800ac6c <mpu_write_mem>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d002      	beq.n	800b056 <dmp_set_orientation+0xde>
        return -1;
 800b050:	f04f 33ff 	mov.w	r3, #4294967295
 800b054:	e06e      	b.n	800b134 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 800b056:	f107 0318 	add.w	r3, r7, #24
 800b05a:	461a      	mov	r2, r3
 800b05c:	2103      	movs	r1, #3
 800b05e:	f240 402a 	movw	r0, #1066	@ 0x42a
 800b062:	f7ff fe03 	bl	800ac6c <mpu_write_mem>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d002      	beq.n	800b072 <dmp_set_orientation+0xfa>
        return -1;
 800b06c:	f04f 33ff 	mov.w	r3, #4294967295
 800b070:	e060      	b.n	800b134 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 800b072:	f107 031c 	add.w	r3, r7, #28
 800b076:	f107 020c 	add.w	r2, r7, #12
 800b07a:	6812      	ldr	r2, [r2, #0]
 800b07c:	4611      	mov	r1, r2
 800b07e:	8019      	strh	r1, [r3, #0]
 800b080:	3302      	adds	r3, #2
 800b082:	0c12      	lsrs	r2, r2, #16
 800b084:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 800b086:	f107 0318 	add.w	r3, r7, #24
 800b08a:	f107 0208 	add.w	r2, r7, #8
 800b08e:	6812      	ldr	r2, [r2, #0]
 800b090:	4611      	mov	r1, r2
 800b092:	8019      	strh	r1, [r3, #0]
 800b094:	3302      	adds	r3, #2
 800b096:	0c12      	lsrs	r2, r2, #16
 800b098:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 800b09a:	88fb      	ldrh	r3, [r7, #6]
 800b09c:	f003 0304 	and.w	r3, r3, #4
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d009      	beq.n	800b0b8 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 800b0a4:	7f3b      	ldrb	r3, [r7, #28]
 800b0a6:	f043 0301 	orr.w	r3, r3, #1
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 800b0ae:	7e3b      	ldrb	r3, [r7, #24]
 800b0b0:	f043 0301 	orr.w	r3, r3, #1
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 800b0b8:	88fb      	ldrh	r3, [r7, #6]
 800b0ba:	f003 0320 	and.w	r3, r3, #32
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d009      	beq.n	800b0d6 <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 800b0c2:	7f7b      	ldrb	r3, [r7, #29]
 800b0c4:	f043 0301 	orr.w	r3, r3, #1
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 800b0cc:	7e7b      	ldrb	r3, [r7, #25]
 800b0ce:	f043 0301 	orr.w	r3, r3, #1
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 800b0d6:	88fb      	ldrh	r3, [r7, #6]
 800b0d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d009      	beq.n	800b0f4 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 800b0e0:	7fbb      	ldrb	r3, [r7, #30]
 800b0e2:	f043 0301 	orr.w	r3, r3, #1
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 800b0ea:	7ebb      	ldrb	r3, [r7, #26]
 800b0ec:	f043 0301 	orr.w	r3, r3, #1
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800b0f4:	f107 031c 	add.w	r3, r7, #28
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	2103      	movs	r1, #3
 800b0fc:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 800b100:	f7ff fdb4 	bl	800ac6c <mpu_write_mem>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d002      	beq.n	800b110 <dmp_set_orientation+0x198>
        return -1;
 800b10a:	f04f 33ff 	mov.w	r3, #4294967295
 800b10e:	e011      	b.n	800b134 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 800b110:	f107 0318 	add.w	r3, r7, #24
 800b114:	461a      	mov	r2, r3
 800b116:	2103      	movs	r1, #3
 800b118:	f240 4031 	movw	r0, #1073	@ 0x431
 800b11c:	f7ff fda6 	bl	800ac6c <mpu_write_mem>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <dmp_set_orientation+0x1b4>
        return -1;
 800b126:	f04f 33ff 	mov.w	r3, #4294967295
 800b12a:	e003      	b.n	800b134 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 800b12c:	4a07      	ldr	r2, [pc, #28]	@ (800b14c <dmp_set_orientation+0x1d4>)
 800b12e:	88fb      	ldrh	r3, [r7, #6]
 800b130:	8113      	strh	r3, [r2, #8]
    return 0;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	3720      	adds	r7, #32
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	08010f4c 	.word	0x08010f4c
 800b140:	08010f50 	.word	0x08010f50
 800b144:	08010f54 	.word	0x08010f54
 800b148:	08010f58 	.word	0x08010f58
 800b14c:	200044bc 	.word	0x200044bc

0800b150 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 800b150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b154:	b08c      	sub	sp, #48	@ 0x30
 800b156:	af00      	add	r7, sp, #0
 800b158:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 800b15a:	4b80      	ldr	r3, [pc, #512]	@ (800b35c <dmp_set_gyro_bias+0x20c>)
 800b15c:	891b      	ldrh	r3, [r3, #8]
 800b15e:	f003 0303 	and.w	r3, r3, #3
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	69fa      	ldr	r2, [r7, #28]
 800b166:	4413      	add	r3, r2
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (dmp.orient & 4)
 800b16c:	4b7b      	ldr	r3, [pc, #492]	@ (800b35c <dmp_set_gyro_bias+0x20c>)
 800b16e:	891b      	ldrh	r3, [r3, #8]
 800b170:	f003 0304 	and.w	r3, r3, #4
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 800b178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17a:	425b      	negs	r3, r3
 800b17c:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800b17e:	4b77      	ldr	r3, [pc, #476]	@ (800b35c <dmp_set_gyro_bias+0x20c>)
 800b180:	891b      	ldrh	r3, [r3, #8]
 800b182:	08db      	lsrs	r3, r3, #3
 800b184:	b29b      	uxth	r3, r3
 800b186:	f003 0303 	and.w	r3, r3, #3
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	69fa      	ldr	r2, [r7, #28]
 800b18e:	4413      	add	r3, r2
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (dmp.orient & 0x20)
 800b194:	4b71      	ldr	r3, [pc, #452]	@ (800b35c <dmp_set_gyro_bias+0x20c>)
 800b196:	891b      	ldrh	r3, [r3, #8]
 800b198:	f003 0320 	and.w	r3, r3, #32
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d002      	beq.n	800b1a6 <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 800b1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a2:	425b      	negs	r3, r3
 800b1a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 800b1a6:	4b6d      	ldr	r3, [pc, #436]	@ (800b35c <dmp_set_gyro_bias+0x20c>)
 800b1a8:	891b      	ldrh	r3, [r3, #8]
 800b1aa:	099b      	lsrs	r3, r3, #6
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	f003 0303 	and.w	r3, r3, #3
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	69fa      	ldr	r2, [r7, #28]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dmp.orient & 0x100)
 800b1bc:	4b67      	ldr	r3, [pc, #412]	@ (800b35c <dmp_set_gyro_bias+0x20c>)
 800b1be:	891b      	ldrh	r3, [r3, #8]
 800b1c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 800b1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ca:	425b      	negs	r3, r3
 800b1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d0:	17da      	asrs	r2, r3, #31
 800b1d2:	613b      	str	r3, [r7, #16]
 800b1d4:	617a      	str	r2, [r7, #20]
 800b1d6:	4b62      	ldr	r3, [pc, #392]	@ (800b360 <dmp_set_gyro_bias+0x210>)
 800b1d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b1dc:	460a      	mov	r2, r1
 800b1de:	fb03 f202 	mul.w	r2, r3, r2
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800b1e8:	4601      	mov	r1, r0
 800b1ea:	fb01 f303 	mul.w	r3, r1, r3
 800b1ee:	4413      	add	r3, r2
 800b1f0:	4a5b      	ldr	r2, [pc, #364]	@ (800b360 <dmp_set_gyro_bias+0x210>)
 800b1f2:	6939      	ldr	r1, [r7, #16]
 800b1f4:	fba1 ab02 	umull	sl, fp, r1, r2
 800b1f8:	445b      	add	r3, fp
 800b1fa:	469b      	mov	fp, r3
 800b1fc:	f04f 0200 	mov.w	r2, #0
 800b200:	f04f 0300 	mov.w	r3, #0
 800b204:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800b208:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 800b20c:	ea4f 73ab 	mov.w	r3, fp, asr #30
 800b210:	4613      	mov	r3, r2
 800b212:	627b      	str	r3, [r7, #36]	@ 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 800b214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b216:	17da      	asrs	r2, r3, #31
 800b218:	60bb      	str	r3, [r7, #8]
 800b21a:	60fa      	str	r2, [r7, #12]
 800b21c:	4b50      	ldr	r3, [pc, #320]	@ (800b360 <dmp_set_gyro_bias+0x210>)
 800b21e:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800b222:	465a      	mov	r2, fp
 800b224:	fb03 f202 	mul.w	r2, r3, r2
 800b228:	2300      	movs	r3, #0
 800b22a:	4651      	mov	r1, sl
 800b22c:	fb01 f303 	mul.w	r3, r1, r3
 800b230:	4413      	add	r3, r2
 800b232:	4a4b      	ldr	r2, [pc, #300]	@ (800b360 <dmp_set_gyro_bias+0x210>)
 800b234:	4651      	mov	r1, sl
 800b236:	fba1 8902 	umull	r8, r9, r1, r2
 800b23a:	444b      	add	r3, r9
 800b23c:	4699      	mov	r9, r3
 800b23e:	f04f 0200 	mov.w	r2, #0
 800b242:	f04f 0300 	mov.w	r3, #0
 800b246:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800b24a:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800b24e:	ea4f 73a9 	mov.w	r3, r9, asr #30
 800b252:	4613      	mov	r3, r2
 800b254:	62bb      	str	r3, [r7, #40]	@ 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 800b256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b258:	17da      	asrs	r2, r3, #31
 800b25a:	603b      	str	r3, [r7, #0]
 800b25c:	607a      	str	r2, [r7, #4]
 800b25e:	4b40      	ldr	r3, [pc, #256]	@ (800b360 <dmp_set_gyro_bias+0x210>)
 800b260:	e9d7 8900 	ldrd	r8, r9, [r7]
 800b264:	464a      	mov	r2, r9
 800b266:	fb03 f202 	mul.w	r2, r3, r2
 800b26a:	2300      	movs	r3, #0
 800b26c:	4641      	mov	r1, r8
 800b26e:	fb01 f303 	mul.w	r3, r1, r3
 800b272:	4413      	add	r3, r2
 800b274:	4a3a      	ldr	r2, [pc, #232]	@ (800b360 <dmp_set_gyro_bias+0x210>)
 800b276:	4641      	mov	r1, r8
 800b278:	fba1 4502 	umull	r4, r5, r1, r2
 800b27c:	442b      	add	r3, r5
 800b27e:	461d      	mov	r5, r3
 800b280:	f04f 0200 	mov.w	r2, #0
 800b284:	f04f 0300 	mov.w	r3, #0
 800b288:	0fa2      	lsrs	r2, r4, #30
 800b28a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800b28e:	17ab      	asrs	r3, r5, #30
 800b290:	4613      	mov	r3, r2
 800b292:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 800b294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b296:	161b      	asrs	r3, r3, #24
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 800b29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a0:	141b      	asrs	r3, r3, #16
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2aa:	121b      	asrs	r3, r3, #8
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 800b2ba:	f107 0320 	add.w	r3, r7, #32
 800b2be:	461a      	mov	r2, r3
 800b2c0:	2104      	movs	r1, #4
 800b2c2:	f44f 7074 	mov.w	r0, #976	@ 0x3d0
 800b2c6:	f7ff fcd1 	bl	800ac6c <mpu_write_mem>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <dmp_set_gyro_bias+0x186>
        return -1;
 800b2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2d4:	e03c      	b.n	800b350 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 800b2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d8:	161b      	asrs	r3, r3, #24
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 800b2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e2:	141b      	asrs	r3, r3, #16
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 800b2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ec:	121b      	asrs	r3, r3, #8
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 800b2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 800b2fc:	f107 0320 	add.w	r3, r7, #32
 800b300:	461a      	mov	r2, r3
 800b302:	2104      	movs	r1, #4
 800b304:	f44f 7075 	mov.w	r0, #980	@ 0x3d4
 800b308:	f7ff fcb0 	bl	800ac6c <mpu_write_mem>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d002      	beq.n	800b318 <dmp_set_gyro_bias+0x1c8>
        return -1;
 800b312:	f04f 33ff 	mov.w	r3, #4294967295
 800b316:	e01b      	b.n	800b350 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 800b318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b31a:	161b      	asrs	r3, r3, #24
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 800b322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b324:	141b      	asrs	r3, r3, #16
 800b326:	b2db      	uxtb	r3, r3
 800b328:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 800b32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b32e:	121b      	asrs	r3, r3, #8
 800b330:	b2db      	uxtb	r3, r3
 800b332:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 800b336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 800b33e:	f107 0320 	add.w	r3, r7, #32
 800b342:	461a      	mov	r2, r3
 800b344:	2104      	movs	r1, #4
 800b346:	f44f 7076 	mov.w	r0, #984	@ 0x3d8
 800b34a:	f7ff fc8f 	bl	800ac6c <mpu_write_mem>
 800b34e:	4603      	mov	r3, r0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3730      	adds	r7, #48	@ 0x30
 800b354:	46bd      	mov	sp, r7
 800b356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b35a:	bf00      	nop
 800b35c:	200044bc 	.word	0x200044bc
 800b360:	02cae309 	.word	0x02cae309

0800b364 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 800b364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b368:	b094      	sub	sp, #80	@ 0x50
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6278      	str	r0, [r7, #36]	@ 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 800b36e:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800b372:	4618      	mov	r0, r3
 800b374:	f7fe fba8 	bl	8009ac8 <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 800b378:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	2200      	movs	r2, #0
 800b37e:	61bb      	str	r3, [r7, #24]
 800b380:	61fa      	str	r2, [r7, #28]
 800b382:	f04f 0200 	mov.w	r2, #0
 800b386:	f04f 0300 	mov.w	r3, #0
 800b38a:	69f9      	ldr	r1, [r7, #28]
 800b38c:	03cb      	lsls	r3, r1, #15
 800b38e:	69b9      	ldr	r1, [r7, #24]
 800b390:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 800b394:	69b9      	ldr	r1, [r7, #24]
 800b396:	03ca      	lsls	r2, r1, #15
 800b398:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    __no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 800b39c:	4b71      	ldr	r3, [pc, #452]	@ (800b564 <dmp_set_accel_bias+0x200>)
 800b39e:	891b      	ldrh	r3, [r3, #8]
 800b3a0:	f003 0303 	and.w	r3, r3, #3
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3a8:	4413      	add	r3, r2
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (dmp.orient & 4)
 800b3ae:	4b6d      	ldr	r3, [pc, #436]	@ (800b564 <dmp_set_accel_bias+0x200>)
 800b3b0:	891b      	ldrh	r3, [r3, #8]
 800b3b2:	f003 0304 	and.w	r3, r3, #4
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d002      	beq.n	800b3c0 <dmp_set_accel_bias+0x5c>
        accel_bias_body[0] *= -1;
 800b3ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3bc:	425b      	negs	r3, r3
 800b3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 800b3c0:	4b68      	ldr	r3, [pc, #416]	@ (800b564 <dmp_set_accel_bias+0x200>)
 800b3c2:	891b      	ldrh	r3, [r3, #8]
 800b3c4:	08db      	lsrs	r3, r3, #3
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	f003 0303 	and.w	r3, r3, #3
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3d0:	4413      	add	r3, r2
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (dmp.orient & 0x20)
 800b3d6:	4b63      	ldr	r3, [pc, #396]	@ (800b564 <dmp_set_accel_bias+0x200>)
 800b3d8:	891b      	ldrh	r3, [r3, #8]
 800b3da:	f003 0320 	and.w	r3, r3, #32
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d002      	beq.n	800b3e8 <dmp_set_accel_bias+0x84>
        accel_bias_body[1] *= -1;
 800b3e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3e4:	425b      	negs	r3, r3
 800b3e6:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 800b3e8:	4b5e      	ldr	r3, [pc, #376]	@ (800b564 <dmp_set_accel_bias+0x200>)
 800b3ea:	891b      	ldrh	r3, [r3, #8]
 800b3ec:	099b      	lsrs	r3, r3, #6
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	f003 0303 	and.w	r3, r3, #3
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3f8:	4413      	add	r3, r2
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	647b      	str	r3, [r7, #68]	@ 0x44
    if (dmp.orient & 0x100)
 800b3fe:	4b59      	ldr	r3, [pc, #356]	@ (800b564 <dmp_set_accel_bias+0x200>)
 800b400:	891b      	ldrh	r3, [r3, #8]
 800b402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b406:	2b00      	cmp	r3, #0
 800b408:	d002      	beq.n	800b410 <dmp_set_accel_bias+0xac>
        accel_bias_body[2] *= -1;
 800b40a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b40c:	425b      	negs	r3, r3
 800b40e:	647b      	str	r3, [r7, #68]	@ 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 800b410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b412:	17da      	asrs	r2, r3, #31
 800b414:	613b      	str	r3, [r7, #16]
 800b416:	617a      	str	r2, [r7, #20]
 800b418:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b41a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b41e:	460a      	mov	r2, r1
 800b420:	fb02 f203 	mul.w	r2, r2, r3
 800b424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b426:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800b42a:	4601      	mov	r1, r0
 800b42c:	fb01 f303 	mul.w	r3, r1, r3
 800b430:	4413      	add	r3, r2
 800b432:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b434:	6939      	ldr	r1, [r7, #16]
 800b436:	fba2 ab01 	umull	sl, fp, r2, r1
 800b43a:	445b      	add	r3, fp
 800b43c:	469b      	mov	fp, r3
 800b43e:	f04f 0200 	mov.w	r2, #0
 800b442:	f04f 0300 	mov.w	r3, #0
 800b446:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800b44a:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 800b44e:	ea4f 73ab 	mov.w	r3, fp, asr #30
 800b452:	4613      	mov	r3, r2
 800b454:	63fb      	str	r3, [r7, #60]	@ 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 800b456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b458:	17da      	asrs	r2, r3, #31
 800b45a:	60bb      	str	r3, [r7, #8]
 800b45c:	60fa      	str	r2, [r7, #12]
 800b45e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b460:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800b464:	465a      	mov	r2, fp
 800b466:	fb02 f203 	mul.w	r2, r2, r3
 800b46a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b46c:	4651      	mov	r1, sl
 800b46e:	fb01 f303 	mul.w	r3, r1, r3
 800b472:	4413      	add	r3, r2
 800b474:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b476:	4651      	mov	r1, sl
 800b478:	fba2 8901 	umull	r8, r9, r2, r1
 800b47c:	444b      	add	r3, r9
 800b47e:	4699      	mov	r9, r3
 800b480:	f04f 0200 	mov.w	r2, #0
 800b484:	f04f 0300 	mov.w	r3, #0
 800b488:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800b48c:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800b490:	ea4f 73a9 	mov.w	r3, r9, asr #30
 800b494:	4613      	mov	r3, r2
 800b496:	643b      	str	r3, [r7, #64]	@ 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 800b498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b49a:	17da      	asrs	r2, r3, #31
 800b49c:	603b      	str	r3, [r7, #0]
 800b49e:	607a      	str	r2, [r7, #4]
 800b4a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4a2:	e9d7 8900 	ldrd	r8, r9, [r7]
 800b4a6:	464a      	mov	r2, r9
 800b4a8:	fb02 f203 	mul.w	r2, r2, r3
 800b4ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4ae:	4641      	mov	r1, r8
 800b4b0:	fb01 f303 	mul.w	r3, r1, r3
 800b4b4:	4413      	add	r3, r2
 800b4b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4b8:	4641      	mov	r1, r8
 800b4ba:	fba2 4501 	umull	r4, r5, r2, r1
 800b4be:	442b      	add	r3, r5
 800b4c0:	461d      	mov	r5, r3
 800b4c2:	f04f 0200 	mov.w	r2, #0
 800b4c6:	f04f 0300 	mov.w	r3, #0
 800b4ca:	0fa2      	lsrs	r2, r4, #30
 800b4cc:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800b4d0:	17ab      	asrs	r3, r5, #30
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	647b      	str	r3, [r7, #68]	@ 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 800b4d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4d8:	161b      	asrs	r3, r3, #24
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 800b4e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4e2:	141b      	asrs	r3, r3, #16
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 800b4ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ec:	121b      	asrs	r3, r3, #8
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 800b4f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 800b4fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4fe:	161b      	asrs	r3, r3, #24
 800b500:	b2db      	uxtb	r3, r3
 800b502:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 800b506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b508:	141b      	asrs	r3, r3, #16
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 800b510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b512:	121b      	asrs	r3, r3, #8
 800b514:	b2db      	uxtb	r3, r3
 800b516:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 800b51a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 800b522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b524:	161b      	asrs	r3, r3, #24
 800b526:	b2db      	uxtb	r3, r3
 800b528:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 800b52c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b52e:	141b      	asrs	r3, r3, #16
 800b530:	b2db      	uxtb	r3, r3
 800b532:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 800b536:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b538:	121b      	asrs	r3, r3, #8
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 800b540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b542:	b2db      	uxtb	r3, r3
 800b544:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 800b548:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b54c:	461a      	mov	r2, r3
 800b54e:	210c      	movs	r1, #12
 800b550:	f44f 7025 	mov.w	r0, #660	@ 0x294
 800b554:	f7ff fb8a 	bl	800ac6c <mpu_write_mem>
 800b558:	4603      	mov	r3, r0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3750      	adds	r7, #80	@ 0x50
 800b55e:	46bd      	mov	sp, r7
 800b560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b564:	200044bc 	.word	0x200044bc

0800b568 <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b088      	sub	sp, #32
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	4603      	mov	r3, r0
 800b570:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 800b572:	4a1f      	ldr	r2, [pc, #124]	@ (800b5f0 <dmp_set_fifo_rate+0x88>)
 800b574:	f107 0310 	add.w	r3, r7, #16
 800b578:	ca07      	ldmia	r2, {r0, r1, r2}
 800b57a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 800b57e:	88fb      	ldrh	r3, [r7, #6]
 800b580:	2bc8      	cmp	r3, #200	@ 0xc8
 800b582:	d902      	bls.n	800b58a <dmp_set_fifo_rate+0x22>
        return -1;
 800b584:	f04f 33ff 	mov.w	r3, #4294967295
 800b588:	e02e      	b.n	800b5e8 <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 800b58a:	88fb      	ldrh	r3, [r7, #6]
 800b58c:	22c8      	movs	r2, #200	@ 0xc8
 800b58e:	fb92 f3f3 	sdiv	r3, r2, r3
 800b592:	b29b      	uxth	r3, r3
 800b594:	3b01      	subs	r3, #1
 800b596:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800b598:	8bfb      	ldrh	r3, [r7, #30]
 800b59a:	0a1b      	lsrs	r3, r3, #8
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 800b5a2:	8bfb      	ldrh	r3, [r7, #30]
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 800b5a8:	f107 0308 	add.w	r3, r7, #8
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	2102      	movs	r1, #2
 800b5b0:	f240 2016 	movw	r0, #534	@ 0x216
 800b5b4:	f7ff fb5a 	bl	800ac6c <mpu_write_mem>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <dmp_set_fifo_rate+0x5c>
        return -1;
 800b5be:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c2:	e011      	b.n	800b5e8 <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 800b5c4:	f107 0310 	add.w	r3, r7, #16
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	210c      	movs	r1, #12
 800b5cc:	f640 20c1 	movw	r0, #2753	@ 0xac1
 800b5d0:	f7ff fb4c 	bl	800ac6c <mpu_write_mem>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d002      	beq.n	800b5e0 <dmp_set_fifo_rate+0x78>
        return -1;
 800b5da:	f04f 33ff 	mov.w	r3, #4294967295
 800b5de:	e003      	b.n	800b5e8 <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 800b5e0:	4a04      	ldr	r2, [pc, #16]	@ (800b5f4 <dmp_set_fifo_rate+0x8c>)
 800b5e2:	88fb      	ldrh	r3, [r7, #6]
 800b5e4:	8193      	strh	r3, [r2, #12]
    return 0;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3720      	adds	r7, #32
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	08010f5c 	.word	0x08010f5c
 800b5f4:	200044bc 	.word	0x200044bc

0800b5f8 <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b086      	sub	sp, #24
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	4603      	mov	r3, r0
 800b600:	460a      	mov	r2, r1
 800b602:	71fb      	strb	r3, [r7, #7]
 800b604:	4613      	mov	r3, r2
 800b606:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 800b608:	79fb      	ldrb	r3, [r7, #7]
 800b60a:	f003 0307 	and.w	r3, r3, #7
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d003      	beq.n	800b61a <dmp_set_tap_thresh+0x22>
 800b612:	88bb      	ldrh	r3, [r7, #4]
 800b614:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b618:	d902      	bls.n	800b620 <dmp_set_tap_thresh+0x28>
        return -1;
 800b61a:	f04f 33ff 	mov.w	r3, #4294967295
 800b61e:	e10b      	b.n	800b838 <dmp_set_tap_thresh+0x240>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 800b620:	88bb      	ldrh	r3, [r7, #4]
 800b622:	ee07 3a90 	vmov	s15, r3
 800b626:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b62a:	eddf 6a85 	vldr	s13, [pc, #532]	@ 800b840 <dmp_set_tap_thresh+0x248>
 800b62e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b632:	edc7 7a04 	vstr	s15, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800b636:	f107 030b 	add.w	r3, r7, #11
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7fe f85e 	bl	80096fc <mpu_get_accel_fsr>
    switch (accel_fsr) {
 800b640:	7afb      	ldrb	r3, [r7, #11]
 800b642:	3b02      	subs	r3, #2
 800b644:	2b0e      	cmp	r3, #14
 800b646:	d87d      	bhi.n	800b744 <dmp_set_tap_thresh+0x14c>
 800b648:	a201      	add	r2, pc, #4	@ (adr r2, 800b650 <dmp_set_tap_thresh+0x58>)
 800b64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64e:	bf00      	nop
 800b650:	0800b68d 	.word	0x0800b68d
 800b654:	0800b745 	.word	0x0800b745
 800b658:	0800b6bb 	.word	0x0800b6bb
 800b65c:	0800b745 	.word	0x0800b745
 800b660:	0800b745 	.word	0x0800b745
 800b664:	0800b745 	.word	0x0800b745
 800b668:	0800b6e9 	.word	0x0800b6e9
 800b66c:	0800b745 	.word	0x0800b745
 800b670:	0800b745 	.word	0x0800b745
 800b674:	0800b745 	.word	0x0800b745
 800b678:	0800b745 	.word	0x0800b745
 800b67c:	0800b745 	.word	0x0800b745
 800b680:	0800b745 	.word	0x0800b745
 800b684:	0800b745 	.word	0x0800b745
 800b688:	0800b717 	.word	0x0800b717
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 800b68c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b690:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800b844 <dmp_set_tap_thresh+0x24c>
 800b694:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b69c:	ee17 3a90 	vmov	r3, s15
 800b6a0:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 800b6a2:	edd7 7a04 	vldr	s15, [r7, #16]
 800b6a6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b848 <dmp_set_tap_thresh+0x250>
 800b6aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6b2:	ee17 3a90 	vmov	r3, s15
 800b6b6:	82bb      	strh	r3, [r7, #20]
        break;
 800b6b8:	e047      	b.n	800b74a <dmp_set_tap_thresh+0x152>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 800b6ba:	edd7 7a04 	vldr	s15, [r7, #16]
 800b6be:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800b84c <dmp_set_tap_thresh+0x254>
 800b6c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6ca:	ee17 3a90 	vmov	r3, s15
 800b6ce:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 800b6d0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b6d4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800b850 <dmp_set_tap_thresh+0x258>
 800b6d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6e0:	ee17 3a90 	vmov	r3, s15
 800b6e4:	82bb      	strh	r3, [r7, #20]
        break;
 800b6e6:	e030      	b.n	800b74a <dmp_set_tap_thresh+0x152>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800b6e8:	edd7 7a04 	vldr	s15, [r7, #16]
 800b6ec:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800b854 <dmp_set_tap_thresh+0x25c>
 800b6f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6f8:	ee17 3a90 	vmov	r3, s15
 800b6fc:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 800b6fe:	edd7 7a04 	vldr	s15, [r7, #16]
 800b702:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800b858 <dmp_set_tap_thresh+0x260>
 800b706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b70a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b70e:	ee17 3a90 	vmov	r3, s15
 800b712:	82bb      	strh	r3, [r7, #20]
        break;
 800b714:	e019      	b.n	800b74a <dmp_set_tap_thresh+0x152>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800b716:	edd7 7a04 	vldr	s15, [r7, #16]
 800b71a:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800b85c <dmp_set_tap_thresh+0x264>
 800b71e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b726:	ee17 3a90 	vmov	r3, s15
 800b72a:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 800b72c:	edd7 7a04 	vldr	s15, [r7, #16]
 800b730:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800b860 <dmp_set_tap_thresh+0x268>
 800b734:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b73c:	ee17 3a90 	vmov	r3, s15
 800b740:	82bb      	strh	r3, [r7, #20]
        break;
 800b742:	e002      	b.n	800b74a <dmp_set_tap_thresh+0x152>
    default:
        return -1;
 800b744:	f04f 33ff 	mov.w	r3, #4294967295
 800b748:	e076      	b.n	800b838 <dmp_set_tap_thresh+0x240>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 800b74a:	8afb      	ldrh	r3, [r7, #22]
 800b74c:	0a1b      	lsrs	r3, r3, #8
 800b74e:	b29b      	uxth	r3, r3
 800b750:	b2db      	uxtb	r3, r3
 800b752:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 800b754:	8afb      	ldrh	r3, [r7, #22]
 800b756:	b2db      	uxtb	r3, r3
 800b758:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 800b75a:	8abb      	ldrh	r3, [r7, #20]
 800b75c:	0a1b      	lsrs	r3, r3, #8
 800b75e:	b29b      	uxth	r3, r3
 800b760:	b2db      	uxtb	r3, r3
 800b762:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 800b764:	8abb      	ldrh	r3, [r7, #20]
 800b766:	b2db      	uxtb	r3, r3
 800b768:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 800b76a:	79fb      	ldrb	r3, [r7, #7]
 800b76c:	f003 0301 	and.w	r3, r3, #1
 800b770:	2b00      	cmp	r3, #0
 800b772:	d01c      	beq.n	800b7ae <dmp_set_tap_thresh+0x1b6>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 800b774:	f107 030c 	add.w	r3, r7, #12
 800b778:	461a      	mov	r2, r3
 800b77a:	2102      	movs	r1, #2
 800b77c:	f44f 70ea 	mov.w	r0, #468	@ 0x1d4
 800b780:	f7ff fa74 	bl	800ac6c <mpu_write_mem>
 800b784:	4603      	mov	r3, r0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d002      	beq.n	800b790 <dmp_set_tap_thresh+0x198>
            return -1;
 800b78a:	f04f 33ff 	mov.w	r3, #4294967295
 800b78e:	e053      	b.n	800b838 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 800b790:	f107 030c 	add.w	r3, r7, #12
 800b794:	3302      	adds	r3, #2
 800b796:	461a      	mov	r2, r3
 800b798:	2102      	movs	r1, #2
 800b79a:	f44f 7092 	mov.w	r0, #292	@ 0x124
 800b79e:	f7ff fa65 	bl	800ac6c <mpu_write_mem>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d002      	beq.n	800b7ae <dmp_set_tap_thresh+0x1b6>
            return -1;
 800b7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ac:	e044      	b.n	800b838 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Y) {
 800b7ae:	79fb      	ldrb	r3, [r7, #7]
 800b7b0:	f003 0302 	and.w	r3, r3, #2
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d01c      	beq.n	800b7f2 <dmp_set_tap_thresh+0x1fa>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 800b7b8:	f107 030c 	add.w	r3, r7, #12
 800b7bc:	461a      	mov	r2, r3
 800b7be:	2102      	movs	r1, #2
 800b7c0:	f44f 70ec 	mov.w	r0, #472	@ 0x1d8
 800b7c4:	f7ff fa52 	bl	800ac6c <mpu_write_mem>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d002      	beq.n	800b7d4 <dmp_set_tap_thresh+0x1dc>
            return -1;
 800b7ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b7d2:	e031      	b.n	800b838 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 800b7d4:	f107 030c 	add.w	r3, r7, #12
 800b7d8:	3302      	adds	r3, #2
 800b7da:	461a      	mov	r2, r3
 800b7dc:	2102      	movs	r1, #2
 800b7de:	f44f 7094 	mov.w	r0, #296	@ 0x128
 800b7e2:	f7ff fa43 	bl	800ac6c <mpu_write_mem>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <dmp_set_tap_thresh+0x1fa>
            return -1;
 800b7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b7f0:	e022      	b.n	800b838 <dmp_set_tap_thresh+0x240>
    }
    if (axis & TAP_Z) {
 800b7f2:	79fb      	ldrb	r3, [r7, #7]
 800b7f4:	f003 0304 	and.w	r3, r3, #4
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d01c      	beq.n	800b836 <dmp_set_tap_thresh+0x23e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 800b7fc:	f107 030c 	add.w	r3, r7, #12
 800b800:	461a      	mov	r2, r3
 800b802:	2102      	movs	r1, #2
 800b804:	f44f 70ee 	mov.w	r0, #476	@ 0x1dc
 800b808:	f7ff fa30 	bl	800ac6c <mpu_write_mem>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d002      	beq.n	800b818 <dmp_set_tap_thresh+0x220>
            return -1;
 800b812:	f04f 33ff 	mov.w	r3, #4294967295
 800b816:	e00f      	b.n	800b838 <dmp_set_tap_thresh+0x240>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 800b818:	f107 030c 	add.w	r3, r7, #12
 800b81c:	3302      	adds	r3, #2
 800b81e:	461a      	mov	r2, r3
 800b820:	2102      	movs	r1, #2
 800b822:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b826:	f7ff fa21 	bl	800ac6c <mpu_write_mem>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <dmp_set_tap_thresh+0x23e>
            return -1;
 800b830:	f04f 33ff 	mov.w	r3, #4294967295
 800b834:	e000      	b.n	800b838 <dmp_set_tap_thresh+0x240>
    }
    return 0;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3718      	adds	r7, #24
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	43480000 	.word	0x43480000
 800b844:	46800000 	.word	0x46800000
 800b848:	46400000 	.word	0x46400000
 800b84c:	46000000 	.word	0x46000000
 800b850:	45c00000 	.word	0x45c00000
 800b854:	45800000 	.word	0x45800000
 800b858:	45400000 	.word	0x45400000
 800b85c:	45000000 	.word	0x45000000
 800b860:	44c00000 	.word	0x44c00000

0800b864 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	4603      	mov	r3, r0
 800b86c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 800b86e:	2300      	movs	r3, #0
 800b870:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 800b872:	79fb      	ldrb	r3, [r7, #7]
 800b874:	f003 0301 	and.w	r3, r3, #1
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d004      	beq.n	800b886 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 800b87c:	7bfb      	ldrb	r3, [r7, #15]
 800b87e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800b882:	b2db      	uxtb	r3, r3
 800b884:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 800b886:	79fb      	ldrb	r3, [r7, #7]
 800b888:	f003 0302 	and.w	r3, r3, #2
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d004      	beq.n	800b89a <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 800b890:	7bfb      	ldrb	r3, [r7, #15]
 800b892:	f043 030c 	orr.w	r3, r3, #12
 800b896:	b2db      	uxtb	r3, r3
 800b898:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 800b89a:	79fb      	ldrb	r3, [r7, #7]
 800b89c:	f003 0304 	and.w	r3, r3, #4
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d004      	beq.n	800b8ae <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
 800b8a6:	f043 0303 	orr.w	r3, r3, #3
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 800b8ae:	f107 030f 	add.w	r3, r7, #15
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	2101      	movs	r1, #1
 800b8b6:	f44f 70a4 	mov.w	r0, #328	@ 0x148
 800b8ba:	f7ff f9d7 	bl	800ac6c <mpu_write_mem>
 800b8be:	4603      	mov	r3, r0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d102      	bne.n	800b8de <dmp_set_tap_count+0x16>
        min_taps = 1;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	71fb      	strb	r3, [r7, #7]
 800b8dc:	e004      	b.n	800b8e8 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 800b8de:	79fb      	ldrb	r3, [r7, #7]
 800b8e0:	2b04      	cmp	r3, #4
 800b8e2:	d901      	bls.n	800b8e8 <dmp_set_tap_count+0x20>
        min_taps = 4;
 800b8e4:	2304      	movs	r3, #4
 800b8e6:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 800b8e8:	79fb      	ldrb	r3, [r7, #7]
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 800b8f0:	f107 030f 	add.w	r3, r7, #15
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	2101      	movs	r1, #1
 800b8f8:	f240 104f 	movw	r0, #335	@ 0x14f
 800b8fc:	f7ff f9b6 	bl	800ac6c <mpu_write_mem>
 800b900:	4603      	mov	r3, r0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
	...

0800b90c <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	4603      	mov	r3, r0
 800b914:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800b916:	88fb      	ldrh	r3, [r7, #6]
 800b918:	4a0c      	ldr	r2, [pc, #48]	@ (800b94c <dmp_set_tap_time+0x40>)
 800b91a:	fba2 2303 	umull	r2, r3, r2, r3
 800b91e:	089b      	lsrs	r3, r3, #2
 800b920:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800b922:	89fb      	ldrh	r3, [r7, #14]
 800b924:	0a1b      	lsrs	r3, r3, #8
 800b926:	b29b      	uxth	r3, r3
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800b92c:	89fb      	ldrh	r3, [r7, #14]
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800b932:	f107 030c 	add.w	r3, r7, #12
 800b936:	461a      	mov	r2, r3
 800b938:	2102      	movs	r1, #2
 800b93a:	f44f 70ef 	mov.w	r0, #478	@ 0x1de
 800b93e:	f7ff f995 	bl	800ac6c <mpu_write_mem>
 800b942:	4603      	mov	r3, r0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	cccccccd 	.word	0xcccccccd

0800b950 <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	4603      	mov	r3, r0
 800b958:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800b95a:	88fb      	ldrh	r3, [r7, #6]
 800b95c:	4a0c      	ldr	r2, [pc, #48]	@ (800b990 <dmp_set_tap_time_multi+0x40>)
 800b95e:	fba2 2303 	umull	r2, r3, r2, r3
 800b962:	089b      	lsrs	r3, r3, #2
 800b964:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800b966:	89fb      	ldrh	r3, [r7, #14]
 800b968:	0a1b      	lsrs	r3, r3, #8
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800b970:	89fb      	ldrh	r3, [r7, #14]
 800b972:	b2db      	uxtb	r3, r3
 800b974:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 800b976:	f107 030c 	add.w	r3, r7, #12
 800b97a:	461a      	mov	r2, r3
 800b97c:	2102      	movs	r1, #2
 800b97e:	f44f 70ed 	mov.w	r0, #474	@ 0x1da
 800b982:	f7ff f973 	bl	800ac6c <mpu_write_mem>
 800b986:	4603      	mov	r3, r0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	cccccccd 	.word	0xcccccccd

0800b994 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	460b      	mov	r3, r1
 800b99e:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a13      	ldr	r2, [pc, #76]	@ (800b9f0 <dmp_set_shake_reject_thresh+0x5c>)
 800b9a4:	fb82 1203 	smull	r1, r2, r2, r3
 800b9a8:	1192      	asrs	r2, r2, #6
 800b9aa:	17db      	asrs	r3, r3, #31
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	887a      	ldrh	r2, [r7, #2]
 800b9b0:	fb02 f303 	mul.w	r3, r2, r3
 800b9b4:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	161b      	asrs	r3, r3, #24
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	141b      	asrs	r3, r3, #16
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	121b      	asrs	r3, r3, #8
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 800b9d4:	f107 0308 	add.w	r3, r7, #8
 800b9d8:	461a      	mov	r2, r3
 800b9da:	2104      	movs	r1, #4
 800b9dc:	f44f 70ae 	mov.w	r0, #348	@ 0x15c
 800b9e0:	f7ff f944 	bl	800ac6c <mpu_write_mem>
 800b9e4:	4603      	mov	r3, r0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	10624dd3 	.word	0x10624dd3

0800b9f4 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800b9fe:	88fb      	ldrh	r3, [r7, #6]
 800ba00:	4a0c      	ldr	r2, [pc, #48]	@ (800ba34 <dmp_set_shake_reject_time+0x40>)
 800ba02:	fba2 2303 	umull	r2, r3, r2, r3
 800ba06:	089b      	lsrs	r3, r3, #2
 800ba08:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800ba0a:	88fb      	ldrh	r3, [r7, #6]
 800ba0c:	0a1b      	lsrs	r3, r3, #8
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800ba14:	88fb      	ldrh	r3, [r7, #6]
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 800ba1a:	f107 030c 	add.w	r3, r7, #12
 800ba1e:	461a      	mov	r2, r3
 800ba20:	2102      	movs	r1, #2
 800ba22:	f44f 70ad 	mov.w	r0, #346	@ 0x15a
 800ba26:	f7ff f921 	bl	800ac6c <mpu_write_mem>
 800ba2a:	4603      	mov	r3, r0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	cccccccd 	.word	0xcccccccd

0800ba38 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800ba42:	88fb      	ldrh	r3, [r7, #6]
 800ba44:	4a0c      	ldr	r2, [pc, #48]	@ (800ba78 <dmp_set_shake_reject_timeout+0x40>)
 800ba46:	fba2 2303 	umull	r2, r3, r2, r3
 800ba4a:	089b      	lsrs	r3, r3, #2
 800ba4c:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800ba4e:	88fb      	ldrh	r3, [r7, #6]
 800ba50:	0a1b      	lsrs	r3, r3, #8
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800ba58:	88fb      	ldrh	r3, [r7, #6]
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 800ba5e:	f107 030c 	add.w	r3, r7, #12
 800ba62:	461a      	mov	r2, r3
 800ba64:	2102      	movs	r1, #2
 800ba66:	f44f 70ac 	mov.w	r0, #344	@ 0x158
 800ba6a:	f7ff f8ff 	bl	800ac6c <mpu_write_mem>
 800ba6e:	4603      	mov	r3, r0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	cccccccd 	.word	0xcccccccd

0800ba7c <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	4603      	mov	r3, r0
 800ba84:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800ba86:	2302      	movs	r3, #2
 800ba88:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 800ba8a:	23ca      	movs	r3, #202	@ 0xca
 800ba8c:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 800ba8e:	23e3      	movs	r3, #227	@ 0xe3
 800ba90:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800ba92:	2309      	movs	r3, #9
 800ba94:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 800ba96:	f107 030c 	add.w	r3, r7, #12
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	2104      	movs	r1, #4
 800ba9e:	2068      	movs	r0, #104	@ 0x68
 800baa0:	f7ff f8e4 	bl	800ac6c <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 800baa4:	23a3      	movs	r3, #163	@ 0xa3
 800baa6:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800baa8:	88fb      	ldrh	r3, [r7, #6]
 800baaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d006      	beq.n	800bac0 <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 800bab2:	23c0      	movs	r3, #192	@ 0xc0
 800bab4:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 800bab6:	23c8      	movs	r3, #200	@ 0xc8
 800bab8:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 800baba:	23c2      	movs	r3, #194	@ 0xc2
 800babc:	73fb      	strb	r3, [r7, #15]
 800babe:	e005      	b.n	800bacc <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 800bac0:	23a3      	movs	r3, #163	@ 0xa3
 800bac2:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 800bac4:	23a3      	movs	r3, #163	@ 0xa3
 800bac6:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 800bac8:	23a3      	movs	r3, #163	@ 0xa3
 800baca:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800bacc:	88fb      	ldrh	r3, [r7, #6]
 800bace:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d006      	beq.n	800bae4 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 800bad6:	23c4      	movs	r3, #196	@ 0xc4
 800bad8:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 800bada:	23cc      	movs	r3, #204	@ 0xcc
 800badc:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 800bade:	23c6      	movs	r3, #198	@ 0xc6
 800bae0:	74bb      	strb	r3, [r7, #18]
 800bae2:	e005      	b.n	800baf0 <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 800bae4:	23a3      	movs	r3, #163	@ 0xa3
 800bae6:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 800bae8:	23a3      	movs	r3, #163	@ 0xa3
 800baea:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 800baec:	23a3      	movs	r3, #163	@ 0xa3
 800baee:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 800baf0:	23a3      	movs	r3, #163	@ 0xa3
 800baf2:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 800baf4:	23a3      	movs	r3, #163	@ 0xa3
 800baf6:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 800baf8:	23a3      	movs	r3, #163	@ 0xa3
 800bafa:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 800bafc:	f107 030c 	add.w	r3, r7, #12
 800bb00:	461a      	mov	r2, r3
 800bb02:	210a      	movs	r1, #10
 800bb04:	f640 20a7 	movw	r0, #2727	@ 0xaa7
 800bb08:	f7ff f8b0 	bl	800ac6c <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800bb0c:	88fb      	ldrh	r3, [r7, #6]
 800bb0e:	f003 0303 	and.w	r3, r3, #3
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d002      	beq.n	800bb1c <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 800bb16:	2320      	movs	r3, #32
 800bb18:	733b      	strb	r3, [r7, #12]
 800bb1a:	e001      	b.n	800bb20 <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 800bb1c:	23d8      	movs	r3, #216	@ 0xd8
 800bb1e:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 800bb20:	f107 030c 	add.w	r3, r7, #12
 800bb24:	461a      	mov	r2, r3
 800bb26:	2101      	movs	r1, #1
 800bb28:	f640 20b6 	movw	r0, #2742	@ 0xab6
 800bb2c:	f7ff f89e 	bl	800ac6c <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 800bb30:	88fb      	ldrh	r3, [r7, #6]
 800bb32:	f003 0320 	and.w	r3, r3, #32
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800bb3a:	2001      	movs	r0, #1
 800bb3c:	f000 f8c6 	bl	800bccc <dmp_enable_gyro_cal>
 800bb40:	e002      	b.n	800bb48 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 800bb42:	2000      	movs	r0, #0
 800bb44:	f000 f8c2 	bl	800bccc <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800bb48:	88fb      	ldrh	r3, [r7, #6]
 800bb4a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d01d      	beq.n	800bb8e <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 800bb52:	88fb      	ldrh	r3, [r7, #6]
 800bb54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d008      	beq.n	800bb6e <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 800bb5c:	23b2      	movs	r3, #178	@ 0xb2
 800bb5e:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 800bb60:	238b      	movs	r3, #139	@ 0x8b
 800bb62:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 800bb64:	23b6      	movs	r3, #182	@ 0xb6
 800bb66:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 800bb68:	239b      	movs	r3, #155	@ 0x9b
 800bb6a:	73fb      	strb	r3, [r7, #15]
 800bb6c:	e007      	b.n	800bb7e <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 800bb6e:	23b0      	movs	r3, #176	@ 0xb0
 800bb70:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 800bb72:	2380      	movs	r3, #128	@ 0x80
 800bb74:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 800bb76:	23b4      	movs	r3, #180	@ 0xb4
 800bb78:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800bb7a:	2390      	movs	r3, #144	@ 0x90
 800bb7c:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800bb7e:	f107 030c 	add.w	r3, r7, #12
 800bb82:	461a      	mov	r2, r3
 800bb84:	2104      	movs	r1, #4
 800bb86:	f640 20a2 	movw	r0, #2722	@ 0xaa2
 800bb8a:	f7ff f86f 	bl	800ac6c <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 800bb8e:	88fb      	ldrh	r3, [r7, #6]
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d025      	beq.n	800bbe4 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 800bb98:	23f8      	movs	r3, #248	@ 0xf8
 800bb9a:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800bb9c:	f107 030c 	add.w	r3, r7, #12
 800bba0:	461a      	mov	r2, r3
 800bba2:	2101      	movs	r1, #1
 800bba4:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 800bba8:	f7ff f860 	bl	800ac6c <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800bbac:	21fa      	movs	r1, #250	@ 0xfa
 800bbae:	2007      	movs	r0, #7
 800bbb0:	f7ff fd22 	bl	800b5f8 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 800bbb4:	2007      	movs	r0, #7
 800bbb6:	f7ff fe55 	bl	800b864 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800bbba:	2001      	movs	r0, #1
 800bbbc:	f7ff fe84 	bl	800b8c8 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 800bbc0:	2064      	movs	r0, #100	@ 0x64
 800bbc2:	f7ff fea3 	bl	800b90c <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 800bbc6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800bbca:	f7ff fec1 	bl	800b950 <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 800bbce:	21c8      	movs	r1, #200	@ 0xc8
 800bbd0:	483c      	ldr	r0, [pc, #240]	@ (800bcc4 <dmp_enable_feature+0x248>)
 800bbd2:	f7ff fedf 	bl	800b994 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800bbd6:	2028      	movs	r0, #40	@ 0x28
 800bbd8:	f7ff ff0c 	bl	800b9f4 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 800bbdc:	200a      	movs	r0, #10
 800bbde:	f7ff ff2b 	bl	800ba38 <dmp_set_shake_reject_timeout>
 800bbe2:	e009      	b.n	800bbf8 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 800bbe4:	23d8      	movs	r3, #216	@ 0xd8
 800bbe6:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800bbe8:	f107 030c 	add.w	r3, r7, #12
 800bbec:	461a      	mov	r2, r3
 800bbee:	2101      	movs	r1, #1
 800bbf0:	f44f 600b 	mov.w	r0, #2224	@ 0x8b0
 800bbf4:	f7ff f83a 	bl	800ac6c <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 800bbf8:	88fb      	ldrh	r3, [r7, #6]
 800bbfa:	f003 0302 	and.w	r3, r3, #2
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d002      	beq.n	800bc08 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 800bc02:	23d9      	movs	r3, #217	@ 0xd9
 800bc04:	733b      	strb	r3, [r7, #12]
 800bc06:	e001      	b.n	800bc0c <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 800bc08:	23d8      	movs	r3, #216	@ 0xd8
 800bc0a:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 800bc0c:	f107 030c 	add.w	r3, r7, #12
 800bc10:	461a      	mov	r2, r3
 800bc12:	2101      	movs	r1, #1
 800bc14:	f240 703d 	movw	r0, #1853	@ 0x73d
 800bc18:	f7ff f828 	bl	800ac6c <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 800bc1c:	88fb      	ldrh	r3, [r7, #6]
 800bc1e:	f003 0304 	and.w	r3, r3, #4
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d003      	beq.n	800bc2e <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 800bc26:	2001      	movs	r0, #1
 800bc28:	f000 f880 	bl	800bd2c <dmp_enable_lp_quat>
 800bc2c:	e002      	b.n	800bc34 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 800bc2e:	2000      	movs	r0, #0
 800bc30:	f000 f87c 	bl	800bd2c <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 800bc34:	88fb      	ldrh	r3, [r7, #6]
 800bc36:	f003 0310 	and.w	r3, r3, #16
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d003      	beq.n	800bc46 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 800bc3e:	2001      	movs	r0, #1
 800bc40:	f000 f89b 	bl	800bd7a <dmp_enable_6x_lp_quat>
 800bc44:	e002      	b.n	800bc4c <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 800bc46:	2000      	movs	r0, #0
 800bc48:	f000 f897 	bl	800bd7a <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800bc4c:	88fb      	ldrh	r3, [r7, #6]
 800bc4e:	f043 0308 	orr.w	r3, r3, #8
 800bc52:	b29a      	uxth	r2, r3
 800bc54:	4b1c      	ldr	r3, [pc, #112]	@ (800bcc8 <dmp_enable_feature+0x24c>)
 800bc56:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 800bc58:	f7fd fbc4 	bl	80093e4 <mpu_reset_fifo>

    dmp.packet_length = 0;
 800bc5c:	4b1a      	ldr	r3, [pc, #104]	@ (800bcc8 <dmp_enable_feature+0x24c>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800bc62:	88fb      	ldrh	r3, [r7, #6]
 800bc64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d005      	beq.n	800bc78 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 800bc6c:	4b16      	ldr	r3, [pc, #88]	@ (800bcc8 <dmp_enable_feature+0x24c>)
 800bc6e:	7b9b      	ldrb	r3, [r3, #14]
 800bc70:	3306      	adds	r3, #6
 800bc72:	b2da      	uxtb	r2, r3
 800bc74:	4b14      	ldr	r3, [pc, #80]	@ (800bcc8 <dmp_enable_feature+0x24c>)
 800bc76:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800bc78:	88fb      	ldrh	r3, [r7, #6]
 800bc7a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d005      	beq.n	800bc8e <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 800bc82:	4b11      	ldr	r3, [pc, #68]	@ (800bcc8 <dmp_enable_feature+0x24c>)
 800bc84:	7b9b      	ldrb	r3, [r3, #14]
 800bc86:	3306      	adds	r3, #6
 800bc88:	b2da      	uxtb	r2, r3
 800bc8a:	4b0f      	ldr	r3, [pc, #60]	@ (800bcc8 <dmp_enable_feature+0x24c>)
 800bc8c:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800bc8e:	88fb      	ldrh	r3, [r7, #6]
 800bc90:	f003 0314 	and.w	r3, r3, #20
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d005      	beq.n	800bca4 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 800bc98:	4b0b      	ldr	r3, [pc, #44]	@ (800bcc8 <dmp_enable_feature+0x24c>)
 800bc9a:	7b9b      	ldrb	r3, [r3, #14]
 800bc9c:	3310      	adds	r3, #16
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	4b09      	ldr	r3, [pc, #36]	@ (800bcc8 <dmp_enable_feature+0x24c>)
 800bca2:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800bca4:	88fb      	ldrh	r3, [r7, #6]
 800bca6:	f003 0303 	and.w	r3, r3, #3
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d005      	beq.n	800bcba <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 800bcae:	4b06      	ldr	r3, [pc, #24]	@ (800bcc8 <dmp_enable_feature+0x24c>)
 800bcb0:	7b9b      	ldrb	r3, [r3, #14]
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	b2da      	uxtb	r2, r3
 800bcb6:	4b04      	ldr	r3, [pc, #16]	@ (800bcc8 <dmp_enable_feature+0x24c>)
 800bcb8:	739a      	strb	r2, [r3, #14]

    return 0;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3718      	adds	r7, #24
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	02cae309 	.word	0x02cae309
 800bcc8:	200044bc 	.word	0x200044bc

0800bccc <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b088      	sub	sp, #32
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 800bcd6:	79fb      	ldrb	r3, [r7, #7]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00f      	beq.n	800bcfc <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 800bcdc:	4a11      	ldr	r2, [pc, #68]	@ (800bd24 <dmp_enable_gyro_cal+0x58>)
 800bcde:	f107 0314 	add.w	r3, r7, #20
 800bce2:	ca07      	ldmia	r2, {r0, r1, r2}
 800bce4:	c303      	stmia	r3!, {r0, r1}
 800bce6:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800bce8:	f107 0314 	add.w	r3, r7, #20
 800bcec:	461a      	mov	r2, r3
 800bcee:	2109      	movs	r1, #9
 800bcf0:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 800bcf4:	f7fe ffba 	bl	800ac6c <mpu_write_mem>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	e00e      	b.n	800bd1a <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 800bcfc:	4a0a      	ldr	r2, [pc, #40]	@ (800bd28 <dmp_enable_gyro_cal+0x5c>)
 800bcfe:	f107 0308 	add.w	r3, r7, #8
 800bd02:	ca07      	ldmia	r2, {r0, r1, r2}
 800bd04:	c303      	stmia	r3!, {r0, r1}
 800bd06:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800bd08:	f107 0308 	add.w	r3, r7, #8
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	2109      	movs	r1, #9
 800bd10:	f44f 6097 	mov.w	r0, #1208	@ 0x4b8
 800bd14:	f7fe ffaa 	bl	800ac6c <mpu_write_mem>
 800bd18:	4603      	mov	r3, r0
    }
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3720      	adds	r7, #32
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	08010f68 	.word	0x08010f68
 800bd28:	08010f74 	.word	0x08010f74

0800bd2c <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	4603      	mov	r3, r0
 800bd34:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800bd36:	79fb      	ldrb	r3, [r7, #7]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d008      	beq.n	800bd4e <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 800bd3c:	23c0      	movs	r3, #192	@ 0xc0
 800bd3e:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 800bd40:	23c2      	movs	r3, #194	@ 0xc2
 800bd42:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 800bd44:	23c4      	movs	r3, #196	@ 0xc4
 800bd46:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 800bd48:	23c6      	movs	r3, #198	@ 0xc6
 800bd4a:	73fb      	strb	r3, [r7, #15]
 800bd4c:	e006      	b.n	800bd5c <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 800bd4e:	f107 030c 	add.w	r3, r7, #12
 800bd52:	2204      	movs	r2, #4
 800bd54:	218b      	movs	r1, #139	@ 0x8b
 800bd56:	4618      	mov	r0, r3
 800bd58:	f001 fd00 	bl	800d75c <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800bd5c:	f107 030c 	add.w	r3, r7, #12
 800bd60:	461a      	mov	r2, r3
 800bd62:	2104      	movs	r1, #4
 800bd64:	f640 2098 	movw	r0, #2712	@ 0xa98
 800bd68:	f7fe ff80 	bl	800ac6c <mpu_write_mem>

    return mpu_reset_fifo();
 800bd6c:	f7fd fb3a 	bl	80093e4 <mpu_reset_fifo>
 800bd70:	4603      	mov	r3, r0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b084      	sub	sp, #16
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	4603      	mov	r3, r0
 800bd82:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 800bd84:	79fb      	ldrb	r3, [r7, #7]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d008      	beq.n	800bd9c <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 800bd8a:	2320      	movs	r3, #32
 800bd8c:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 800bd8e:	2328      	movs	r3, #40	@ 0x28
 800bd90:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 800bd92:	2330      	movs	r3, #48	@ 0x30
 800bd94:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 800bd96:	2338      	movs	r3, #56	@ 0x38
 800bd98:	73fb      	strb	r3, [r7, #15]
 800bd9a:	e006      	b.n	800bdaa <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 800bd9c:	f107 030c 	add.w	r3, r7, #12
 800bda0:	2204      	movs	r2, #4
 800bda2:	21a3      	movs	r1, #163	@ 0xa3
 800bda4:	4618      	mov	r0, r3
 800bda6:	f001 fcd9 	bl	800d75c <memset>

    mpu_write_mem(CFG_8, 4, regs);
 800bdaa:	f107 030c 	add.w	r3, r7, #12
 800bdae:	461a      	mov	r2, r3
 800bdb0:	2104      	movs	r1, #4
 800bdb2:	f640 209e 	movw	r0, #2718	@ 0xa9e
 800bdb6:	f7fe ff59 	bl	800ac6c <mpu_write_mem>

    return mpu_reset_fifo();
 800bdba:	f7fd fb13 	bl	80093e4 <mpu_reset_fifo>
 800bdbe:	4603      	mov	r3, r0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	3303      	adds	r3, #3
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bdda:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	3303      	adds	r3, #3
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bde6:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	3301      	adds	r3, #1
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d012      	beq.n	800be1c <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 800bdf6:	7bbb      	ldrb	r3, [r7, #14]
 800bdf8:	08db      	lsrs	r3, r3, #3
 800bdfa:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 800bdfc:	7bbb      	ldrb	r3, [r7, #14]
 800bdfe:	f003 0307 	and.w	r3, r3, #7
 800be02:	b2db      	uxtb	r3, r3
 800be04:	3301      	adds	r3, #1
 800be06:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 800be08:	4b10      	ldr	r3, [pc, #64]	@ (800be4c <decode_gesture+0x84>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d005      	beq.n	800be1c <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 800be10:	4b0e      	ldr	r3, [pc, #56]	@ (800be4c <decode_gesture+0x84>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	7b39      	ldrb	r1, [r7, #12]
 800be16:	7b7a      	ldrb	r2, [r7, #13]
 800be18:	4610      	mov	r0, r2
 800be1a:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	3301      	adds	r3, #1
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	f003 0308 	and.w	r3, r3, #8
 800be26:	2b00      	cmp	r3, #0
 800be28:	d00a      	beq.n	800be40 <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 800be2a:	4b08      	ldr	r3, [pc, #32]	@ (800be4c <decode_gesture+0x84>)
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d006      	beq.n	800be40 <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 800be32:	4b06      	ldr	r3, [pc, #24]	@ (800be4c <decode_gesture+0x84>)
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	7bfa      	ldrb	r2, [r7, #15]
 800be38:	0992      	lsrs	r2, r2, #6
 800be3a:	b2d2      	uxtb	r2, r2
 800be3c:	4610      	mov	r0, r2
 800be3e:	4798      	blx	r3
    }

    return 0;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	200044bc 	.word	0x200044bc

0800be50 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b092      	sub	sp, #72	@ 0x48
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
 800be5c:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 800be5e:	2300      	movs	r3, #0
 800be60:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 800be64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be66:	2200      	movs	r2, #0
 800be68:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800be6a:	4baf      	ldr	r3, [pc, #700]	@ (800c128 <dmp_read_fifo+0x2d8>)
 800be6c:	7b9b      	ldrb	r3, [r3, #14]
 800be6e:	4618      	mov	r0, r3
 800be70:	f107 0320 	add.w	r3, r7, #32
 800be74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800be76:	4619      	mov	r1, r3
 800be78:	f7fd ff4e 	bl	8009d18 <mpu_read_fifo_stream>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d002      	beq.n	800be88 <dmp_read_fifo+0x38>
        return -1;
 800be82:	f04f 33ff 	mov.w	r3, #4294967295
 800be86:	e14a      	b.n	800c11e <dmp_read_fifo+0x2ce>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 800be88:	4ba7      	ldr	r3, [pc, #668]	@ (800c128 <dmp_read_fifo+0x2d8>)
 800be8a:	895b      	ldrh	r3, [r3, #10]
 800be8c:	f003 0314 	and.w	r3, r3, #20
 800be90:	2b00      	cmp	r3, #0
 800be92:	f000 808a 	beq.w	800bfaa <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800be96:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be9a:	061a      	lsls	r2, r3, #24
 800be9c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800bea0:	041b      	lsls	r3, r3, #16
 800bea2:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800bea4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bea8:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800beaa:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800beac:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800beb0:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800beb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800beba:	061a      	lsls	r2, r3, #24
 800bebc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bec0:	041b      	lsls	r3, r3, #16
 800bec2:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800bec4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bec8:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800beca:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800becc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bed0:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800bed6:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800bed8:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800beda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bede:	061a      	lsls	r2, r3, #24
 800bee0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bee4:	041b      	lsls	r3, r3, #16
 800bee6:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800bee8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800beec:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800beee:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800bef0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bef4:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800befa:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 800befc:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800befe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bf02:	061a      	lsls	r2, r3, #24
 800bf04:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800bf08:	041b      	lsls	r3, r3, #16
 800bf0a:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800bf0c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bf10:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800bf12:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800bf14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf18:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800bf1e:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 800bf20:	601a      	str	r2, [r3, #0]
        ii += 16;
 800bf22:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bf26:	3310      	adds	r3, #16
 800bf28:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	141b      	asrs	r3, r3, #16
 800bf32:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	3304      	adds	r3, #4
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	141b      	asrs	r3, r3, #16
 800bf3c:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	3308      	adds	r3, #8
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	141b      	asrs	r3, r3, #16
 800bf46:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	330c      	adds	r3, #12
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	141b      	asrs	r3, r3, #16
 800bf50:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	693a      	ldr	r2, [r7, #16]
 800bf56:	fb03 f202 	mul.w	r2, r3, r2
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	6979      	ldr	r1, [r7, #20]
 800bf5e:	fb01 f303 	mul.w	r3, r1, r3
 800bf62:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	69b9      	ldr	r1, [r7, #24]
 800bf68:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800bf6c:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	69f9      	ldr	r1, [r7, #28]
 800bf72:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 800bf76:	4413      	add	r3, r2
 800bf78:	643b      	str	r3, [r7, #64]	@ 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 800bf7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bf80:	db03      	blt.n	800bf8a <dmp_read_fifo+0x13a>
 800bf82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf84:	f1b3 5f88 	cmp.w	r3, #285212672	@ 0x11000000
 800bf88:	dd07      	ble.n	800bf9a <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800bf8a:	f7fd fa2b 	bl	80093e4 <mpu_reset_fifo>
            sensors[0] = 0;
 800bf8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf90:	2200      	movs	r2, #0
 800bf92:	801a      	strh	r2, [r3, #0]
            return -1;
 800bf94:	f04f 33ff 	mov.w	r3, #4294967295
 800bf98:	e0c1      	b.n	800c11e <dmp_read_fifo+0x2ce>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 800bf9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bfa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bfa4:	b21a      	sxth	r2, r3
 800bfa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfa8:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800bfaa:	4b5f      	ldr	r3, [pc, #380]	@ (800c128 <dmp_read_fifo+0x2d8>)
 800bfac:	895b      	ldrh	r3, [r3, #10]
 800bfae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d04c      	beq.n	800c050 <dmp_read_fifo+0x200>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800bfb6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bfba:	3348      	adds	r3, #72	@ 0x48
 800bfbc:	443b      	add	r3, r7
 800bfbe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800bfc2:	021b      	lsls	r3, r3, #8
 800bfc4:	b21a      	sxth	r2, r3
 800bfc6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bfca:	3301      	adds	r3, #1
 800bfcc:	3348      	adds	r3, #72	@ 0x48
 800bfce:	443b      	add	r3, r7
 800bfd0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800bfd4:	b21b      	sxth	r3, r3
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	b21a      	sxth	r2, r3
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800bfde:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bfe2:	3302      	adds	r3, #2
 800bfe4:	3348      	adds	r3, #72	@ 0x48
 800bfe6:	443b      	add	r3, r7
 800bfe8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800bfec:	021b      	lsls	r3, r3, #8
 800bfee:	b219      	sxth	r1, r3
 800bff0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bff4:	3303      	adds	r3, #3
 800bff6:	3348      	adds	r3, #72	@ 0x48
 800bff8:	443b      	add	r3, r7
 800bffa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800bffe:	b21a      	sxth	r2, r3
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	3302      	adds	r3, #2
 800c004:	430a      	orrs	r2, r1
 800c006:	b212      	sxth	r2, r2
 800c008:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800c00a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c00e:	3304      	adds	r3, #4
 800c010:	3348      	adds	r3, #72	@ 0x48
 800c012:	443b      	add	r3, r7
 800c014:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c018:	021b      	lsls	r3, r3, #8
 800c01a:	b219      	sxth	r1, r3
 800c01c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c020:	3305      	adds	r3, #5
 800c022:	3348      	adds	r3, #72	@ 0x48
 800c024:	443b      	add	r3, r7
 800c026:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c02a:	b21a      	sxth	r2, r3
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	3304      	adds	r3, #4
 800c030:	430a      	orrs	r2, r1
 800c032:	b212      	sxth	r2, r2
 800c034:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800c036:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c03a:	3306      	adds	r3, #6
 800c03c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 800c040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c042:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c046:	f043 0308 	orr.w	r3, r3, #8
 800c04a:	b21a      	sxth	r2, r3
 800c04c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c04e:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800c050:	4b35      	ldr	r3, [pc, #212]	@ (800c128 <dmp_read_fifo+0x2d8>)
 800c052:	895b      	ldrh	r3, [r3, #10]
 800c054:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d04c      	beq.n	800c0f6 <dmp_read_fifo+0x2a6>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800c05c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c060:	3348      	adds	r3, #72	@ 0x48
 800c062:	443b      	add	r3, r7
 800c064:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c068:	021b      	lsls	r3, r3, #8
 800c06a:	b21a      	sxth	r2, r3
 800c06c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c070:	3301      	adds	r3, #1
 800c072:	3348      	adds	r3, #72	@ 0x48
 800c074:	443b      	add	r3, r7
 800c076:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c07a:	b21b      	sxth	r3, r3
 800c07c:	4313      	orrs	r3, r2
 800c07e:	b21a      	sxth	r2, r3
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 800c084:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c088:	3302      	adds	r3, #2
 800c08a:	3348      	adds	r3, #72	@ 0x48
 800c08c:	443b      	add	r3, r7
 800c08e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c092:	021b      	lsls	r3, r3, #8
 800c094:	b219      	sxth	r1, r3
 800c096:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c09a:	3303      	adds	r3, #3
 800c09c:	3348      	adds	r3, #72	@ 0x48
 800c09e:	443b      	add	r3, r7
 800c0a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c0a4:	b21a      	sxth	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	3302      	adds	r3, #2
 800c0aa:	430a      	orrs	r2, r1
 800c0ac:	b212      	sxth	r2, r2
 800c0ae:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800c0b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	3348      	adds	r3, #72	@ 0x48
 800c0b8:	443b      	add	r3, r7
 800c0ba:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c0be:	021b      	lsls	r3, r3, #8
 800c0c0:	b219      	sxth	r1, r3
 800c0c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c0c6:	3305      	adds	r3, #5
 800c0c8:	3348      	adds	r3, #72	@ 0x48
 800c0ca:	443b      	add	r3, r7
 800c0cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c0d0:	b21a      	sxth	r2, r3
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	430a      	orrs	r2, r1
 800c0d8:	b212      	sxth	r2, r2
 800c0da:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800c0dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c0e0:	3306      	adds	r3, #6
 800c0e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        sensors[0] |= INV_XYZ_GYRO;
 800c0e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c0ec:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800c0f0:	b21a      	sxth	r2, r3
 800c0f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0f4:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800c0f6:	4b0c      	ldr	r3, [pc, #48]	@ (800c128 <dmp_read_fifo+0x2d8>)
 800c0f8:	895b      	ldrh	r3, [r3, #10]
 800c0fa:	f003 0303 	and.w	r3, r3, #3
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d007      	beq.n	800c112 <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 800c102:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c106:	f107 0220 	add.w	r2, r7, #32
 800c10a:	4413      	add	r3, r2
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7ff fe5b 	bl	800bdc8 <decode_gesture>

    get_ms(timestamp);
 800c112:	f7f8 f90f 	bl	8004334 <HAL_GetTick>
 800c116:	4602      	mov	r2, r0
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	601a      	str	r2, [r3, #0]
    return 0;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3748      	adds	r7, #72	@ 0x48
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	200044bc 	.word	0x200044bc

0800c12c <__NVIC_SystemReset>:
{
 800c12c:	b480      	push	{r7}
 800c12e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c130:	f3bf 8f4f 	dsb	sy
}
 800c134:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c136:	4b06      	ldr	r3, [pc, #24]	@ (800c150 <__NVIC_SystemReset+0x24>)
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c13e:	4904      	ldr	r1, [pc, #16]	@ (800c150 <__NVIC_SystemReset+0x24>)
 800c140:	4b04      	ldr	r3, [pc, #16]	@ (800c154 <__NVIC_SystemReset+0x28>)
 800c142:	4313      	orrs	r3, r2
 800c144:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c146:	f3bf 8f4f 	dsb	sy
}
 800c14a:	bf00      	nop
    __NOP();
 800c14c:	bf00      	nop
 800c14e:	e7fd      	b.n	800c14c <__NVIC_SystemReset+0x20>
 800c150:	e000ed00 	.word	0xe000ed00
 800c154:	05fa0004 	.word	0x05fa0004

0800c158 <orientIMU>:
int16_t straightAccelData[3];
int16_t rotatedAccelData[3];
int16_t straightGyroData[3];
int16_t rotatedGyroData[3];
void orientIMU(void) //根據IMU單元的方位確定矩陣A的值
{
 800c158:	b480      	push	{r7}
 800c15a:	af00      	add	r7, sp, #0
    switch (1)  //eepromConfig.imuOrientation==4
    {
        case 1: // Dot Front/Left/Top
            orientationMatrix[0] =  1;
 800c15c:	4b10      	ldr	r3, [pc, #64]	@ (800c1a0 <orientIMU+0x48>)
 800c15e:	2201      	movs	r2, #1
 800c160:	801a      	strh	r2, [r3, #0]
            orientationMatrix[1] =  0;
 800c162:	4b0f      	ldr	r3, [pc, #60]	@ (800c1a0 <orientIMU+0x48>)
 800c164:	2200      	movs	r2, #0
 800c166:	805a      	strh	r2, [r3, #2]
            orientationMatrix[2] =  0;
 800c168:	4b0d      	ldr	r3, [pc, #52]	@ (800c1a0 <orientIMU+0x48>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	809a      	strh	r2, [r3, #4]
            orientationMatrix[3] =  0;
 800c16e:	4b0c      	ldr	r3, [pc, #48]	@ (800c1a0 <orientIMU+0x48>)
 800c170:	2200      	movs	r2, #0
 800c172:	80da      	strh	r2, [r3, #6]
            orientationMatrix[4] =  1;
 800c174:	4b0a      	ldr	r3, [pc, #40]	@ (800c1a0 <orientIMU+0x48>)
 800c176:	2201      	movs	r2, #1
 800c178:	811a      	strh	r2, [r3, #8]
            orientationMatrix[5] =  0;
 800c17a:	4b09      	ldr	r3, [pc, #36]	@ (800c1a0 <orientIMU+0x48>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	815a      	strh	r2, [r3, #10]
            orientationMatrix[6] =  0;
 800c180:	4b07      	ldr	r3, [pc, #28]	@ (800c1a0 <orientIMU+0x48>)
 800c182:	2200      	movs	r2, #0
 800c184:	819a      	strh	r2, [r3, #12]
            orientationMatrix[7] =  0;
 800c186:	4b06      	ldr	r3, [pc, #24]	@ (800c1a0 <orientIMU+0x48>)
 800c188:	2200      	movs	r2, #0
 800c18a:	81da      	strh	r2, [r3, #14]
            orientationMatrix[8] =  1;
 800c18c:	4b04      	ldr	r3, [pc, #16]	@ (800c1a0 <orientIMU+0x48>)
 800c18e:	2201      	movs	r2, #1
 800c190:	821a      	strh	r2, [r3, #16]
            break;
 800c192:	bf00      	nop
            orientationMatrix[6] =  0;
            orientationMatrix[7] =  0;
            orientationMatrix[8] =  1;
            break;
    }
}
 800c194:	bf00      	nop
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	200044f4 	.word	0x200044f4

0800c1a4 <inv_row_2_scale>:

static unsigned short inv_row_2_scale(const signed char *row) {
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  unsigned short b;

  if (row[0] > 0)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f993 3000 	ldrsb.w	r3, [r3]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	dd02      	ble.n	800c1bc <inv_row_2_scale+0x18>
    b = 0;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	81fb      	strh	r3, [r7, #14]
 800c1ba:	e02d      	b.n	800c218 <inv_row_2_scale+0x74>
  else if (row[0] < 0)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f993 3000 	ldrsb.w	r3, [r3]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	da02      	bge.n	800c1cc <inv_row_2_scale+0x28>
    b = 4;
 800c1c6:	2304      	movs	r3, #4
 800c1c8:	81fb      	strh	r3, [r7, #14]
 800c1ca:	e025      	b.n	800c218 <inv_row_2_scale+0x74>
  else if (row[1] > 0)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	f993 3000 	ldrsb.w	r3, [r3]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	dd02      	ble.n	800c1de <inv_row_2_scale+0x3a>
    b = 1;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	81fb      	strh	r3, [r7, #14]
 800c1dc:	e01c      	b.n	800c218 <inv_row_2_scale+0x74>
  else if (row[1] < 0)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	f993 3000 	ldrsb.w	r3, [r3]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	da02      	bge.n	800c1f0 <inv_row_2_scale+0x4c>
    b = 5;
 800c1ea:	2305      	movs	r3, #5
 800c1ec:	81fb      	strh	r3, [r7, #14]
 800c1ee:	e013      	b.n	800c218 <inv_row_2_scale+0x74>
  else if (row[2] > 0)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	3302      	adds	r3, #2
 800c1f4:	f993 3000 	ldrsb.w	r3, [r3]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	dd02      	ble.n	800c202 <inv_row_2_scale+0x5e>
    b = 2;
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	81fb      	strh	r3, [r7, #14]
 800c200:	e00a      	b.n	800c218 <inv_row_2_scale+0x74>
  else if (row[2] < 0)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	3302      	adds	r3, #2
 800c206:	f993 3000 	ldrsb.w	r3, [r3]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	da02      	bge.n	800c214 <inv_row_2_scale+0x70>
    b = 6;
 800c20e:	2306      	movs	r3, #6
 800c210:	81fb      	strh	r3, [r7, #14]
 800c212:	e001      	b.n	800c218 <inv_row_2_scale+0x74>
  else
    b = 7;      // error
 800c214:	2307      	movs	r3, #7
 800c216:	81fb      	strh	r3, [r7, #14]
  return b;
 800c218:	89fb      	ldrh	r3, [r7, #14]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3714      	adds	r7, #20
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <inv_orientation_matrix_to_scalar>:

static unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx) {
 800c226:	b580      	push	{r7, lr}
 800c228:	b084      	sub	sp, #16
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  unsigned short scalar;
  scalar = inv_row_2_scale(mtx);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7ff ffb8 	bl	800c1a4 <inv_row_2_scale>
 800c234:	4603      	mov	r3, r0
 800c236:	81fb      	strh	r3, [r7, #14]
  scalar |= inv_row_2_scale(mtx + 3) << 3;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	3303      	adds	r3, #3
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7ff ffb1 	bl	800c1a4 <inv_row_2_scale>
 800c242:	4603      	mov	r3, r0
 800c244:	00db      	lsls	r3, r3, #3
 800c246:	b21a      	sxth	r2, r3
 800c248:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	b21b      	sxth	r3, r3
 800c250:	81fb      	strh	r3, [r7, #14]
  scalar |= inv_row_2_scale(mtx + 6) << 6;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	3306      	adds	r3, #6
 800c256:	4618      	mov	r0, r3
 800c258:	f7ff ffa4 	bl	800c1a4 <inv_row_2_scale>
 800c25c:	4603      	mov	r3, r0
 800c25e:	019b      	lsls	r3, r3, #6
 800c260:	b21a      	sxth	r2, r3
 800c262:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c266:	4313      	orrs	r3, r2
 800c268:	b21b      	sxth	r3, r3
 800c26a:	81fb      	strh	r3, [r7, #14]

  return scalar;
 800c26c:	89fb      	ldrh	r3, [r7, #14]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <run_self_test>:

static void run_self_test(void) {
 800c276:	b580      	push	{r7, lr}
 800c278:	b08a      	sub	sp, #40	@ 0x28
 800c27a:	af00      	add	r7, sp, #0
  int result;
  long gyro[3], accel[3];

  result = mpu_run_self_test(gyro, accel);
 800c27c:	f107 020c 	add.w	r2, r7, #12
 800c280:	f107 0318 	add.w	r3, r7, #24
 800c284:	4611      	mov	r1, r2
 800c286:	4618      	mov	r0, r3
 800c288:	f7fe fc14 	bl	800aab4 <mpu_run_self_test>
 800c28c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (result == 0x7) {
 800c28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c290:	2b07      	cmp	r3, #7
 800c292:	d14b      	bne.n	800c32c <run_self_test+0xb6>
    /* Test passed. We can trust the gyro data here, so let's push it down
     * to the DMP.
     */
    float sens;
    unsigned short accel_sens;
    mpu_get_gyro_sens(&sens);
 800c294:	f107 0308 	add.w	r3, r7, #8
 800c298:	4618      	mov	r0, r3
 800c29a:	f7fd fbdd 	bl	8009a58 <mpu_get_gyro_sens>
    gyro[0] = (long) (gyro[0] * sens);
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	ee07 3a90 	vmov	s15, r3
 800c2a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c2a8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2b4:	ee17 3a90 	vmov	r3, s15
 800c2b8:	61bb      	str	r3, [r7, #24]
    gyro[1] = (long) (gyro[1] * sens);
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	ee07 3a90 	vmov	s15, r3
 800c2c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c2c4:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2d0:	ee17 3a90 	vmov	r3, s15
 800c2d4:	61fb      	str	r3, [r7, #28]
    gyro[2] = (long) (gyro[2] * sens);
 800c2d6:	6a3b      	ldr	r3, [r7, #32]
 800c2d8:	ee07 3a90 	vmov	s15, r3
 800c2dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c2e0:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2ec:	ee17 3a90 	vmov	r3, s15
 800c2f0:	623b      	str	r3, [r7, #32]
    dmp_set_gyro_bias(gyro);
 800c2f2:	f107 0318 	add.w	r3, r7, #24
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7fe ff2a 	bl	800b150 <dmp_set_gyro_bias>
    mpu_get_accel_sens(&accel_sens);
 800c2fc:	1dbb      	adds	r3, r7, #6
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7fd fbe2 	bl	8009ac8 <mpu_get_accel_sens>
    accel[0] *= accel_sens;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	88fa      	ldrh	r2, [r7, #6]
 800c308:	fb02 f303 	mul.w	r3, r2, r3
 800c30c:	60fb      	str	r3, [r7, #12]
    accel[1] *= accel_sens;
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	88fa      	ldrh	r2, [r7, #6]
 800c312:	fb02 f303 	mul.w	r3, r2, r3
 800c316:	613b      	str	r3, [r7, #16]
    accel[2] *= accel_sens;
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	88fa      	ldrh	r2, [r7, #6]
 800c31c:	fb02 f303 	mul.w	r3, r2, r3
 800c320:	617b      	str	r3, [r7, #20]
    dmp_set_accel_bias(accel);
 800c322:	f107 030c 	add.w	r3, r7, #12
 800c326:	4618      	mov	r0, r3
 800c328:	f7ff f81c 	bl	800b364 <dmp_set_accel_bias>
//    log_i("setting bias succesfully ......\r\n");
  }
}
 800c32c:	bf00      	nop
 800c32e:	3728      	adds	r7, #40	@ 0x28
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <MPU6050_setClockSource>:
 * 4       | PLL with external 32.768kHz reference
 * 5       | PLL with external 19.2MHz reference
 * 6       | Reserved
 * 7       | Stops the clock and keeps the timing generator in reset
 *******************************************************************************/
void MPU6050_setClockSource(uint8_t source) {
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af02      	add	r7, sp, #8
 800c33a:	4603      	mov	r3, r0
 800c33c:	71fb      	strb	r3, [r7, #7]
  IICwriteBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT,
 800c33e:	79fb      	ldrb	r3, [r7, #7]
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	2303      	movs	r3, #3
 800c344:	2202      	movs	r2, #2
 800c346:	216b      	movs	r1, #107	@ 0x6b
 800c348:	2068      	movs	r0, #104	@ 0x68
 800c34a:	f7fc fe14 	bl	8008f76 <IICwriteBits>
  MPU6050_PWR1_CLKSEL_LENGTH, source);

}
 800c34e:	bf00      	nop
 800c350:	3708      	adds	r7, #8
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <MPU6050_setFullScaleGyroRange>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050_setFullScaleGyroRange(uint8_t range) {
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af02      	add	r7, sp, #8
 800c35c:	4603      	mov	r3, r0
 800c35e:	71fb      	strb	r3, [r7, #7]
  IICwriteBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT,
 800c360:	79fb      	ldrb	r3, [r7, #7]
 800c362:	9300      	str	r3, [sp, #0]
 800c364:	2302      	movs	r3, #2
 800c366:	2204      	movs	r2, #4
 800c368:	211b      	movs	r1, #27
 800c36a:	2068      	movs	r0, #104	@ 0x68
 800c36c:	f7fc fe03 	bl	8008f76 <IICwriteBits>
  MPU6050_GCONFIG_FS_SEL_LENGTH, range);
}
 800c370:	bf00      	nop
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <MPU6050_setFullScaleAccelRange>:

/**************************实现函数********************************************
 *函数原型:		void MPU6050_setFullScaleAccelRange(uint8_t range)
 *功　　能:	    设置  MPU6050 加速度计的最大量程
 *******************************************************************************/
void MPU6050_setFullScaleAccelRange(uint8_t range) {
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af02      	add	r7, sp, #8
 800c37e:	4603      	mov	r3, r0
 800c380:	71fb      	strb	r3, [r7, #7]
  IICwriteBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT,
 800c382:	79fb      	ldrb	r3, [r7, #7]
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	2302      	movs	r3, #2
 800c388:	2204      	movs	r2, #4
 800c38a:	211c      	movs	r1, #28
 800c38c:	2068      	movs	r0, #104	@ 0x68
 800c38e:	f7fc fdf2 	bl	8008f76 <IICwriteBits>
  MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
}
 800c392:	bf00      	nop
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <MPU6050_setSleepEnabled>:
 *函数原型:		void MPU6050_setSleepEnabled(uint8_t enabled)
 *功　　能:	    设置  MPU6050 是否进入睡眠模式
 enabled =1   睡觉
 enabled =0   工作
 *******************************************************************************/
void MPU6050_setSleepEnabled(uint8_t enabled) {
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b082      	sub	sp, #8
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	71fb      	strb	r3, [r7, #7]
  IICwriteBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 800c3a4:	79fb      	ldrb	r3, [r7, #7]
 800c3a6:	2206      	movs	r2, #6
 800c3a8:	216b      	movs	r1, #107	@ 0x6b
 800c3aa:	2068      	movs	r0, #104	@ 0x68
 800c3ac:	f7fc fda6 	bl	8008efc <IICwriteBit>
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <MPU6050_getDeviceID>:

/**************************实现函数********************************************
 *函数原型:		uint8_t MPU6050_getDeviceID(void)
 *功　　能:	    读取  MPU6050 WHO_AM_I 标识	 将返回 0x68
 *******************************************************************************/
uint8_t MPU6050_getDeviceID(void) {
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	af00      	add	r7, sp, #0
  memset(buffer,0,sizeof(buffer));
 800c3bc:	220e      	movs	r2, #14
 800c3be:	2100      	movs	r1, #0
 800c3c0:	4806      	ldr	r0, [pc, #24]	@ (800c3dc <MPU6050_getDeviceID+0x24>)
 800c3c2:	f001 f9cb 	bl	800d75c <memset>
  i2c_read(devAddr, MPU6050_RA_WHO_AM_I, 1, buffer);
 800c3c6:	4b05      	ldr	r3, [pc, #20]	@ (800c3dc <MPU6050_getDeviceID+0x24>)
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	2175      	movs	r1, #117	@ 0x75
 800c3cc:	2068      	movs	r0, #104	@ 0x68
 800c3ce:	f7fc fd73 	bl	8008eb8 <i2c_read>
  return buffer[0];
 800c3d2:	4b02      	ldr	r3, [pc, #8]	@ (800c3dc <MPU6050_getDeviceID+0x24>)
 800c3d4:	781b      	ldrb	r3, [r3, #0]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	20004528 	.word	0x20004528

0800c3e0 <MPU6050_testConnection>:

/**************************实现函数********************************************
 *函数原型:		uint8_t MPU6050_testConnection(void)
 *功　　能:	    检测MPU6050 是否已经连接
 *******************************************************************************/
uint8_t MPU6050_testConnection(void) {
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	af00      	add	r7, sp, #0
  if (MPU6050_getDeviceID() == 0x68)  //0b01101000;
 800c3e4:	f7ff ffe8 	bl	800c3b8 <MPU6050_getDeviceID>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b68      	cmp	r3, #104	@ 0x68
 800c3ec:	d101      	bne.n	800c3f2 <MPU6050_testConnection+0x12>
    return 1;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e000      	b.n	800c3f4 <MPU6050_testConnection+0x14>
  else
    return 0;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <MPU6050_setI2CMasterModeEnabled>:

/**************************实现函数********************************************
 *函数原型:		void MPU6050_setI2CMasterModeEnabled(uint8_t enabled)
 *功　　能:	    设置 MPU6050 是否为AUX I2C线的主机
 *******************************************************************************/
void MPU6050_setI2CMasterModeEnabled(uint8_t enabled) {
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	4603      	mov	r3, r0
 800c400:	71fb      	strb	r3, [r7, #7]
  IICwriteBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT,
 800c402:	79fb      	ldrb	r3, [r7, #7]
 800c404:	2205      	movs	r2, #5
 800c406:	216a      	movs	r1, #106	@ 0x6a
 800c408:	2068      	movs	r0, #104	@ 0x68
 800c40a:	f7fc fd77 	bl	8008efc <IICwriteBit>
      enabled);
}
 800c40e:	bf00      	nop
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <MPU6050_setI2CBypassEnabled>:

/**************************实现函数********************************************
 *函数原型:		void MPU6050_setI2CBypassEnabled(uint8_t enabled)
 *功　　能:	    设置 MPU6050 是否为AUX I2C线的主机
 *******************************************************************************/
void MPU6050_setI2CBypassEnabled(uint8_t enabled) {
 800c416:	b580      	push	{r7, lr}
 800c418:	b082      	sub	sp, #8
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	4603      	mov	r3, r0
 800c41e:	71fb      	strb	r3, [r7, #7]
  IICwriteBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT,
 800c420:	79fb      	ldrb	r3, [r7, #7]
 800c422:	2201      	movs	r2, #1
 800c424:	2137      	movs	r1, #55	@ 0x37
 800c426:	2068      	movs	r0, #104	@ 0x68
 800c428:	f7fc fd68 	bl	8008efc <IICwriteBit>
      enabled);
}
 800c42c:	bf00      	nop
 800c42e:	3708      	adds	r7, #8
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <MPU6050_initialize>:

/**************************实现函数********************************************
 *函数原型:		void MPU6050_initialize(void)
 *功　　能:	    初始化 	MPU6050 以进入可用状态。
 *******************************************************************************/
void MPU6050_initialize(void) {
 800c434:	b580      	push	{r7, lr}
 800c436:	af00      	add	r7, sp, #0
  MPU6050_setClockSource(MPU6050_CLOCK_PLL_XGYRO); //设置时钟
 800c438:	2001      	movs	r0, #1
 800c43a:	f7ff ff7b 	bl	800c334 <MPU6050_setClockSource>
  MPU6050_setFullScaleGyroRange(MPU6050_GYRO_FS_250); //陀螺仪最大量程 +-1000度每秒
 800c43e:	2000      	movs	r0, #0
 800c440:	f7ff ff89 	bl	800c356 <MPU6050_setFullScaleGyroRange>
  MPU6050_setFullScaleAccelRange(MPU6050_ACCEL_FS_2);	//加速度度最大量程 +-2G
 800c444:	2000      	movs	r0, #0
 800c446:	f7ff ff97 	bl	800c378 <MPU6050_setFullScaleAccelRange>
  MPU6050_setSleepEnabled(0); //进入工作状态
 800c44a:	2000      	movs	r0, #0
 800c44c:	f7ff ffa5 	bl	800c39a <MPU6050_setSleepEnabled>
  MPU6050_setI2CMasterModeEnabled(0);	 //不让MPU6050 控制AUXI2C
 800c450:	2000      	movs	r0, #0
 800c452:	f7ff ffd1 	bl	800c3f8 <MPU6050_setI2CMasterModeEnabled>
  MPU6050_setI2CBypassEnabled(0);	//主控制器的I2C与	MPU6050的AUXI2C	直通。控制器可以直接访问HMC5883L
 800c456:	2000      	movs	r0, #0
 800c458:	f7ff ffdd 	bl	800c416 <MPU6050_setI2CBypassEnabled>
  DMP_Init();
 800c45c:	f000 f802 	bl	800c464 <DMP_Init>
}
 800c460:	bf00      	nop
 800c462:	bd80      	pop	{r7, pc}

0800c464 <DMP_Init>:
 入口参数：无
 返回  值：无
 作    者：平衡小车之家
 **************************************************************************/
void DMP_Init(void)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	af00      	add	r7, sp, #0
  if (MPU6050_getDeviceID() != 0x68)
 800c468:	f7ff ffa6 	bl	800c3b8 <MPU6050_getDeviceID>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b68      	cmp	r3, #104	@ 0x68
 800c470:	d001      	beq.n	800c476 <DMP_Init+0x12>
    NVIC_SystemReset();
 800c472:	f7ff fe5b 	bl	800c12c <__NVIC_SystemReset>
  if (!mpu_init(NULL))
 800c476:	2000      	movs	r0, #0
 800c478:	f7fc fe2a 	bl	80090d0 <mpu_init>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d138      	bne.n	800c4f4 <DMP_Init+0x90>
  {
    if (!mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 800c482:	2078      	movs	r0, #120	@ 0x78
 800c484:	f7fd fbc2 	bl	8009c0c <mpu_set_sensors>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d129      	bne.n	800c4e2 <DMP_Init+0x7e>
//      log_i("mpu_set_sensor complete ......\r\n");
    if (!mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL))
 800c48e:	2078      	movs	r0, #120	@ 0x78
 800c490:	f7fd fb6a 	bl	8009b68 <mpu_configure_fifo>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d123      	bne.n	800c4e2 <DMP_Init+0x7e>
//      log_i("mpu_configure_fifo complete ......\r\n");
    if (!mpu_set_sample_rate(DEFAULT_MPU_HZ))
 800c49a:	20c8      	movs	r0, #200	@ 0xc8
 800c49c:	f7fd fa76 	bl	800998c <mpu_set_sample_rate>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d11d      	bne.n	800c4e2 <DMP_Init+0x7e>
//      log_i("mpu_set_sample_rate complete ......\r\n");
    if (!dmp_load_motion_driver_firmware())
 800c4a6:	f7fe fd57 	bl	800af58 <dmp_load_motion_driver_firmware>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d118      	bne.n	800c4e2 <DMP_Init+0x7e>
//      log_i("dmp_load_motion_driver_firmware complete ......\r\n");
    if (!dmp_set_orientation(
 800c4b0:	4811      	ldr	r0, [pc, #68]	@ (800c4f8 <DMP_Init+0x94>)
 800c4b2:	f7ff feb8 	bl	800c226 <inv_orientation_matrix_to_scalar>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7fe fd5d 	bl	800af78 <dmp_set_orientation>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10e      	bne.n	800c4e2 <DMP_Init+0x7e>
        inv_orientation_matrix_to_scalar(gyro_orientation)))
//      log_i("dmp_set_orientation complete ......\r\n");
    if (!dmp_enable_feature(
 800c4c4:	f240 1073 	movw	r0, #371	@ 0x173
 800c4c8:	f7ff fad8 	bl	800ba7c <dmp_enable_feature>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d107      	bne.n	800c4e2 <DMP_Init+0x7e>
        DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP |
        DMP_FEATURE_ANDROID_ORIENT | DMP_FEATURE_SEND_RAW_ACCEL
            | DMP_FEATURE_SEND_CAL_GYRO |
            DMP_FEATURE_GYRO_CAL))
//      log_i("dmp_enable_feature complete ......\r\n");
    if (!dmp_set_fifo_rate(DEFAULT_MPU_HZ))
 800c4d2:	20c8      	movs	r0, #200	@ 0xc8
 800c4d4:	f7ff f848 	bl	800b568 <dmp_set_fifo_rate>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d101      	bne.n	800c4e2 <DMP_Init+0x7e>
//      log_i("dmp_set_fifo_rate complete ......\r\n");
    	run_self_test();
 800c4de:	f7ff feca 	bl	800c276 <run_self_test>
    if (!mpu_set_dmp_state(0))
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	f7fe fce4 	bl	800aeb0 <mpu_set_dmp_state>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d102      	bne.n	800c4f4 <DMP_Init+0x90>
      printf("mpu_set_dmp_state complete ......\r\n");
 800c4ee:	4803      	ldr	r0, [pc, #12]	@ (800c4fc <DMP_Init+0x98>)
 800c4f0:	f001 f844 	bl	800d57c <puts>
  }
}
 800c4f4:	bf00      	nop
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	2000004c 	.word	0x2000004c
 800c4fc:	08010f98 	.word	0x08010f98

0800c500 <Read_DMPdirect>:
  }

}

int Read_DMPdirect(float* q0, float* q1, float* q2, float* q3, float* roll, float* pitch, float* yaw)
{
 800c500:	b5b0      	push	{r4, r5, r7, lr}
 800c502:	b090      	sub	sp, #64	@ 0x40
 800c504:	af02      	add	r7, sp, #8
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
 800c50c:	603b      	str	r3, [r7, #0]
  unsigned long sensor_timestamp;
  unsigned char more;
  long quat[4];

	float _q0,_q1,_q2,_q3;
  dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors, &more);
 800c50e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800c512:	f107 0210 	add.w	r2, r7, #16
 800c516:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800c51a:	9301      	str	r3, [sp, #4]
 800c51c:	4b8a      	ldr	r3, [pc, #552]	@ (800c748 <Read_DMPdirect+0x248>)
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	460b      	mov	r3, r1
 800c522:	498a      	ldr	r1, [pc, #552]	@ (800c74c <Read_DMPdirect+0x24c>)
 800c524:	488a      	ldr	r0, [pc, #552]	@ (800c750 <Read_DMPdirect+0x250>)
 800c526:	f7ff fc93 	bl	800be50 <dmp_read_fifo>
  if (sensors & INV_WXYZ_QUAT) {
 800c52a:	4b87      	ldr	r3, [pc, #540]	@ (800c748 <Read_DMPdirect+0x248>)
 800c52c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c530:	b29b      	uxth	r3, r3
 800c532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c536:	2b00      	cmp	r3, #0
 800c538:	f000 80fc 	beq.w	800c734 <Read_DMPdirect+0x234>
    _q0 = quat[0] / q30;
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	ee07 3a90 	vmov	s15, r3
 800c542:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c546:	eddf 6a83 	vldr	s13, [pc, #524]	@ 800c754 <Read_DMPdirect+0x254>
 800c54a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c54e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    _q1 = quat[1] / q30;
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	ee07 3a90 	vmov	s15, r3
 800c558:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c55c:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 800c754 <Read_DMPdirect+0x254>
 800c560:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c564:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    _q2 = quat[2] / q30;
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	ee07 3a90 	vmov	s15, r3
 800c56e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c572:	eddf 6a78 	vldr	s13, [pc, #480]	@ 800c754 <Read_DMPdirect+0x254>
 800c576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c57a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    _q3 = quat[3] / q30;
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	ee07 3a90 	vmov	s15, r3
 800c584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c588:	eddf 6a72 	vldr	s13, [pc, #456]	@ 800c754 <Read_DMPdirect+0x254>
 800c58c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c590:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    Pitch = sinf(-2 * _q1 * _q3 + 2 * _q0 * _q2) * 57.3;
 800c594:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c598:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800c59c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c5a0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c5a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5a8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c5ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800c5b0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c5b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5bc:	eeb0 0a67 	vmov.f32	s0, s15
 800c5c0:	f003 f80a 	bl	800f5d8 <sinf>
 800c5c4:	ee10 3a10 	vmov	r3, s0
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7f3 ffc5 	bl	8000558 <__aeabi_f2d>
 800c5ce:	a35c      	add	r3, pc, #368	@ (adr r3, 800c740 <Read_DMPdirect+0x240>)
 800c5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d4:	f7f4 f818 	bl	8000608 <__aeabi_dmul>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	4610      	mov	r0, r2
 800c5de:	4619      	mov	r1, r3
 800c5e0:	f7f4 faea 	bl	8000bb8 <__aeabi_d2f>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	4a5c      	ldr	r2, [pc, #368]	@ (800c758 <Read_DMPdirect+0x258>)
 800c5e8:	6013      	str	r3, [r2, #0]
		Roll = atan2f(2 * _q2 * _q3 + 2 * _q0 * _q1, -2 * _q1 * _q1 - 2 * _q2* _q2 + 1)* 57.3;
 800c5ea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c5ee:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800c5f2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c5f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c5fe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800c602:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c606:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c60a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c60e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c612:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800c616:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c61a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c61e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c622:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c626:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800c62a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c62e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c632:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c636:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c63a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c63e:	eef0 0a67 	vmov.f32	s1, s15
 800c642:	eeb0 0a46 	vmov.f32	s0, s12
 800c646:	f002 ff79 	bl	800f53c <atan2f>
 800c64a:	ee10 3a10 	vmov	r3, s0
 800c64e:	4618      	mov	r0, r3
 800c650:	f7f3 ff82 	bl	8000558 <__aeabi_f2d>
 800c654:	a33a      	add	r3, pc, #232	@ (adr r3, 800c740 <Read_DMPdirect+0x240>)
 800c656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65a:	f7f3 ffd5 	bl	8000608 <__aeabi_dmul>
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	4610      	mov	r0, r2
 800c664:	4619      	mov	r1, r3
 800c666:	f7f4 faa7 	bl	8000bb8 <__aeabi_d2f>
 800c66a:	4603      	mov	r3, r0
 800c66c:	4a3b      	ldr	r2, [pc, #236]	@ (800c75c <Read_DMPdirect+0x25c>)
 800c66e:	6013      	str	r3, [r2, #0]
		Yaw = atan2(2*(_q1*_q2 + _q0*_q3),_q0*_q0+_q1*_q1-_q2*_q2-_q3*_q3) * 57.3;
 800c670:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800c674:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c678:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c67c:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800c680:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c68c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c690:	ee17 0a90 	vmov	r0, s15
 800c694:	f7f3 ff60 	bl	8000558 <__aeabi_f2d>
 800c698:	4604      	mov	r4, r0
 800c69a:	460d      	mov	r5, r1
 800c69c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800c6a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800c6a4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800c6a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c6ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c6b0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800c6b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c6b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6bc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800c6c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c6c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6c8:	ee17 0a90 	vmov	r0, s15
 800c6cc:	f7f3 ff44 	bl	8000558 <__aeabi_f2d>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	ec43 2b11 	vmov	d1, r2, r3
 800c6d8:	ec45 4b10 	vmov	d0, r4, r5
 800c6dc:	f002 fecc 	bl	800f478 <atan2>
 800c6e0:	ec51 0b10 	vmov	r0, r1, d0
 800c6e4:	a316      	add	r3, pc, #88	@ (adr r3, 800c740 <Read_DMPdirect+0x240>)
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	f7f3 ff8d 	bl	8000608 <__aeabi_dmul>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	4610      	mov	r0, r2
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	f7f4 fa5f 	bl	8000bb8 <__aeabi_d2f>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	4a18      	ldr	r2, [pc, #96]	@ (800c760 <Read_DMPdirect+0x260>)
 800c6fe:	6013      	str	r3, [r2, #0]

		*q0 = _q0;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c704:	601a      	str	r2, [r3, #0]
		*q1 = _q1;
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c70a:	601a      	str	r2, [r3, #0]
		*q2 = _q2;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c710:	601a      	str	r2, [r3, #0]
		*q3 = _q3;
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c716:	601a      	str	r2, [r3, #0]

		*roll = Roll;
 800c718:	4b10      	ldr	r3, [pc, #64]	@ (800c75c <Read_DMPdirect+0x25c>)
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c71e:	601a      	str	r2, [r3, #0]
		*pitch = Pitch;
 800c720:	4b0d      	ldr	r3, [pc, #52]	@ (800c758 <Read_DMPdirect+0x258>)
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c726:	601a      	str	r2, [r3, #0]
		*yaw = Yaw;
 800c728:	4b0d      	ldr	r3, [pc, #52]	@ (800c760 <Read_DMPdirect+0x260>)
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c72e:	601a      	str	r2, [r3, #0]

		return 1;
 800c730:	2301      	movs	r3, #1
 800c732:	e000      	b.n	800c736 <Read_DMPdirect+0x236>
  }
	return 0;
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3738      	adds	r7, #56	@ 0x38
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bdb0      	pop	{r4, r5, r7, pc}
 800c73e:	bf00      	nop
 800c740:	66666666 	.word	0x66666666
 800c744:	404ca666 	.word	0x404ca666
 800c748:	200044da 	.word	0x200044da
 800c74c:	200044d4 	.word	0x200044d4
 800c750:	200044cc 	.word	0x200044cc
 800c754:	4e800000 	.word	0x4e800000
 800c758:	200044dc 	.word	0x200044dc
 800c75c:	200044e0 	.word	0x200044e0
 800c760:	200044e4 	.word	0x200044e4
 800c764:	00000000 	.word	0x00000000

0800c768 <Read_Temperature>:
 入口参数：无
 返回  值：摄氏温度
 作    者：平衡小车之家
 **************************************************************************/
//int Read_Temperature(void) {
float Read_Temperature(void) {
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
  float Temp;
  uint8_t H, L;
  i2c_read(devAddr, MPU6050_RA_TEMP_OUT_H, 1, &H);
 800c76e:	1cfb      	adds	r3, r7, #3
 800c770:	2201      	movs	r2, #1
 800c772:	2141      	movs	r1, #65	@ 0x41
 800c774:	2068      	movs	r0, #104	@ 0x68
 800c776:	f7fc fb9f 	bl	8008eb8 <i2c_read>
  i2c_read(devAddr, MPU6050_RA_TEMP_OUT_L, 1, &L);
 800c77a:	1cbb      	adds	r3, r7, #2
 800c77c:	2201      	movs	r2, #1
 800c77e:	2142      	movs	r1, #66	@ 0x42
 800c780:	2068      	movs	r0, #104	@ 0x68
 800c782:	f7fc fb99 	bl	8008eb8 <i2c_read>
  Temp = (H << 8) + L;
 800c786:	78fb      	ldrb	r3, [r7, #3]
 800c788:	021b      	lsls	r3, r3, #8
 800c78a:	78ba      	ldrb	r2, [r7, #2]
 800c78c:	4413      	add	r3, r2
 800c78e:	ee07 3a90 	vmov	s15, r3
 800c792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c796:	edc7 7a01 	vstr	s15, [r7, #4]
  if (Temp > 32768)
 800c79a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c79e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800c808 <Read_Temperature+0xa0>
 800c7a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7aa:	dd07      	ble.n	800c7bc <Read_Temperature+0x54>
    Temp -= 65536;
 800c7ac:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7b0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800c80c <Read_Temperature+0xa4>
 800c7b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7b8:	edc7 7a01 	vstr	s15, [r7, #4]
//  Temp = (36.53 + Temp / 340) * 10;
  Temp = 36.53 +( Temp / 340);
 800c7bc:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7c0:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800c810 <Read_Temperature+0xa8>
 800c7c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c7c8:	ee16 0a90 	vmov	r0, s13
 800c7cc:	f7f3 fec4 	bl	8000558 <__aeabi_f2d>
 800c7d0:	a30b      	add	r3, pc, #44	@ (adr r3, 800c800 <Read_Temperature+0x98>)
 800c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d6:	f7f3 fd61 	bl	800029c <__adddf3>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4610      	mov	r0, r2
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	f7f4 f9e9 	bl	8000bb8 <__aeabi_d2f>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	607b      	str	r3, [r7, #4]
//  return (int) Temp;
  return Temp;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	ee07 3a90 	vmov	s15, r3
}
 800c7f0:	eeb0 0a67 	vmov.f32	s0, s15
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	f3af 8000 	nop.w
 800c800:	0a3d70a4 	.word	0x0a3d70a4
 800c804:	404243d7 	.word	0x404243d7
 800c808:	47000000 	.word	0x47000000
 800c80c:	47800000 	.word	0x47800000
 800c810:	43aa0000 	.word	0x43aa0000
 800c814:	00000000 	.word	0x00000000

0800c818 <Read_NativeData>:

#define G_TO_ACCEL 9.8065
#define DEG_TO_RAD 0.01745329

void Read_NativeData(float* ax,float* ay,float* az,float* gx,float* gy, float* gz)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b08a      	sub	sp, #40	@ 0x28
 800c81c:	af02      	add	r7, sp, #8
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	607a      	str	r2, [r7, #4]
 800c824:	603b      	str	r3, [r7, #0]
  uint8_t Rec_Data[6];
  int16_t rawAx,rawAy,rawAz;


  i2c_read(devAddr, MPU6050_RA_ACCEL_XOUT_H, 6, (uint8_t*)Rec_Data);
 800c826:	f107 0314 	add.w	r3, r7, #20
 800c82a:	2206      	movs	r2, #6
 800c82c:	213b      	movs	r1, #59	@ 0x3b
 800c82e:	2068      	movs	r0, #104	@ 0x68
 800c830:	f7fc fb42 	bl	8008eb8 <i2c_read>
  
  rawAx = (int16_t)(Rec_Data[0]<<8 | Rec_Data[1]);
 800c834:	7d3b      	ldrb	r3, [r7, #20]
 800c836:	021b      	lsls	r3, r3, #8
 800c838:	b21a      	sxth	r2, r3
 800c83a:	7d7b      	ldrb	r3, [r7, #21]
 800c83c:	b21b      	sxth	r3, r3
 800c83e:	4313      	orrs	r3, r2
 800c840:	83fb      	strh	r3, [r7, #30]
	rawAy = (int16_t)(Rec_Data[2]<<8 | Rec_Data[3]);
 800c842:	7dbb      	ldrb	r3, [r7, #22]
 800c844:	021b      	lsls	r3, r3, #8
 800c846:	b21a      	sxth	r2, r3
 800c848:	7dfb      	ldrb	r3, [r7, #23]
 800c84a:	b21b      	sxth	r3, r3
 800c84c:	4313      	orrs	r3, r2
 800c84e:	83bb      	strh	r3, [r7, #28]
	rawAz = (int16_t)(Rec_Data[4]<<8 | Rec_Data[5]);
 800c850:	7e3b      	ldrb	r3, [r7, #24]
 800c852:	021b      	lsls	r3, r3, #8
 800c854:	b21a      	sxth	r2, r3
 800c856:	7e7b      	ldrb	r3, [r7, #25]
 800c858:	b21b      	sxth	r3, r3
 800c85a:	4313      	orrs	r3, r2
 800c85c:	837b      	strh	r3, [r7, #26]

	straightAccelData[0]=rawAx;
 800c85e:	4a80      	ldr	r2, [pc, #512]	@ (800ca60 <Read_NativeData+0x248>)
 800c860:	8bfb      	ldrh	r3, [r7, #30]
 800c862:	8013      	strh	r3, [r2, #0]
	straightAccelData[1]=rawAy;
 800c864:	4a7e      	ldr	r2, [pc, #504]	@ (800ca60 <Read_NativeData+0x248>)
 800c866:	8bbb      	ldrh	r3, [r7, #28]
 800c868:	8053      	strh	r3, [r2, #2]
	straightAccelData[2]=rawAz;
 800c86a:	4a7d      	ldr	r2, [pc, #500]	@ (800ca60 <Read_NativeData+0x248>)
 800c86c:	8b7b      	ldrh	r3, [r7, #26]
 800c86e:	8093      	strh	r3, [r2, #4]
	matrixMultiply(3, 3, 1, rotatedAccelData, orientationMatrix, straightAccelData);
 800c870:	4b7b      	ldr	r3, [pc, #492]	@ (800ca60 <Read_NativeData+0x248>)
 800c872:	9301      	str	r3, [sp, #4]
 800c874:	4b7b      	ldr	r3, [pc, #492]	@ (800ca64 <Read_NativeData+0x24c>)
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	4b7b      	ldr	r3, [pc, #492]	@ (800ca68 <Read_NativeData+0x250>)
 800c87a:	2201      	movs	r2, #1
 800c87c:	2103      	movs	r1, #3
 800c87e:	2003      	movs	r0, #3
 800c880:	f7f5 fbf2 	bl	8002068 <matrixMultiply>

//	*ax = G_TO_ACCEL * rawAx/16384.0;
//	*ay = G_TO_ACCEL * rawAy/16384.0;
//	*az = G_TO_ACCEL * rawAz/16384.0;
	*ax = G_TO_ACCEL * rotatedAccelData[0]/16384.0;
 800c884:	4b78      	ldr	r3, [pc, #480]	@ (800ca68 <Read_NativeData+0x250>)
 800c886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7f3 fe52 	bl	8000534 <__aeabi_i2d>
 800c890:	a36d      	add	r3, pc, #436	@ (adr r3, 800ca48 <Read_NativeData+0x230>)
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	f7f3 feb7 	bl	8000608 <__aeabi_dmul>
 800c89a:	4602      	mov	r2, r0
 800c89c:	460b      	mov	r3, r1
 800c89e:	4610      	mov	r0, r2
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	f04f 0200 	mov.w	r2, #0
 800c8a6:	4b71      	ldr	r3, [pc, #452]	@ (800ca6c <Read_NativeData+0x254>)
 800c8a8:	f7f3 ffd8 	bl	800085c <__aeabi_ddiv>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	f7f4 f980 	bl	8000bb8 <__aeabi_d2f>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	601a      	str	r2, [r3, #0]
	*ay = G_TO_ACCEL * rotatedAccelData[1]/16384.0;
 800c8be:	4b6a      	ldr	r3, [pc, #424]	@ (800ca68 <Read_NativeData+0x250>)
 800c8c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7f3 fe35 	bl	8000534 <__aeabi_i2d>
 800c8ca:	a35f      	add	r3, pc, #380	@ (adr r3, 800ca48 <Read_NativeData+0x230>)
 800c8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d0:	f7f3 fe9a 	bl	8000608 <__aeabi_dmul>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	4610      	mov	r0, r2
 800c8da:	4619      	mov	r1, r3
 800c8dc:	f04f 0200 	mov.w	r2, #0
 800c8e0:	4b62      	ldr	r3, [pc, #392]	@ (800ca6c <Read_NativeData+0x254>)
 800c8e2:	f7f3 ffbb 	bl	800085c <__aeabi_ddiv>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	4610      	mov	r0, r2
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	f7f4 f963 	bl	8000bb8 <__aeabi_d2f>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	601a      	str	r2, [r3, #0]
	*az = G_TO_ACCEL * rotatedAccelData[2]/16384.0;
 800c8f8:	4b5b      	ldr	r3, [pc, #364]	@ (800ca68 <Read_NativeData+0x250>)
 800c8fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7f3 fe18 	bl	8000534 <__aeabi_i2d>
 800c904:	a350      	add	r3, pc, #320	@ (adr r3, 800ca48 <Read_NativeData+0x230>)
 800c906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90a:	f7f3 fe7d 	bl	8000608 <__aeabi_dmul>
 800c90e:	4602      	mov	r2, r0
 800c910:	460b      	mov	r3, r1
 800c912:	4610      	mov	r0, r2
 800c914:	4619      	mov	r1, r3
 800c916:	f04f 0200 	mov.w	r2, #0
 800c91a:	4b54      	ldr	r3, [pc, #336]	@ (800ca6c <Read_NativeData+0x254>)
 800c91c:	f7f3 ff9e 	bl	800085c <__aeabi_ddiv>
 800c920:	4602      	mov	r2, r0
 800c922:	460b      	mov	r3, r1
 800c924:	4610      	mov	r0, r2
 800c926:	4619      	mov	r1, r3
 800c928:	f7f4 f946 	bl	8000bb8 <__aeabi_d2f>
 800c92c:	4602      	mov	r2, r0
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	601a      	str	r2, [r3, #0]

  i2c_read(devAddr, MPU6050_RA_GYRO_XOUT_H, 6, (uint8_t*)Rec_Data);
 800c932:	f107 0314 	add.w	r3, r7, #20
 800c936:	2206      	movs	r2, #6
 800c938:	2143      	movs	r1, #67	@ 0x43
 800c93a:	2068      	movs	r0, #104	@ 0x68
 800c93c:	f7fc fabc 	bl	8008eb8 <i2c_read>

  rawAx = (int16_t)(Rec_Data[0]<<8 | Rec_Data[1]);
 800c940:	7d3b      	ldrb	r3, [r7, #20]
 800c942:	021b      	lsls	r3, r3, #8
 800c944:	b21a      	sxth	r2, r3
 800c946:	7d7b      	ldrb	r3, [r7, #21]
 800c948:	b21b      	sxth	r3, r3
 800c94a:	4313      	orrs	r3, r2
 800c94c:	83fb      	strh	r3, [r7, #30]
	rawAy = (int16_t)(Rec_Data[2]<<8 | Rec_Data[3]);
 800c94e:	7dbb      	ldrb	r3, [r7, #22]
 800c950:	021b      	lsls	r3, r3, #8
 800c952:	b21a      	sxth	r2, r3
 800c954:	7dfb      	ldrb	r3, [r7, #23]
 800c956:	b21b      	sxth	r3, r3
 800c958:	4313      	orrs	r3, r2
 800c95a:	83bb      	strh	r3, [r7, #28]
	rawAz = (int16_t)(Rec_Data[4]<<8 | Rec_Data[5]);
 800c95c:	7e3b      	ldrb	r3, [r7, #24]
 800c95e:	021b      	lsls	r3, r3, #8
 800c960:	b21a      	sxth	r2, r3
 800c962:	7e7b      	ldrb	r3, [r7, #25]
 800c964:	b21b      	sxth	r3, r3
 800c966:	4313      	orrs	r3, r2
 800c968:	837b      	strh	r3, [r7, #26]

	straightGyroData[0]=rawAx;
 800c96a:	4a41      	ldr	r2, [pc, #260]	@ (800ca70 <Read_NativeData+0x258>)
 800c96c:	8bfb      	ldrh	r3, [r7, #30]
 800c96e:	8013      	strh	r3, [r2, #0]
	straightGyroData[1]=rawAy;
 800c970:	4a3f      	ldr	r2, [pc, #252]	@ (800ca70 <Read_NativeData+0x258>)
 800c972:	8bbb      	ldrh	r3, [r7, #28]
 800c974:	8053      	strh	r3, [r2, #2]
	straightGyroData[2]=rawAz;
 800c976:	4a3e      	ldr	r2, [pc, #248]	@ (800ca70 <Read_NativeData+0x258>)
 800c978:	8b7b      	ldrh	r3, [r7, #26]
 800c97a:	8093      	strh	r3, [r2, #4]
	matrixMultiply(3, 3, 1, rotatedGyroData, orientationMatrix, straightGyroData);
 800c97c:	4b3c      	ldr	r3, [pc, #240]	@ (800ca70 <Read_NativeData+0x258>)
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	4b38      	ldr	r3, [pc, #224]	@ (800ca64 <Read_NativeData+0x24c>)
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	4b3b      	ldr	r3, [pc, #236]	@ (800ca74 <Read_NativeData+0x25c>)
 800c986:	2201      	movs	r2, #1
 800c988:	2103      	movs	r1, #3
 800c98a:	2003      	movs	r0, #3
 800c98c:	f7f5 fb6c 	bl	8002068 <matrixMultiply>

//	*gx = DEG_TO_RAD * rawAx/131.0;
//	*gy = DEG_TO_RAD * rawAy/131.0;
//	*gz = DEG_TO_RAD * rawAz/131.0;
	*gx = DEG_TO_RAD * rotatedGyroData[0]/131.0;
 800c990:	4b38      	ldr	r3, [pc, #224]	@ (800ca74 <Read_NativeData+0x25c>)
 800c992:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c996:	4618      	mov	r0, r3
 800c998:	f7f3 fdcc 	bl	8000534 <__aeabi_i2d>
 800c99c:	a32c      	add	r3, pc, #176	@ (adr r3, 800ca50 <Read_NativeData+0x238>)
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	f7f3 fe31 	bl	8000608 <__aeabi_dmul>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	4610      	mov	r0, r2
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	a32a      	add	r3, pc, #168	@ (adr r3, 800ca58 <Read_NativeData+0x240>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	f7f3 ff52 	bl	800085c <__aeabi_ddiv>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	4610      	mov	r0, r2
 800c9be:	4619      	mov	r1, r3
 800c9c0:	f7f4 f8fa 	bl	8000bb8 <__aeabi_d2f>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	601a      	str	r2, [r3, #0]
	*gy = DEG_TO_RAD * rotatedGyroData[1]/131.0;
 800c9ca:	4b2a      	ldr	r3, [pc, #168]	@ (800ca74 <Read_NativeData+0x25c>)
 800c9cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7f3 fdaf 	bl	8000534 <__aeabi_i2d>
 800c9d6:	a31e      	add	r3, pc, #120	@ (adr r3, 800ca50 <Read_NativeData+0x238>)
 800c9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9dc:	f7f3 fe14 	bl	8000608 <__aeabi_dmul>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	a31b      	add	r3, pc, #108	@ (adr r3, 800ca58 <Read_NativeData+0x240>)
 800c9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ee:	f7f3 ff35 	bl	800085c <__aeabi_ddiv>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	4610      	mov	r0, r2
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	f7f4 f8dd 	bl	8000bb8 <__aeabi_d2f>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca02:	601a      	str	r2, [r3, #0]
	*gz = DEG_TO_RAD * rotatedGyroData[2]/131.0;
 800ca04:	4b1b      	ldr	r3, [pc, #108]	@ (800ca74 <Read_NativeData+0x25c>)
 800ca06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7f3 fd92 	bl	8000534 <__aeabi_i2d>
 800ca10:	a30f      	add	r3, pc, #60	@ (adr r3, 800ca50 <Read_NativeData+0x238>)
 800ca12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca16:	f7f3 fdf7 	bl	8000608 <__aeabi_dmul>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	4610      	mov	r0, r2
 800ca20:	4619      	mov	r1, r3
 800ca22:	a30d      	add	r3, pc, #52	@ (adr r3, 800ca58 <Read_NativeData+0x240>)
 800ca24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca28:	f7f3 ff18 	bl	800085c <__aeabi_ddiv>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	460b      	mov	r3, r1
 800ca30:	4610      	mov	r0, r2
 800ca32:	4619      	mov	r1, r3
 800ca34:	f7f4 f8c0 	bl	8000bb8 <__aeabi_d2f>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca3c:	601a      	str	r2, [r3, #0]
  //HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 100);
}
 800ca3e:	bf00      	nop
 800ca40:	3720      	adds	r7, #32
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	916872b0 	.word	0x916872b0
 800ca4c:	40239ced 	.word	0x40239ced
 800ca50:	7707c94d 	.word	0x7707c94d
 800ca54:	3f91df46 	.word	0x3f91df46
 800ca58:	00000000 	.word	0x00000000
 800ca5c:	40606000 	.word	0x40606000
 800ca60:	20004508 	.word	0x20004508
 800ca64:	200044f4 	.word	0x200044f4
 800ca68:	20004510 	.word	0x20004510
 800ca6c:	40d00000 	.word	0x40d00000
 800ca70:	20004518 	.word	0x20004518
 800ca74:	20004520 	.word	0x20004520

0800ca78 <__cvt>:
 800ca78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca7c:	ec57 6b10 	vmov	r6, r7, d0
 800ca80:	2f00      	cmp	r7, #0
 800ca82:	460c      	mov	r4, r1
 800ca84:	4619      	mov	r1, r3
 800ca86:	463b      	mov	r3, r7
 800ca88:	bfbb      	ittet	lt
 800ca8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ca8e:	461f      	movlt	r7, r3
 800ca90:	2300      	movge	r3, #0
 800ca92:	232d      	movlt	r3, #45	@ 0x2d
 800ca94:	700b      	strb	r3, [r1, #0]
 800ca96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ca9c:	4691      	mov	r9, r2
 800ca9e:	f023 0820 	bic.w	r8, r3, #32
 800caa2:	bfbc      	itt	lt
 800caa4:	4632      	movlt	r2, r6
 800caa6:	4616      	movlt	r6, r2
 800caa8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800caac:	d005      	beq.n	800caba <__cvt+0x42>
 800caae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cab2:	d100      	bne.n	800cab6 <__cvt+0x3e>
 800cab4:	3401      	adds	r4, #1
 800cab6:	2102      	movs	r1, #2
 800cab8:	e000      	b.n	800cabc <__cvt+0x44>
 800caba:	2103      	movs	r1, #3
 800cabc:	ab03      	add	r3, sp, #12
 800cabe:	9301      	str	r3, [sp, #4]
 800cac0:	ab02      	add	r3, sp, #8
 800cac2:	9300      	str	r3, [sp, #0]
 800cac4:	ec47 6b10 	vmov	d0, r6, r7
 800cac8:	4653      	mov	r3, sl
 800caca:	4622      	mov	r2, r4
 800cacc:	f000 ff5c 	bl	800d988 <_dtoa_r>
 800cad0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cad4:	4605      	mov	r5, r0
 800cad6:	d119      	bne.n	800cb0c <__cvt+0x94>
 800cad8:	f019 0f01 	tst.w	r9, #1
 800cadc:	d00e      	beq.n	800cafc <__cvt+0x84>
 800cade:	eb00 0904 	add.w	r9, r0, r4
 800cae2:	2200      	movs	r2, #0
 800cae4:	2300      	movs	r3, #0
 800cae6:	4630      	mov	r0, r6
 800cae8:	4639      	mov	r1, r7
 800caea:	f7f3 fff5 	bl	8000ad8 <__aeabi_dcmpeq>
 800caee:	b108      	cbz	r0, 800caf4 <__cvt+0x7c>
 800caf0:	f8cd 900c 	str.w	r9, [sp, #12]
 800caf4:	2230      	movs	r2, #48	@ 0x30
 800caf6:	9b03      	ldr	r3, [sp, #12]
 800caf8:	454b      	cmp	r3, r9
 800cafa:	d31e      	bcc.n	800cb3a <__cvt+0xc2>
 800cafc:	9b03      	ldr	r3, [sp, #12]
 800cafe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb00:	1b5b      	subs	r3, r3, r5
 800cb02:	4628      	mov	r0, r5
 800cb04:	6013      	str	r3, [r2, #0]
 800cb06:	b004      	add	sp, #16
 800cb08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb10:	eb00 0904 	add.w	r9, r0, r4
 800cb14:	d1e5      	bne.n	800cae2 <__cvt+0x6a>
 800cb16:	7803      	ldrb	r3, [r0, #0]
 800cb18:	2b30      	cmp	r3, #48	@ 0x30
 800cb1a:	d10a      	bne.n	800cb32 <__cvt+0xba>
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	2300      	movs	r3, #0
 800cb20:	4630      	mov	r0, r6
 800cb22:	4639      	mov	r1, r7
 800cb24:	f7f3 ffd8 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb28:	b918      	cbnz	r0, 800cb32 <__cvt+0xba>
 800cb2a:	f1c4 0401 	rsb	r4, r4, #1
 800cb2e:	f8ca 4000 	str.w	r4, [sl]
 800cb32:	f8da 3000 	ldr.w	r3, [sl]
 800cb36:	4499      	add	r9, r3
 800cb38:	e7d3      	b.n	800cae2 <__cvt+0x6a>
 800cb3a:	1c59      	adds	r1, r3, #1
 800cb3c:	9103      	str	r1, [sp, #12]
 800cb3e:	701a      	strb	r2, [r3, #0]
 800cb40:	e7d9      	b.n	800caf6 <__cvt+0x7e>

0800cb42 <__exponent>:
 800cb42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb44:	2900      	cmp	r1, #0
 800cb46:	bfba      	itte	lt
 800cb48:	4249      	neglt	r1, r1
 800cb4a:	232d      	movlt	r3, #45	@ 0x2d
 800cb4c:	232b      	movge	r3, #43	@ 0x2b
 800cb4e:	2909      	cmp	r1, #9
 800cb50:	7002      	strb	r2, [r0, #0]
 800cb52:	7043      	strb	r3, [r0, #1]
 800cb54:	dd29      	ble.n	800cbaa <__exponent+0x68>
 800cb56:	f10d 0307 	add.w	r3, sp, #7
 800cb5a:	461d      	mov	r5, r3
 800cb5c:	270a      	movs	r7, #10
 800cb5e:	461a      	mov	r2, r3
 800cb60:	fbb1 f6f7 	udiv	r6, r1, r7
 800cb64:	fb07 1416 	mls	r4, r7, r6, r1
 800cb68:	3430      	adds	r4, #48	@ 0x30
 800cb6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cb6e:	460c      	mov	r4, r1
 800cb70:	2c63      	cmp	r4, #99	@ 0x63
 800cb72:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb76:	4631      	mov	r1, r6
 800cb78:	dcf1      	bgt.n	800cb5e <__exponent+0x1c>
 800cb7a:	3130      	adds	r1, #48	@ 0x30
 800cb7c:	1e94      	subs	r4, r2, #2
 800cb7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cb82:	1c41      	adds	r1, r0, #1
 800cb84:	4623      	mov	r3, r4
 800cb86:	42ab      	cmp	r3, r5
 800cb88:	d30a      	bcc.n	800cba0 <__exponent+0x5e>
 800cb8a:	f10d 0309 	add.w	r3, sp, #9
 800cb8e:	1a9b      	subs	r3, r3, r2
 800cb90:	42ac      	cmp	r4, r5
 800cb92:	bf88      	it	hi
 800cb94:	2300      	movhi	r3, #0
 800cb96:	3302      	adds	r3, #2
 800cb98:	4403      	add	r3, r0
 800cb9a:	1a18      	subs	r0, r3, r0
 800cb9c:	b003      	add	sp, #12
 800cb9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cba0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cba4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cba8:	e7ed      	b.n	800cb86 <__exponent+0x44>
 800cbaa:	2330      	movs	r3, #48	@ 0x30
 800cbac:	3130      	adds	r1, #48	@ 0x30
 800cbae:	7083      	strb	r3, [r0, #2]
 800cbb0:	70c1      	strb	r1, [r0, #3]
 800cbb2:	1d03      	adds	r3, r0, #4
 800cbb4:	e7f1      	b.n	800cb9a <__exponent+0x58>
	...

0800cbb8 <_printf_float>:
 800cbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbbc:	b08d      	sub	sp, #52	@ 0x34
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cbc4:	4616      	mov	r6, r2
 800cbc6:	461f      	mov	r7, r3
 800cbc8:	4605      	mov	r5, r0
 800cbca:	f000 fdcf 	bl	800d76c <_localeconv_r>
 800cbce:	6803      	ldr	r3, [r0, #0]
 800cbd0:	9304      	str	r3, [sp, #16]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7f3 fb54 	bl	8000280 <strlen>
 800cbd8:	2300      	movs	r3, #0
 800cbda:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbdc:	f8d8 3000 	ldr.w	r3, [r8]
 800cbe0:	9005      	str	r0, [sp, #20]
 800cbe2:	3307      	adds	r3, #7
 800cbe4:	f023 0307 	bic.w	r3, r3, #7
 800cbe8:	f103 0208 	add.w	r2, r3, #8
 800cbec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cbf0:	f8d4 b000 	ldr.w	fp, [r4]
 800cbf4:	f8c8 2000 	str.w	r2, [r8]
 800cbf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbfc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cc00:	9307      	str	r3, [sp, #28]
 800cc02:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cc0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc0e:	4b9c      	ldr	r3, [pc, #624]	@ (800ce80 <_printf_float+0x2c8>)
 800cc10:	f04f 32ff 	mov.w	r2, #4294967295
 800cc14:	f7f3 ff92 	bl	8000b3c <__aeabi_dcmpun>
 800cc18:	bb70      	cbnz	r0, 800cc78 <_printf_float+0xc0>
 800cc1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc1e:	4b98      	ldr	r3, [pc, #608]	@ (800ce80 <_printf_float+0x2c8>)
 800cc20:	f04f 32ff 	mov.w	r2, #4294967295
 800cc24:	f7f3 ff6c 	bl	8000b00 <__aeabi_dcmple>
 800cc28:	bb30      	cbnz	r0, 800cc78 <_printf_float+0xc0>
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	4640      	mov	r0, r8
 800cc30:	4649      	mov	r1, r9
 800cc32:	f7f3 ff5b 	bl	8000aec <__aeabi_dcmplt>
 800cc36:	b110      	cbz	r0, 800cc3e <_printf_float+0x86>
 800cc38:	232d      	movs	r3, #45	@ 0x2d
 800cc3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc3e:	4a91      	ldr	r2, [pc, #580]	@ (800ce84 <_printf_float+0x2cc>)
 800cc40:	4b91      	ldr	r3, [pc, #580]	@ (800ce88 <_printf_float+0x2d0>)
 800cc42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cc46:	bf94      	ite	ls
 800cc48:	4690      	movls	r8, r2
 800cc4a:	4698      	movhi	r8, r3
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	6123      	str	r3, [r4, #16]
 800cc50:	f02b 0304 	bic.w	r3, fp, #4
 800cc54:	6023      	str	r3, [r4, #0]
 800cc56:	f04f 0900 	mov.w	r9, #0
 800cc5a:	9700      	str	r7, [sp, #0]
 800cc5c:	4633      	mov	r3, r6
 800cc5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cc60:	4621      	mov	r1, r4
 800cc62:	4628      	mov	r0, r5
 800cc64:	f000 f9d2 	bl	800d00c <_printf_common>
 800cc68:	3001      	adds	r0, #1
 800cc6a:	f040 808d 	bne.w	800cd88 <_printf_float+0x1d0>
 800cc6e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc72:	b00d      	add	sp, #52	@ 0x34
 800cc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc78:	4642      	mov	r2, r8
 800cc7a:	464b      	mov	r3, r9
 800cc7c:	4640      	mov	r0, r8
 800cc7e:	4649      	mov	r1, r9
 800cc80:	f7f3 ff5c 	bl	8000b3c <__aeabi_dcmpun>
 800cc84:	b140      	cbz	r0, 800cc98 <_printf_float+0xe0>
 800cc86:	464b      	mov	r3, r9
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	bfbc      	itt	lt
 800cc8c:	232d      	movlt	r3, #45	@ 0x2d
 800cc8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cc92:	4a7e      	ldr	r2, [pc, #504]	@ (800ce8c <_printf_float+0x2d4>)
 800cc94:	4b7e      	ldr	r3, [pc, #504]	@ (800ce90 <_printf_float+0x2d8>)
 800cc96:	e7d4      	b.n	800cc42 <_printf_float+0x8a>
 800cc98:	6863      	ldr	r3, [r4, #4]
 800cc9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cc9e:	9206      	str	r2, [sp, #24]
 800cca0:	1c5a      	adds	r2, r3, #1
 800cca2:	d13b      	bne.n	800cd1c <_printf_float+0x164>
 800cca4:	2306      	movs	r3, #6
 800cca6:	6063      	str	r3, [r4, #4]
 800cca8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ccac:	2300      	movs	r3, #0
 800ccae:	6022      	str	r2, [r4, #0]
 800ccb0:	9303      	str	r3, [sp, #12]
 800ccb2:	ab0a      	add	r3, sp, #40	@ 0x28
 800ccb4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ccb8:	ab09      	add	r3, sp, #36	@ 0x24
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	6861      	ldr	r1, [r4, #4]
 800ccbe:	ec49 8b10 	vmov	d0, r8, r9
 800ccc2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	f7ff fed6 	bl	800ca78 <__cvt>
 800cccc:	9b06      	ldr	r3, [sp, #24]
 800ccce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ccd0:	2b47      	cmp	r3, #71	@ 0x47
 800ccd2:	4680      	mov	r8, r0
 800ccd4:	d129      	bne.n	800cd2a <_printf_float+0x172>
 800ccd6:	1cc8      	adds	r0, r1, #3
 800ccd8:	db02      	blt.n	800cce0 <_printf_float+0x128>
 800ccda:	6863      	ldr	r3, [r4, #4]
 800ccdc:	4299      	cmp	r1, r3
 800ccde:	dd41      	ble.n	800cd64 <_printf_float+0x1ac>
 800cce0:	f1aa 0a02 	sub.w	sl, sl, #2
 800cce4:	fa5f fa8a 	uxtb.w	sl, sl
 800cce8:	3901      	subs	r1, #1
 800ccea:	4652      	mov	r2, sl
 800ccec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ccf0:	9109      	str	r1, [sp, #36]	@ 0x24
 800ccf2:	f7ff ff26 	bl	800cb42 <__exponent>
 800ccf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccf8:	1813      	adds	r3, r2, r0
 800ccfa:	2a01      	cmp	r2, #1
 800ccfc:	4681      	mov	r9, r0
 800ccfe:	6123      	str	r3, [r4, #16]
 800cd00:	dc02      	bgt.n	800cd08 <_printf_float+0x150>
 800cd02:	6822      	ldr	r2, [r4, #0]
 800cd04:	07d2      	lsls	r2, r2, #31
 800cd06:	d501      	bpl.n	800cd0c <_printf_float+0x154>
 800cd08:	3301      	adds	r3, #1
 800cd0a:	6123      	str	r3, [r4, #16]
 800cd0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d0a2      	beq.n	800cc5a <_printf_float+0xa2>
 800cd14:	232d      	movs	r3, #45	@ 0x2d
 800cd16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd1a:	e79e      	b.n	800cc5a <_printf_float+0xa2>
 800cd1c:	9a06      	ldr	r2, [sp, #24]
 800cd1e:	2a47      	cmp	r2, #71	@ 0x47
 800cd20:	d1c2      	bne.n	800cca8 <_printf_float+0xf0>
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1c0      	bne.n	800cca8 <_printf_float+0xf0>
 800cd26:	2301      	movs	r3, #1
 800cd28:	e7bd      	b.n	800cca6 <_printf_float+0xee>
 800cd2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cd2e:	d9db      	bls.n	800cce8 <_printf_float+0x130>
 800cd30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cd34:	d118      	bne.n	800cd68 <_printf_float+0x1b0>
 800cd36:	2900      	cmp	r1, #0
 800cd38:	6863      	ldr	r3, [r4, #4]
 800cd3a:	dd0b      	ble.n	800cd54 <_printf_float+0x19c>
 800cd3c:	6121      	str	r1, [r4, #16]
 800cd3e:	b913      	cbnz	r3, 800cd46 <_printf_float+0x18e>
 800cd40:	6822      	ldr	r2, [r4, #0]
 800cd42:	07d0      	lsls	r0, r2, #31
 800cd44:	d502      	bpl.n	800cd4c <_printf_float+0x194>
 800cd46:	3301      	adds	r3, #1
 800cd48:	440b      	add	r3, r1
 800cd4a:	6123      	str	r3, [r4, #16]
 800cd4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cd4e:	f04f 0900 	mov.w	r9, #0
 800cd52:	e7db      	b.n	800cd0c <_printf_float+0x154>
 800cd54:	b913      	cbnz	r3, 800cd5c <_printf_float+0x1a4>
 800cd56:	6822      	ldr	r2, [r4, #0]
 800cd58:	07d2      	lsls	r2, r2, #31
 800cd5a:	d501      	bpl.n	800cd60 <_printf_float+0x1a8>
 800cd5c:	3302      	adds	r3, #2
 800cd5e:	e7f4      	b.n	800cd4a <_printf_float+0x192>
 800cd60:	2301      	movs	r3, #1
 800cd62:	e7f2      	b.n	800cd4a <_printf_float+0x192>
 800cd64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cd68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd6a:	4299      	cmp	r1, r3
 800cd6c:	db05      	blt.n	800cd7a <_printf_float+0x1c2>
 800cd6e:	6823      	ldr	r3, [r4, #0]
 800cd70:	6121      	str	r1, [r4, #16]
 800cd72:	07d8      	lsls	r0, r3, #31
 800cd74:	d5ea      	bpl.n	800cd4c <_printf_float+0x194>
 800cd76:	1c4b      	adds	r3, r1, #1
 800cd78:	e7e7      	b.n	800cd4a <_printf_float+0x192>
 800cd7a:	2900      	cmp	r1, #0
 800cd7c:	bfd4      	ite	le
 800cd7e:	f1c1 0202 	rsble	r2, r1, #2
 800cd82:	2201      	movgt	r2, #1
 800cd84:	4413      	add	r3, r2
 800cd86:	e7e0      	b.n	800cd4a <_printf_float+0x192>
 800cd88:	6823      	ldr	r3, [r4, #0]
 800cd8a:	055a      	lsls	r2, r3, #21
 800cd8c:	d407      	bmi.n	800cd9e <_printf_float+0x1e6>
 800cd8e:	6923      	ldr	r3, [r4, #16]
 800cd90:	4642      	mov	r2, r8
 800cd92:	4631      	mov	r1, r6
 800cd94:	4628      	mov	r0, r5
 800cd96:	47b8      	blx	r7
 800cd98:	3001      	adds	r0, #1
 800cd9a:	d12b      	bne.n	800cdf4 <_printf_float+0x23c>
 800cd9c:	e767      	b.n	800cc6e <_printf_float+0xb6>
 800cd9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cda2:	f240 80dd 	bls.w	800cf60 <_printf_float+0x3a8>
 800cda6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cdaa:	2200      	movs	r2, #0
 800cdac:	2300      	movs	r3, #0
 800cdae:	f7f3 fe93 	bl	8000ad8 <__aeabi_dcmpeq>
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	d033      	beq.n	800ce1e <_printf_float+0x266>
 800cdb6:	4a37      	ldr	r2, [pc, #220]	@ (800ce94 <_printf_float+0x2dc>)
 800cdb8:	2301      	movs	r3, #1
 800cdba:	4631      	mov	r1, r6
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	47b8      	blx	r7
 800cdc0:	3001      	adds	r0, #1
 800cdc2:	f43f af54 	beq.w	800cc6e <_printf_float+0xb6>
 800cdc6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cdca:	4543      	cmp	r3, r8
 800cdcc:	db02      	blt.n	800cdd4 <_printf_float+0x21c>
 800cdce:	6823      	ldr	r3, [r4, #0]
 800cdd0:	07d8      	lsls	r0, r3, #31
 800cdd2:	d50f      	bpl.n	800cdf4 <_printf_float+0x23c>
 800cdd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdd8:	4631      	mov	r1, r6
 800cdda:	4628      	mov	r0, r5
 800cddc:	47b8      	blx	r7
 800cdde:	3001      	adds	r0, #1
 800cde0:	f43f af45 	beq.w	800cc6e <_printf_float+0xb6>
 800cde4:	f04f 0900 	mov.w	r9, #0
 800cde8:	f108 38ff 	add.w	r8, r8, #4294967295
 800cdec:	f104 0a1a 	add.w	sl, r4, #26
 800cdf0:	45c8      	cmp	r8, r9
 800cdf2:	dc09      	bgt.n	800ce08 <_printf_float+0x250>
 800cdf4:	6823      	ldr	r3, [r4, #0]
 800cdf6:	079b      	lsls	r3, r3, #30
 800cdf8:	f100 8103 	bmi.w	800d002 <_printf_float+0x44a>
 800cdfc:	68e0      	ldr	r0, [r4, #12]
 800cdfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce00:	4298      	cmp	r0, r3
 800ce02:	bfb8      	it	lt
 800ce04:	4618      	movlt	r0, r3
 800ce06:	e734      	b.n	800cc72 <_printf_float+0xba>
 800ce08:	2301      	movs	r3, #1
 800ce0a:	4652      	mov	r2, sl
 800ce0c:	4631      	mov	r1, r6
 800ce0e:	4628      	mov	r0, r5
 800ce10:	47b8      	blx	r7
 800ce12:	3001      	adds	r0, #1
 800ce14:	f43f af2b 	beq.w	800cc6e <_printf_float+0xb6>
 800ce18:	f109 0901 	add.w	r9, r9, #1
 800ce1c:	e7e8      	b.n	800cdf0 <_printf_float+0x238>
 800ce1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	dc39      	bgt.n	800ce98 <_printf_float+0x2e0>
 800ce24:	4a1b      	ldr	r2, [pc, #108]	@ (800ce94 <_printf_float+0x2dc>)
 800ce26:	2301      	movs	r3, #1
 800ce28:	4631      	mov	r1, r6
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	47b8      	blx	r7
 800ce2e:	3001      	adds	r0, #1
 800ce30:	f43f af1d 	beq.w	800cc6e <_printf_float+0xb6>
 800ce34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ce38:	ea59 0303 	orrs.w	r3, r9, r3
 800ce3c:	d102      	bne.n	800ce44 <_printf_float+0x28c>
 800ce3e:	6823      	ldr	r3, [r4, #0]
 800ce40:	07d9      	lsls	r1, r3, #31
 800ce42:	d5d7      	bpl.n	800cdf4 <_printf_float+0x23c>
 800ce44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce48:	4631      	mov	r1, r6
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	47b8      	blx	r7
 800ce4e:	3001      	adds	r0, #1
 800ce50:	f43f af0d 	beq.w	800cc6e <_printf_float+0xb6>
 800ce54:	f04f 0a00 	mov.w	sl, #0
 800ce58:	f104 0b1a 	add.w	fp, r4, #26
 800ce5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce5e:	425b      	negs	r3, r3
 800ce60:	4553      	cmp	r3, sl
 800ce62:	dc01      	bgt.n	800ce68 <_printf_float+0x2b0>
 800ce64:	464b      	mov	r3, r9
 800ce66:	e793      	b.n	800cd90 <_printf_float+0x1d8>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	465a      	mov	r2, fp
 800ce6c:	4631      	mov	r1, r6
 800ce6e:	4628      	mov	r0, r5
 800ce70:	47b8      	blx	r7
 800ce72:	3001      	adds	r0, #1
 800ce74:	f43f aefb 	beq.w	800cc6e <_printf_float+0xb6>
 800ce78:	f10a 0a01 	add.w	sl, sl, #1
 800ce7c:	e7ee      	b.n	800ce5c <_printf_float+0x2a4>
 800ce7e:	bf00      	nop
 800ce80:	7fefffff 	.word	0x7fefffff
 800ce84:	08011c1e 	.word	0x08011c1e
 800ce88:	08011c22 	.word	0x08011c22
 800ce8c:	08011c26 	.word	0x08011c26
 800ce90:	08011c2a 	.word	0x08011c2a
 800ce94:	08011c2e 	.word	0x08011c2e
 800ce98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ce9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ce9e:	4553      	cmp	r3, sl
 800cea0:	bfa8      	it	ge
 800cea2:	4653      	movge	r3, sl
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	4699      	mov	r9, r3
 800cea8:	dc36      	bgt.n	800cf18 <_printf_float+0x360>
 800ceaa:	f04f 0b00 	mov.w	fp, #0
 800ceae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ceb2:	f104 021a 	add.w	r2, r4, #26
 800ceb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ceb8:	9306      	str	r3, [sp, #24]
 800ceba:	eba3 0309 	sub.w	r3, r3, r9
 800cebe:	455b      	cmp	r3, fp
 800cec0:	dc31      	bgt.n	800cf26 <_printf_float+0x36e>
 800cec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cec4:	459a      	cmp	sl, r3
 800cec6:	dc3a      	bgt.n	800cf3e <_printf_float+0x386>
 800cec8:	6823      	ldr	r3, [r4, #0]
 800ceca:	07da      	lsls	r2, r3, #31
 800cecc:	d437      	bmi.n	800cf3e <_printf_float+0x386>
 800cece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced0:	ebaa 0903 	sub.w	r9, sl, r3
 800ced4:	9b06      	ldr	r3, [sp, #24]
 800ced6:	ebaa 0303 	sub.w	r3, sl, r3
 800ceda:	4599      	cmp	r9, r3
 800cedc:	bfa8      	it	ge
 800cede:	4699      	movge	r9, r3
 800cee0:	f1b9 0f00 	cmp.w	r9, #0
 800cee4:	dc33      	bgt.n	800cf4e <_printf_float+0x396>
 800cee6:	f04f 0800 	mov.w	r8, #0
 800ceea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ceee:	f104 0b1a 	add.w	fp, r4, #26
 800cef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cef4:	ebaa 0303 	sub.w	r3, sl, r3
 800cef8:	eba3 0309 	sub.w	r3, r3, r9
 800cefc:	4543      	cmp	r3, r8
 800cefe:	f77f af79 	ble.w	800cdf4 <_printf_float+0x23c>
 800cf02:	2301      	movs	r3, #1
 800cf04:	465a      	mov	r2, fp
 800cf06:	4631      	mov	r1, r6
 800cf08:	4628      	mov	r0, r5
 800cf0a:	47b8      	blx	r7
 800cf0c:	3001      	adds	r0, #1
 800cf0e:	f43f aeae 	beq.w	800cc6e <_printf_float+0xb6>
 800cf12:	f108 0801 	add.w	r8, r8, #1
 800cf16:	e7ec      	b.n	800cef2 <_printf_float+0x33a>
 800cf18:	4642      	mov	r2, r8
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	47b8      	blx	r7
 800cf20:	3001      	adds	r0, #1
 800cf22:	d1c2      	bne.n	800ceaa <_printf_float+0x2f2>
 800cf24:	e6a3      	b.n	800cc6e <_printf_float+0xb6>
 800cf26:	2301      	movs	r3, #1
 800cf28:	4631      	mov	r1, r6
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	9206      	str	r2, [sp, #24]
 800cf2e:	47b8      	blx	r7
 800cf30:	3001      	adds	r0, #1
 800cf32:	f43f ae9c 	beq.w	800cc6e <_printf_float+0xb6>
 800cf36:	9a06      	ldr	r2, [sp, #24]
 800cf38:	f10b 0b01 	add.w	fp, fp, #1
 800cf3c:	e7bb      	b.n	800ceb6 <_printf_float+0x2fe>
 800cf3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf42:	4631      	mov	r1, r6
 800cf44:	4628      	mov	r0, r5
 800cf46:	47b8      	blx	r7
 800cf48:	3001      	adds	r0, #1
 800cf4a:	d1c0      	bne.n	800cece <_printf_float+0x316>
 800cf4c:	e68f      	b.n	800cc6e <_printf_float+0xb6>
 800cf4e:	9a06      	ldr	r2, [sp, #24]
 800cf50:	464b      	mov	r3, r9
 800cf52:	4442      	add	r2, r8
 800cf54:	4631      	mov	r1, r6
 800cf56:	4628      	mov	r0, r5
 800cf58:	47b8      	blx	r7
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	d1c3      	bne.n	800cee6 <_printf_float+0x32e>
 800cf5e:	e686      	b.n	800cc6e <_printf_float+0xb6>
 800cf60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf64:	f1ba 0f01 	cmp.w	sl, #1
 800cf68:	dc01      	bgt.n	800cf6e <_printf_float+0x3b6>
 800cf6a:	07db      	lsls	r3, r3, #31
 800cf6c:	d536      	bpl.n	800cfdc <_printf_float+0x424>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	4642      	mov	r2, r8
 800cf72:	4631      	mov	r1, r6
 800cf74:	4628      	mov	r0, r5
 800cf76:	47b8      	blx	r7
 800cf78:	3001      	adds	r0, #1
 800cf7a:	f43f ae78 	beq.w	800cc6e <_printf_float+0xb6>
 800cf7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf82:	4631      	mov	r1, r6
 800cf84:	4628      	mov	r0, r5
 800cf86:	47b8      	blx	r7
 800cf88:	3001      	adds	r0, #1
 800cf8a:	f43f ae70 	beq.w	800cc6e <_printf_float+0xb6>
 800cf8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf92:	2200      	movs	r2, #0
 800cf94:	2300      	movs	r3, #0
 800cf96:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf9a:	f7f3 fd9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf9e:	b9c0      	cbnz	r0, 800cfd2 <_printf_float+0x41a>
 800cfa0:	4653      	mov	r3, sl
 800cfa2:	f108 0201 	add.w	r2, r8, #1
 800cfa6:	4631      	mov	r1, r6
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	47b8      	blx	r7
 800cfac:	3001      	adds	r0, #1
 800cfae:	d10c      	bne.n	800cfca <_printf_float+0x412>
 800cfb0:	e65d      	b.n	800cc6e <_printf_float+0xb6>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	465a      	mov	r2, fp
 800cfb6:	4631      	mov	r1, r6
 800cfb8:	4628      	mov	r0, r5
 800cfba:	47b8      	blx	r7
 800cfbc:	3001      	adds	r0, #1
 800cfbe:	f43f ae56 	beq.w	800cc6e <_printf_float+0xb6>
 800cfc2:	f108 0801 	add.w	r8, r8, #1
 800cfc6:	45d0      	cmp	r8, sl
 800cfc8:	dbf3      	blt.n	800cfb2 <_printf_float+0x3fa>
 800cfca:	464b      	mov	r3, r9
 800cfcc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cfd0:	e6df      	b.n	800cd92 <_printf_float+0x1da>
 800cfd2:	f04f 0800 	mov.w	r8, #0
 800cfd6:	f104 0b1a 	add.w	fp, r4, #26
 800cfda:	e7f4      	b.n	800cfc6 <_printf_float+0x40e>
 800cfdc:	2301      	movs	r3, #1
 800cfde:	4642      	mov	r2, r8
 800cfe0:	e7e1      	b.n	800cfa6 <_printf_float+0x3ee>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	464a      	mov	r2, r9
 800cfe6:	4631      	mov	r1, r6
 800cfe8:	4628      	mov	r0, r5
 800cfea:	47b8      	blx	r7
 800cfec:	3001      	adds	r0, #1
 800cfee:	f43f ae3e 	beq.w	800cc6e <_printf_float+0xb6>
 800cff2:	f108 0801 	add.w	r8, r8, #1
 800cff6:	68e3      	ldr	r3, [r4, #12]
 800cff8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cffa:	1a5b      	subs	r3, r3, r1
 800cffc:	4543      	cmp	r3, r8
 800cffe:	dcf0      	bgt.n	800cfe2 <_printf_float+0x42a>
 800d000:	e6fc      	b.n	800cdfc <_printf_float+0x244>
 800d002:	f04f 0800 	mov.w	r8, #0
 800d006:	f104 0919 	add.w	r9, r4, #25
 800d00a:	e7f4      	b.n	800cff6 <_printf_float+0x43e>

0800d00c <_printf_common>:
 800d00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d010:	4616      	mov	r6, r2
 800d012:	4698      	mov	r8, r3
 800d014:	688a      	ldr	r2, [r1, #8]
 800d016:	690b      	ldr	r3, [r1, #16]
 800d018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d01c:	4293      	cmp	r3, r2
 800d01e:	bfb8      	it	lt
 800d020:	4613      	movlt	r3, r2
 800d022:	6033      	str	r3, [r6, #0]
 800d024:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d028:	4607      	mov	r7, r0
 800d02a:	460c      	mov	r4, r1
 800d02c:	b10a      	cbz	r2, 800d032 <_printf_common+0x26>
 800d02e:	3301      	adds	r3, #1
 800d030:	6033      	str	r3, [r6, #0]
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	0699      	lsls	r1, r3, #26
 800d036:	bf42      	ittt	mi
 800d038:	6833      	ldrmi	r3, [r6, #0]
 800d03a:	3302      	addmi	r3, #2
 800d03c:	6033      	strmi	r3, [r6, #0]
 800d03e:	6825      	ldr	r5, [r4, #0]
 800d040:	f015 0506 	ands.w	r5, r5, #6
 800d044:	d106      	bne.n	800d054 <_printf_common+0x48>
 800d046:	f104 0a19 	add.w	sl, r4, #25
 800d04a:	68e3      	ldr	r3, [r4, #12]
 800d04c:	6832      	ldr	r2, [r6, #0]
 800d04e:	1a9b      	subs	r3, r3, r2
 800d050:	42ab      	cmp	r3, r5
 800d052:	dc26      	bgt.n	800d0a2 <_printf_common+0x96>
 800d054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d058:	6822      	ldr	r2, [r4, #0]
 800d05a:	3b00      	subs	r3, #0
 800d05c:	bf18      	it	ne
 800d05e:	2301      	movne	r3, #1
 800d060:	0692      	lsls	r2, r2, #26
 800d062:	d42b      	bmi.n	800d0bc <_printf_common+0xb0>
 800d064:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d068:	4641      	mov	r1, r8
 800d06a:	4638      	mov	r0, r7
 800d06c:	47c8      	blx	r9
 800d06e:	3001      	adds	r0, #1
 800d070:	d01e      	beq.n	800d0b0 <_printf_common+0xa4>
 800d072:	6823      	ldr	r3, [r4, #0]
 800d074:	6922      	ldr	r2, [r4, #16]
 800d076:	f003 0306 	and.w	r3, r3, #6
 800d07a:	2b04      	cmp	r3, #4
 800d07c:	bf02      	ittt	eq
 800d07e:	68e5      	ldreq	r5, [r4, #12]
 800d080:	6833      	ldreq	r3, [r6, #0]
 800d082:	1aed      	subeq	r5, r5, r3
 800d084:	68a3      	ldr	r3, [r4, #8]
 800d086:	bf0c      	ite	eq
 800d088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d08c:	2500      	movne	r5, #0
 800d08e:	4293      	cmp	r3, r2
 800d090:	bfc4      	itt	gt
 800d092:	1a9b      	subgt	r3, r3, r2
 800d094:	18ed      	addgt	r5, r5, r3
 800d096:	2600      	movs	r6, #0
 800d098:	341a      	adds	r4, #26
 800d09a:	42b5      	cmp	r5, r6
 800d09c:	d11a      	bne.n	800d0d4 <_printf_common+0xc8>
 800d09e:	2000      	movs	r0, #0
 800d0a0:	e008      	b.n	800d0b4 <_printf_common+0xa8>
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	4652      	mov	r2, sl
 800d0a6:	4641      	mov	r1, r8
 800d0a8:	4638      	mov	r0, r7
 800d0aa:	47c8      	blx	r9
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	d103      	bne.n	800d0b8 <_printf_common+0xac>
 800d0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b8:	3501      	adds	r5, #1
 800d0ba:	e7c6      	b.n	800d04a <_printf_common+0x3e>
 800d0bc:	18e1      	adds	r1, r4, r3
 800d0be:	1c5a      	adds	r2, r3, #1
 800d0c0:	2030      	movs	r0, #48	@ 0x30
 800d0c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d0c6:	4422      	add	r2, r4
 800d0c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d0cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d0d0:	3302      	adds	r3, #2
 800d0d2:	e7c7      	b.n	800d064 <_printf_common+0x58>
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	4622      	mov	r2, r4
 800d0d8:	4641      	mov	r1, r8
 800d0da:	4638      	mov	r0, r7
 800d0dc:	47c8      	blx	r9
 800d0de:	3001      	adds	r0, #1
 800d0e0:	d0e6      	beq.n	800d0b0 <_printf_common+0xa4>
 800d0e2:	3601      	adds	r6, #1
 800d0e4:	e7d9      	b.n	800d09a <_printf_common+0x8e>
	...

0800d0e8 <_printf_i>:
 800d0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0ec:	7e0f      	ldrb	r7, [r1, #24]
 800d0ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d0f0:	2f78      	cmp	r7, #120	@ 0x78
 800d0f2:	4691      	mov	r9, r2
 800d0f4:	4680      	mov	r8, r0
 800d0f6:	460c      	mov	r4, r1
 800d0f8:	469a      	mov	sl, r3
 800d0fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d0fe:	d807      	bhi.n	800d110 <_printf_i+0x28>
 800d100:	2f62      	cmp	r7, #98	@ 0x62
 800d102:	d80a      	bhi.n	800d11a <_printf_i+0x32>
 800d104:	2f00      	cmp	r7, #0
 800d106:	f000 80d2 	beq.w	800d2ae <_printf_i+0x1c6>
 800d10a:	2f58      	cmp	r7, #88	@ 0x58
 800d10c:	f000 80b9 	beq.w	800d282 <_printf_i+0x19a>
 800d110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d118:	e03a      	b.n	800d190 <_printf_i+0xa8>
 800d11a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d11e:	2b15      	cmp	r3, #21
 800d120:	d8f6      	bhi.n	800d110 <_printf_i+0x28>
 800d122:	a101      	add	r1, pc, #4	@ (adr r1, 800d128 <_printf_i+0x40>)
 800d124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d128:	0800d181 	.word	0x0800d181
 800d12c:	0800d195 	.word	0x0800d195
 800d130:	0800d111 	.word	0x0800d111
 800d134:	0800d111 	.word	0x0800d111
 800d138:	0800d111 	.word	0x0800d111
 800d13c:	0800d111 	.word	0x0800d111
 800d140:	0800d195 	.word	0x0800d195
 800d144:	0800d111 	.word	0x0800d111
 800d148:	0800d111 	.word	0x0800d111
 800d14c:	0800d111 	.word	0x0800d111
 800d150:	0800d111 	.word	0x0800d111
 800d154:	0800d295 	.word	0x0800d295
 800d158:	0800d1bf 	.word	0x0800d1bf
 800d15c:	0800d24f 	.word	0x0800d24f
 800d160:	0800d111 	.word	0x0800d111
 800d164:	0800d111 	.word	0x0800d111
 800d168:	0800d2b7 	.word	0x0800d2b7
 800d16c:	0800d111 	.word	0x0800d111
 800d170:	0800d1bf 	.word	0x0800d1bf
 800d174:	0800d111 	.word	0x0800d111
 800d178:	0800d111 	.word	0x0800d111
 800d17c:	0800d257 	.word	0x0800d257
 800d180:	6833      	ldr	r3, [r6, #0]
 800d182:	1d1a      	adds	r2, r3, #4
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	6032      	str	r2, [r6, #0]
 800d188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d18c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d190:	2301      	movs	r3, #1
 800d192:	e09d      	b.n	800d2d0 <_printf_i+0x1e8>
 800d194:	6833      	ldr	r3, [r6, #0]
 800d196:	6820      	ldr	r0, [r4, #0]
 800d198:	1d19      	adds	r1, r3, #4
 800d19a:	6031      	str	r1, [r6, #0]
 800d19c:	0606      	lsls	r6, r0, #24
 800d19e:	d501      	bpl.n	800d1a4 <_printf_i+0xbc>
 800d1a0:	681d      	ldr	r5, [r3, #0]
 800d1a2:	e003      	b.n	800d1ac <_printf_i+0xc4>
 800d1a4:	0645      	lsls	r5, r0, #25
 800d1a6:	d5fb      	bpl.n	800d1a0 <_printf_i+0xb8>
 800d1a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d1ac:	2d00      	cmp	r5, #0
 800d1ae:	da03      	bge.n	800d1b8 <_printf_i+0xd0>
 800d1b0:	232d      	movs	r3, #45	@ 0x2d
 800d1b2:	426d      	negs	r5, r5
 800d1b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1b8:	4859      	ldr	r0, [pc, #356]	@ (800d320 <_printf_i+0x238>)
 800d1ba:	230a      	movs	r3, #10
 800d1bc:	e011      	b.n	800d1e2 <_printf_i+0xfa>
 800d1be:	6821      	ldr	r1, [r4, #0]
 800d1c0:	6833      	ldr	r3, [r6, #0]
 800d1c2:	0608      	lsls	r0, r1, #24
 800d1c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d1c8:	d402      	bmi.n	800d1d0 <_printf_i+0xe8>
 800d1ca:	0649      	lsls	r1, r1, #25
 800d1cc:	bf48      	it	mi
 800d1ce:	b2ad      	uxthmi	r5, r5
 800d1d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d1d2:	4853      	ldr	r0, [pc, #332]	@ (800d320 <_printf_i+0x238>)
 800d1d4:	6033      	str	r3, [r6, #0]
 800d1d6:	bf14      	ite	ne
 800d1d8:	230a      	movne	r3, #10
 800d1da:	2308      	moveq	r3, #8
 800d1dc:	2100      	movs	r1, #0
 800d1de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d1e2:	6866      	ldr	r6, [r4, #4]
 800d1e4:	60a6      	str	r6, [r4, #8]
 800d1e6:	2e00      	cmp	r6, #0
 800d1e8:	bfa2      	ittt	ge
 800d1ea:	6821      	ldrge	r1, [r4, #0]
 800d1ec:	f021 0104 	bicge.w	r1, r1, #4
 800d1f0:	6021      	strge	r1, [r4, #0]
 800d1f2:	b90d      	cbnz	r5, 800d1f8 <_printf_i+0x110>
 800d1f4:	2e00      	cmp	r6, #0
 800d1f6:	d04b      	beq.n	800d290 <_printf_i+0x1a8>
 800d1f8:	4616      	mov	r6, r2
 800d1fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800d1fe:	fb03 5711 	mls	r7, r3, r1, r5
 800d202:	5dc7      	ldrb	r7, [r0, r7]
 800d204:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d208:	462f      	mov	r7, r5
 800d20a:	42bb      	cmp	r3, r7
 800d20c:	460d      	mov	r5, r1
 800d20e:	d9f4      	bls.n	800d1fa <_printf_i+0x112>
 800d210:	2b08      	cmp	r3, #8
 800d212:	d10b      	bne.n	800d22c <_printf_i+0x144>
 800d214:	6823      	ldr	r3, [r4, #0]
 800d216:	07df      	lsls	r7, r3, #31
 800d218:	d508      	bpl.n	800d22c <_printf_i+0x144>
 800d21a:	6923      	ldr	r3, [r4, #16]
 800d21c:	6861      	ldr	r1, [r4, #4]
 800d21e:	4299      	cmp	r1, r3
 800d220:	bfde      	ittt	le
 800d222:	2330      	movle	r3, #48	@ 0x30
 800d224:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d228:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d22c:	1b92      	subs	r2, r2, r6
 800d22e:	6122      	str	r2, [r4, #16]
 800d230:	f8cd a000 	str.w	sl, [sp]
 800d234:	464b      	mov	r3, r9
 800d236:	aa03      	add	r2, sp, #12
 800d238:	4621      	mov	r1, r4
 800d23a:	4640      	mov	r0, r8
 800d23c:	f7ff fee6 	bl	800d00c <_printf_common>
 800d240:	3001      	adds	r0, #1
 800d242:	d14a      	bne.n	800d2da <_printf_i+0x1f2>
 800d244:	f04f 30ff 	mov.w	r0, #4294967295
 800d248:	b004      	add	sp, #16
 800d24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d24e:	6823      	ldr	r3, [r4, #0]
 800d250:	f043 0320 	orr.w	r3, r3, #32
 800d254:	6023      	str	r3, [r4, #0]
 800d256:	4833      	ldr	r0, [pc, #204]	@ (800d324 <_printf_i+0x23c>)
 800d258:	2778      	movs	r7, #120	@ 0x78
 800d25a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d25e:	6823      	ldr	r3, [r4, #0]
 800d260:	6831      	ldr	r1, [r6, #0]
 800d262:	061f      	lsls	r7, r3, #24
 800d264:	f851 5b04 	ldr.w	r5, [r1], #4
 800d268:	d402      	bmi.n	800d270 <_printf_i+0x188>
 800d26a:	065f      	lsls	r7, r3, #25
 800d26c:	bf48      	it	mi
 800d26e:	b2ad      	uxthmi	r5, r5
 800d270:	6031      	str	r1, [r6, #0]
 800d272:	07d9      	lsls	r1, r3, #31
 800d274:	bf44      	itt	mi
 800d276:	f043 0320 	orrmi.w	r3, r3, #32
 800d27a:	6023      	strmi	r3, [r4, #0]
 800d27c:	b11d      	cbz	r5, 800d286 <_printf_i+0x19e>
 800d27e:	2310      	movs	r3, #16
 800d280:	e7ac      	b.n	800d1dc <_printf_i+0xf4>
 800d282:	4827      	ldr	r0, [pc, #156]	@ (800d320 <_printf_i+0x238>)
 800d284:	e7e9      	b.n	800d25a <_printf_i+0x172>
 800d286:	6823      	ldr	r3, [r4, #0]
 800d288:	f023 0320 	bic.w	r3, r3, #32
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	e7f6      	b.n	800d27e <_printf_i+0x196>
 800d290:	4616      	mov	r6, r2
 800d292:	e7bd      	b.n	800d210 <_printf_i+0x128>
 800d294:	6833      	ldr	r3, [r6, #0]
 800d296:	6825      	ldr	r5, [r4, #0]
 800d298:	6961      	ldr	r1, [r4, #20]
 800d29a:	1d18      	adds	r0, r3, #4
 800d29c:	6030      	str	r0, [r6, #0]
 800d29e:	062e      	lsls	r6, r5, #24
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	d501      	bpl.n	800d2a8 <_printf_i+0x1c0>
 800d2a4:	6019      	str	r1, [r3, #0]
 800d2a6:	e002      	b.n	800d2ae <_printf_i+0x1c6>
 800d2a8:	0668      	lsls	r0, r5, #25
 800d2aa:	d5fb      	bpl.n	800d2a4 <_printf_i+0x1bc>
 800d2ac:	8019      	strh	r1, [r3, #0]
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	6123      	str	r3, [r4, #16]
 800d2b2:	4616      	mov	r6, r2
 800d2b4:	e7bc      	b.n	800d230 <_printf_i+0x148>
 800d2b6:	6833      	ldr	r3, [r6, #0]
 800d2b8:	1d1a      	adds	r2, r3, #4
 800d2ba:	6032      	str	r2, [r6, #0]
 800d2bc:	681e      	ldr	r6, [r3, #0]
 800d2be:	6862      	ldr	r2, [r4, #4]
 800d2c0:	2100      	movs	r1, #0
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	f7f2 ff8c 	bl	80001e0 <memchr>
 800d2c8:	b108      	cbz	r0, 800d2ce <_printf_i+0x1e6>
 800d2ca:	1b80      	subs	r0, r0, r6
 800d2cc:	6060      	str	r0, [r4, #4]
 800d2ce:	6863      	ldr	r3, [r4, #4]
 800d2d0:	6123      	str	r3, [r4, #16]
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2d8:	e7aa      	b.n	800d230 <_printf_i+0x148>
 800d2da:	6923      	ldr	r3, [r4, #16]
 800d2dc:	4632      	mov	r2, r6
 800d2de:	4649      	mov	r1, r9
 800d2e0:	4640      	mov	r0, r8
 800d2e2:	47d0      	blx	sl
 800d2e4:	3001      	adds	r0, #1
 800d2e6:	d0ad      	beq.n	800d244 <_printf_i+0x15c>
 800d2e8:	6823      	ldr	r3, [r4, #0]
 800d2ea:	079b      	lsls	r3, r3, #30
 800d2ec:	d413      	bmi.n	800d316 <_printf_i+0x22e>
 800d2ee:	68e0      	ldr	r0, [r4, #12]
 800d2f0:	9b03      	ldr	r3, [sp, #12]
 800d2f2:	4298      	cmp	r0, r3
 800d2f4:	bfb8      	it	lt
 800d2f6:	4618      	movlt	r0, r3
 800d2f8:	e7a6      	b.n	800d248 <_printf_i+0x160>
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	4632      	mov	r2, r6
 800d2fe:	4649      	mov	r1, r9
 800d300:	4640      	mov	r0, r8
 800d302:	47d0      	blx	sl
 800d304:	3001      	adds	r0, #1
 800d306:	d09d      	beq.n	800d244 <_printf_i+0x15c>
 800d308:	3501      	adds	r5, #1
 800d30a:	68e3      	ldr	r3, [r4, #12]
 800d30c:	9903      	ldr	r1, [sp, #12]
 800d30e:	1a5b      	subs	r3, r3, r1
 800d310:	42ab      	cmp	r3, r5
 800d312:	dcf2      	bgt.n	800d2fa <_printf_i+0x212>
 800d314:	e7eb      	b.n	800d2ee <_printf_i+0x206>
 800d316:	2500      	movs	r5, #0
 800d318:	f104 0619 	add.w	r6, r4, #25
 800d31c:	e7f5      	b.n	800d30a <_printf_i+0x222>
 800d31e:	bf00      	nop
 800d320:	08011c30 	.word	0x08011c30
 800d324:	08011c41 	.word	0x08011c41

0800d328 <std>:
 800d328:	2300      	movs	r3, #0
 800d32a:	b510      	push	{r4, lr}
 800d32c:	4604      	mov	r4, r0
 800d32e:	e9c0 3300 	strd	r3, r3, [r0]
 800d332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d336:	6083      	str	r3, [r0, #8]
 800d338:	8181      	strh	r1, [r0, #12]
 800d33a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d33c:	81c2      	strh	r2, [r0, #14]
 800d33e:	6183      	str	r3, [r0, #24]
 800d340:	4619      	mov	r1, r3
 800d342:	2208      	movs	r2, #8
 800d344:	305c      	adds	r0, #92	@ 0x5c
 800d346:	f000 fa09 	bl	800d75c <memset>
 800d34a:	4b0d      	ldr	r3, [pc, #52]	@ (800d380 <std+0x58>)
 800d34c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d34e:	4b0d      	ldr	r3, [pc, #52]	@ (800d384 <std+0x5c>)
 800d350:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d352:	4b0d      	ldr	r3, [pc, #52]	@ (800d388 <std+0x60>)
 800d354:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d356:	4b0d      	ldr	r3, [pc, #52]	@ (800d38c <std+0x64>)
 800d358:	6323      	str	r3, [r4, #48]	@ 0x30
 800d35a:	4b0d      	ldr	r3, [pc, #52]	@ (800d390 <std+0x68>)
 800d35c:	6224      	str	r4, [r4, #32]
 800d35e:	429c      	cmp	r4, r3
 800d360:	d006      	beq.n	800d370 <std+0x48>
 800d362:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d366:	4294      	cmp	r4, r2
 800d368:	d002      	beq.n	800d370 <std+0x48>
 800d36a:	33d0      	adds	r3, #208	@ 0xd0
 800d36c:	429c      	cmp	r4, r3
 800d36e:	d105      	bne.n	800d37c <std+0x54>
 800d370:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d378:	f000 ba6c 	b.w	800d854 <__retarget_lock_init_recursive>
 800d37c:	bd10      	pop	{r4, pc}
 800d37e:	bf00      	nop
 800d380:	0800d58d 	.word	0x0800d58d
 800d384:	0800d5af 	.word	0x0800d5af
 800d388:	0800d5e7 	.word	0x0800d5e7
 800d38c:	0800d60b 	.word	0x0800d60b
 800d390:	20004538 	.word	0x20004538

0800d394 <stdio_exit_handler>:
 800d394:	4a02      	ldr	r2, [pc, #8]	@ (800d3a0 <stdio_exit_handler+0xc>)
 800d396:	4903      	ldr	r1, [pc, #12]	@ (800d3a4 <stdio_exit_handler+0x10>)
 800d398:	4803      	ldr	r0, [pc, #12]	@ (800d3a8 <stdio_exit_handler+0x14>)
 800d39a:	f000 b869 	b.w	800d470 <_fwalk_sglue>
 800d39e:	bf00      	nop
 800d3a0:	20000058 	.word	0x20000058
 800d3a4:	0800f1a1 	.word	0x0800f1a1
 800d3a8:	20000068 	.word	0x20000068

0800d3ac <cleanup_stdio>:
 800d3ac:	6841      	ldr	r1, [r0, #4]
 800d3ae:	4b0c      	ldr	r3, [pc, #48]	@ (800d3e0 <cleanup_stdio+0x34>)
 800d3b0:	4299      	cmp	r1, r3
 800d3b2:	b510      	push	{r4, lr}
 800d3b4:	4604      	mov	r4, r0
 800d3b6:	d001      	beq.n	800d3bc <cleanup_stdio+0x10>
 800d3b8:	f001 fef2 	bl	800f1a0 <_fflush_r>
 800d3bc:	68a1      	ldr	r1, [r4, #8]
 800d3be:	4b09      	ldr	r3, [pc, #36]	@ (800d3e4 <cleanup_stdio+0x38>)
 800d3c0:	4299      	cmp	r1, r3
 800d3c2:	d002      	beq.n	800d3ca <cleanup_stdio+0x1e>
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	f001 feeb 	bl	800f1a0 <_fflush_r>
 800d3ca:	68e1      	ldr	r1, [r4, #12]
 800d3cc:	4b06      	ldr	r3, [pc, #24]	@ (800d3e8 <cleanup_stdio+0x3c>)
 800d3ce:	4299      	cmp	r1, r3
 800d3d0:	d004      	beq.n	800d3dc <cleanup_stdio+0x30>
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3d8:	f001 bee2 	b.w	800f1a0 <_fflush_r>
 800d3dc:	bd10      	pop	{r4, pc}
 800d3de:	bf00      	nop
 800d3e0:	20004538 	.word	0x20004538
 800d3e4:	200045a0 	.word	0x200045a0
 800d3e8:	20004608 	.word	0x20004608

0800d3ec <global_stdio_init.part.0>:
 800d3ec:	b510      	push	{r4, lr}
 800d3ee:	4b0b      	ldr	r3, [pc, #44]	@ (800d41c <global_stdio_init.part.0+0x30>)
 800d3f0:	4c0b      	ldr	r4, [pc, #44]	@ (800d420 <global_stdio_init.part.0+0x34>)
 800d3f2:	4a0c      	ldr	r2, [pc, #48]	@ (800d424 <global_stdio_init.part.0+0x38>)
 800d3f4:	601a      	str	r2, [r3, #0]
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	2104      	movs	r1, #4
 800d3fc:	f7ff ff94 	bl	800d328 <std>
 800d400:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d404:	2201      	movs	r2, #1
 800d406:	2109      	movs	r1, #9
 800d408:	f7ff ff8e 	bl	800d328 <std>
 800d40c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d410:	2202      	movs	r2, #2
 800d412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d416:	2112      	movs	r1, #18
 800d418:	f7ff bf86 	b.w	800d328 <std>
 800d41c:	20004670 	.word	0x20004670
 800d420:	20004538 	.word	0x20004538
 800d424:	0800d395 	.word	0x0800d395

0800d428 <__sfp_lock_acquire>:
 800d428:	4801      	ldr	r0, [pc, #4]	@ (800d430 <__sfp_lock_acquire+0x8>)
 800d42a:	f000 ba14 	b.w	800d856 <__retarget_lock_acquire_recursive>
 800d42e:	bf00      	nop
 800d430:	20004679 	.word	0x20004679

0800d434 <__sfp_lock_release>:
 800d434:	4801      	ldr	r0, [pc, #4]	@ (800d43c <__sfp_lock_release+0x8>)
 800d436:	f000 ba0f 	b.w	800d858 <__retarget_lock_release_recursive>
 800d43a:	bf00      	nop
 800d43c:	20004679 	.word	0x20004679

0800d440 <__sinit>:
 800d440:	b510      	push	{r4, lr}
 800d442:	4604      	mov	r4, r0
 800d444:	f7ff fff0 	bl	800d428 <__sfp_lock_acquire>
 800d448:	6a23      	ldr	r3, [r4, #32]
 800d44a:	b11b      	cbz	r3, 800d454 <__sinit+0x14>
 800d44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d450:	f7ff bff0 	b.w	800d434 <__sfp_lock_release>
 800d454:	4b04      	ldr	r3, [pc, #16]	@ (800d468 <__sinit+0x28>)
 800d456:	6223      	str	r3, [r4, #32]
 800d458:	4b04      	ldr	r3, [pc, #16]	@ (800d46c <__sinit+0x2c>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d1f5      	bne.n	800d44c <__sinit+0xc>
 800d460:	f7ff ffc4 	bl	800d3ec <global_stdio_init.part.0>
 800d464:	e7f2      	b.n	800d44c <__sinit+0xc>
 800d466:	bf00      	nop
 800d468:	0800d3ad 	.word	0x0800d3ad
 800d46c:	20004670 	.word	0x20004670

0800d470 <_fwalk_sglue>:
 800d470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d474:	4607      	mov	r7, r0
 800d476:	4688      	mov	r8, r1
 800d478:	4614      	mov	r4, r2
 800d47a:	2600      	movs	r6, #0
 800d47c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d480:	f1b9 0901 	subs.w	r9, r9, #1
 800d484:	d505      	bpl.n	800d492 <_fwalk_sglue+0x22>
 800d486:	6824      	ldr	r4, [r4, #0]
 800d488:	2c00      	cmp	r4, #0
 800d48a:	d1f7      	bne.n	800d47c <_fwalk_sglue+0xc>
 800d48c:	4630      	mov	r0, r6
 800d48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d492:	89ab      	ldrh	r3, [r5, #12]
 800d494:	2b01      	cmp	r3, #1
 800d496:	d907      	bls.n	800d4a8 <_fwalk_sglue+0x38>
 800d498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d49c:	3301      	adds	r3, #1
 800d49e:	d003      	beq.n	800d4a8 <_fwalk_sglue+0x38>
 800d4a0:	4629      	mov	r1, r5
 800d4a2:	4638      	mov	r0, r7
 800d4a4:	47c0      	blx	r8
 800d4a6:	4306      	orrs	r6, r0
 800d4a8:	3568      	adds	r5, #104	@ 0x68
 800d4aa:	e7e9      	b.n	800d480 <_fwalk_sglue+0x10>

0800d4ac <iprintf>:
 800d4ac:	b40f      	push	{r0, r1, r2, r3}
 800d4ae:	b507      	push	{r0, r1, r2, lr}
 800d4b0:	4906      	ldr	r1, [pc, #24]	@ (800d4cc <iprintf+0x20>)
 800d4b2:	ab04      	add	r3, sp, #16
 800d4b4:	6808      	ldr	r0, [r1, #0]
 800d4b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4ba:	6881      	ldr	r1, [r0, #8]
 800d4bc:	9301      	str	r3, [sp, #4]
 800d4be:	f001 fcd3 	bl	800ee68 <_vfiprintf_r>
 800d4c2:	b003      	add	sp, #12
 800d4c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4c8:	b004      	add	sp, #16
 800d4ca:	4770      	bx	lr
 800d4cc:	20000064 	.word	0x20000064

0800d4d0 <_puts_r>:
 800d4d0:	6a03      	ldr	r3, [r0, #32]
 800d4d2:	b570      	push	{r4, r5, r6, lr}
 800d4d4:	6884      	ldr	r4, [r0, #8]
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	460e      	mov	r6, r1
 800d4da:	b90b      	cbnz	r3, 800d4e0 <_puts_r+0x10>
 800d4dc:	f7ff ffb0 	bl	800d440 <__sinit>
 800d4e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d4e2:	07db      	lsls	r3, r3, #31
 800d4e4:	d405      	bmi.n	800d4f2 <_puts_r+0x22>
 800d4e6:	89a3      	ldrh	r3, [r4, #12]
 800d4e8:	0598      	lsls	r0, r3, #22
 800d4ea:	d402      	bmi.n	800d4f2 <_puts_r+0x22>
 800d4ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4ee:	f000 f9b2 	bl	800d856 <__retarget_lock_acquire_recursive>
 800d4f2:	89a3      	ldrh	r3, [r4, #12]
 800d4f4:	0719      	lsls	r1, r3, #28
 800d4f6:	d502      	bpl.n	800d4fe <_puts_r+0x2e>
 800d4f8:	6923      	ldr	r3, [r4, #16]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d135      	bne.n	800d56a <_puts_r+0x9a>
 800d4fe:	4621      	mov	r1, r4
 800d500:	4628      	mov	r0, r5
 800d502:	f000 f8c5 	bl	800d690 <__swsetup_r>
 800d506:	b380      	cbz	r0, 800d56a <_puts_r+0x9a>
 800d508:	f04f 35ff 	mov.w	r5, #4294967295
 800d50c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d50e:	07da      	lsls	r2, r3, #31
 800d510:	d405      	bmi.n	800d51e <_puts_r+0x4e>
 800d512:	89a3      	ldrh	r3, [r4, #12]
 800d514:	059b      	lsls	r3, r3, #22
 800d516:	d402      	bmi.n	800d51e <_puts_r+0x4e>
 800d518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d51a:	f000 f99d 	bl	800d858 <__retarget_lock_release_recursive>
 800d51e:	4628      	mov	r0, r5
 800d520:	bd70      	pop	{r4, r5, r6, pc}
 800d522:	2b00      	cmp	r3, #0
 800d524:	da04      	bge.n	800d530 <_puts_r+0x60>
 800d526:	69a2      	ldr	r2, [r4, #24]
 800d528:	429a      	cmp	r2, r3
 800d52a:	dc17      	bgt.n	800d55c <_puts_r+0x8c>
 800d52c:	290a      	cmp	r1, #10
 800d52e:	d015      	beq.n	800d55c <_puts_r+0x8c>
 800d530:	6823      	ldr	r3, [r4, #0]
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	6022      	str	r2, [r4, #0]
 800d536:	7019      	strb	r1, [r3, #0]
 800d538:	68a3      	ldr	r3, [r4, #8]
 800d53a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d53e:	3b01      	subs	r3, #1
 800d540:	60a3      	str	r3, [r4, #8]
 800d542:	2900      	cmp	r1, #0
 800d544:	d1ed      	bne.n	800d522 <_puts_r+0x52>
 800d546:	2b00      	cmp	r3, #0
 800d548:	da11      	bge.n	800d56e <_puts_r+0x9e>
 800d54a:	4622      	mov	r2, r4
 800d54c:	210a      	movs	r1, #10
 800d54e:	4628      	mov	r0, r5
 800d550:	f000 f85f 	bl	800d612 <__swbuf_r>
 800d554:	3001      	adds	r0, #1
 800d556:	d0d7      	beq.n	800d508 <_puts_r+0x38>
 800d558:	250a      	movs	r5, #10
 800d55a:	e7d7      	b.n	800d50c <_puts_r+0x3c>
 800d55c:	4622      	mov	r2, r4
 800d55e:	4628      	mov	r0, r5
 800d560:	f000 f857 	bl	800d612 <__swbuf_r>
 800d564:	3001      	adds	r0, #1
 800d566:	d1e7      	bne.n	800d538 <_puts_r+0x68>
 800d568:	e7ce      	b.n	800d508 <_puts_r+0x38>
 800d56a:	3e01      	subs	r6, #1
 800d56c:	e7e4      	b.n	800d538 <_puts_r+0x68>
 800d56e:	6823      	ldr	r3, [r4, #0]
 800d570:	1c5a      	adds	r2, r3, #1
 800d572:	6022      	str	r2, [r4, #0]
 800d574:	220a      	movs	r2, #10
 800d576:	701a      	strb	r2, [r3, #0]
 800d578:	e7ee      	b.n	800d558 <_puts_r+0x88>
	...

0800d57c <puts>:
 800d57c:	4b02      	ldr	r3, [pc, #8]	@ (800d588 <puts+0xc>)
 800d57e:	4601      	mov	r1, r0
 800d580:	6818      	ldr	r0, [r3, #0]
 800d582:	f7ff bfa5 	b.w	800d4d0 <_puts_r>
 800d586:	bf00      	nop
 800d588:	20000064 	.word	0x20000064

0800d58c <__sread>:
 800d58c:	b510      	push	{r4, lr}
 800d58e:	460c      	mov	r4, r1
 800d590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d594:	f000 f910 	bl	800d7b8 <_read_r>
 800d598:	2800      	cmp	r0, #0
 800d59a:	bfab      	itete	ge
 800d59c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d59e:	89a3      	ldrhlt	r3, [r4, #12]
 800d5a0:	181b      	addge	r3, r3, r0
 800d5a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d5a6:	bfac      	ite	ge
 800d5a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d5aa:	81a3      	strhlt	r3, [r4, #12]
 800d5ac:	bd10      	pop	{r4, pc}

0800d5ae <__swrite>:
 800d5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b2:	461f      	mov	r7, r3
 800d5b4:	898b      	ldrh	r3, [r1, #12]
 800d5b6:	05db      	lsls	r3, r3, #23
 800d5b8:	4605      	mov	r5, r0
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	4616      	mov	r6, r2
 800d5be:	d505      	bpl.n	800d5cc <__swrite+0x1e>
 800d5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5c4:	2302      	movs	r3, #2
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f000 f8e4 	bl	800d794 <_lseek_r>
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d5d6:	81a3      	strh	r3, [r4, #12]
 800d5d8:	4632      	mov	r2, r6
 800d5da:	463b      	mov	r3, r7
 800d5dc:	4628      	mov	r0, r5
 800d5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e2:	f000 b8fb 	b.w	800d7dc <_write_r>

0800d5e6 <__sseek>:
 800d5e6:	b510      	push	{r4, lr}
 800d5e8:	460c      	mov	r4, r1
 800d5ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ee:	f000 f8d1 	bl	800d794 <_lseek_r>
 800d5f2:	1c43      	adds	r3, r0, #1
 800d5f4:	89a3      	ldrh	r3, [r4, #12]
 800d5f6:	bf15      	itete	ne
 800d5f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d5fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d5fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d602:	81a3      	strheq	r3, [r4, #12]
 800d604:	bf18      	it	ne
 800d606:	81a3      	strhne	r3, [r4, #12]
 800d608:	bd10      	pop	{r4, pc}

0800d60a <__sclose>:
 800d60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d60e:	f000 b8b1 	b.w	800d774 <_close_r>

0800d612 <__swbuf_r>:
 800d612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d614:	460e      	mov	r6, r1
 800d616:	4614      	mov	r4, r2
 800d618:	4605      	mov	r5, r0
 800d61a:	b118      	cbz	r0, 800d624 <__swbuf_r+0x12>
 800d61c:	6a03      	ldr	r3, [r0, #32]
 800d61e:	b90b      	cbnz	r3, 800d624 <__swbuf_r+0x12>
 800d620:	f7ff ff0e 	bl	800d440 <__sinit>
 800d624:	69a3      	ldr	r3, [r4, #24]
 800d626:	60a3      	str	r3, [r4, #8]
 800d628:	89a3      	ldrh	r3, [r4, #12]
 800d62a:	071a      	lsls	r2, r3, #28
 800d62c:	d501      	bpl.n	800d632 <__swbuf_r+0x20>
 800d62e:	6923      	ldr	r3, [r4, #16]
 800d630:	b943      	cbnz	r3, 800d644 <__swbuf_r+0x32>
 800d632:	4621      	mov	r1, r4
 800d634:	4628      	mov	r0, r5
 800d636:	f000 f82b 	bl	800d690 <__swsetup_r>
 800d63a:	b118      	cbz	r0, 800d644 <__swbuf_r+0x32>
 800d63c:	f04f 37ff 	mov.w	r7, #4294967295
 800d640:	4638      	mov	r0, r7
 800d642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d644:	6823      	ldr	r3, [r4, #0]
 800d646:	6922      	ldr	r2, [r4, #16]
 800d648:	1a98      	subs	r0, r3, r2
 800d64a:	6963      	ldr	r3, [r4, #20]
 800d64c:	b2f6      	uxtb	r6, r6
 800d64e:	4283      	cmp	r3, r0
 800d650:	4637      	mov	r7, r6
 800d652:	dc05      	bgt.n	800d660 <__swbuf_r+0x4e>
 800d654:	4621      	mov	r1, r4
 800d656:	4628      	mov	r0, r5
 800d658:	f001 fda2 	bl	800f1a0 <_fflush_r>
 800d65c:	2800      	cmp	r0, #0
 800d65e:	d1ed      	bne.n	800d63c <__swbuf_r+0x2a>
 800d660:	68a3      	ldr	r3, [r4, #8]
 800d662:	3b01      	subs	r3, #1
 800d664:	60a3      	str	r3, [r4, #8]
 800d666:	6823      	ldr	r3, [r4, #0]
 800d668:	1c5a      	adds	r2, r3, #1
 800d66a:	6022      	str	r2, [r4, #0]
 800d66c:	701e      	strb	r6, [r3, #0]
 800d66e:	6962      	ldr	r2, [r4, #20]
 800d670:	1c43      	adds	r3, r0, #1
 800d672:	429a      	cmp	r2, r3
 800d674:	d004      	beq.n	800d680 <__swbuf_r+0x6e>
 800d676:	89a3      	ldrh	r3, [r4, #12]
 800d678:	07db      	lsls	r3, r3, #31
 800d67a:	d5e1      	bpl.n	800d640 <__swbuf_r+0x2e>
 800d67c:	2e0a      	cmp	r6, #10
 800d67e:	d1df      	bne.n	800d640 <__swbuf_r+0x2e>
 800d680:	4621      	mov	r1, r4
 800d682:	4628      	mov	r0, r5
 800d684:	f001 fd8c 	bl	800f1a0 <_fflush_r>
 800d688:	2800      	cmp	r0, #0
 800d68a:	d0d9      	beq.n	800d640 <__swbuf_r+0x2e>
 800d68c:	e7d6      	b.n	800d63c <__swbuf_r+0x2a>
	...

0800d690 <__swsetup_r>:
 800d690:	b538      	push	{r3, r4, r5, lr}
 800d692:	4b29      	ldr	r3, [pc, #164]	@ (800d738 <__swsetup_r+0xa8>)
 800d694:	4605      	mov	r5, r0
 800d696:	6818      	ldr	r0, [r3, #0]
 800d698:	460c      	mov	r4, r1
 800d69a:	b118      	cbz	r0, 800d6a4 <__swsetup_r+0x14>
 800d69c:	6a03      	ldr	r3, [r0, #32]
 800d69e:	b90b      	cbnz	r3, 800d6a4 <__swsetup_r+0x14>
 800d6a0:	f7ff fece 	bl	800d440 <__sinit>
 800d6a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6a8:	0719      	lsls	r1, r3, #28
 800d6aa:	d422      	bmi.n	800d6f2 <__swsetup_r+0x62>
 800d6ac:	06da      	lsls	r2, r3, #27
 800d6ae:	d407      	bmi.n	800d6c0 <__swsetup_r+0x30>
 800d6b0:	2209      	movs	r2, #9
 800d6b2:	602a      	str	r2, [r5, #0]
 800d6b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6b8:	81a3      	strh	r3, [r4, #12]
 800d6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d6be:	e033      	b.n	800d728 <__swsetup_r+0x98>
 800d6c0:	0758      	lsls	r0, r3, #29
 800d6c2:	d512      	bpl.n	800d6ea <__swsetup_r+0x5a>
 800d6c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6c6:	b141      	cbz	r1, 800d6da <__swsetup_r+0x4a>
 800d6c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6cc:	4299      	cmp	r1, r3
 800d6ce:	d002      	beq.n	800d6d6 <__swsetup_r+0x46>
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	f000 ff1d 	bl	800e510 <_free_r>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6da:	89a3      	ldrh	r3, [r4, #12]
 800d6dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d6e0:	81a3      	strh	r3, [r4, #12]
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	6063      	str	r3, [r4, #4]
 800d6e6:	6923      	ldr	r3, [r4, #16]
 800d6e8:	6023      	str	r3, [r4, #0]
 800d6ea:	89a3      	ldrh	r3, [r4, #12]
 800d6ec:	f043 0308 	orr.w	r3, r3, #8
 800d6f0:	81a3      	strh	r3, [r4, #12]
 800d6f2:	6923      	ldr	r3, [r4, #16]
 800d6f4:	b94b      	cbnz	r3, 800d70a <__swsetup_r+0x7a>
 800d6f6:	89a3      	ldrh	r3, [r4, #12]
 800d6f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d6fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d700:	d003      	beq.n	800d70a <__swsetup_r+0x7a>
 800d702:	4621      	mov	r1, r4
 800d704:	4628      	mov	r0, r5
 800d706:	f001 fd99 	bl	800f23c <__smakebuf_r>
 800d70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d70e:	f013 0201 	ands.w	r2, r3, #1
 800d712:	d00a      	beq.n	800d72a <__swsetup_r+0x9a>
 800d714:	2200      	movs	r2, #0
 800d716:	60a2      	str	r2, [r4, #8]
 800d718:	6962      	ldr	r2, [r4, #20]
 800d71a:	4252      	negs	r2, r2
 800d71c:	61a2      	str	r2, [r4, #24]
 800d71e:	6922      	ldr	r2, [r4, #16]
 800d720:	b942      	cbnz	r2, 800d734 <__swsetup_r+0xa4>
 800d722:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d726:	d1c5      	bne.n	800d6b4 <__swsetup_r+0x24>
 800d728:	bd38      	pop	{r3, r4, r5, pc}
 800d72a:	0799      	lsls	r1, r3, #30
 800d72c:	bf58      	it	pl
 800d72e:	6962      	ldrpl	r2, [r4, #20]
 800d730:	60a2      	str	r2, [r4, #8]
 800d732:	e7f4      	b.n	800d71e <__swsetup_r+0x8e>
 800d734:	2000      	movs	r0, #0
 800d736:	e7f7      	b.n	800d728 <__swsetup_r+0x98>
 800d738:	20000064 	.word	0x20000064

0800d73c <memcmp>:
 800d73c:	b510      	push	{r4, lr}
 800d73e:	3901      	subs	r1, #1
 800d740:	4402      	add	r2, r0
 800d742:	4290      	cmp	r0, r2
 800d744:	d101      	bne.n	800d74a <memcmp+0xe>
 800d746:	2000      	movs	r0, #0
 800d748:	e005      	b.n	800d756 <memcmp+0x1a>
 800d74a:	7803      	ldrb	r3, [r0, #0]
 800d74c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d750:	42a3      	cmp	r3, r4
 800d752:	d001      	beq.n	800d758 <memcmp+0x1c>
 800d754:	1b18      	subs	r0, r3, r4
 800d756:	bd10      	pop	{r4, pc}
 800d758:	3001      	adds	r0, #1
 800d75a:	e7f2      	b.n	800d742 <memcmp+0x6>

0800d75c <memset>:
 800d75c:	4402      	add	r2, r0
 800d75e:	4603      	mov	r3, r0
 800d760:	4293      	cmp	r3, r2
 800d762:	d100      	bne.n	800d766 <memset+0xa>
 800d764:	4770      	bx	lr
 800d766:	f803 1b01 	strb.w	r1, [r3], #1
 800d76a:	e7f9      	b.n	800d760 <memset+0x4>

0800d76c <_localeconv_r>:
 800d76c:	4800      	ldr	r0, [pc, #0]	@ (800d770 <_localeconv_r+0x4>)
 800d76e:	4770      	bx	lr
 800d770:	200001a4 	.word	0x200001a4

0800d774 <_close_r>:
 800d774:	b538      	push	{r3, r4, r5, lr}
 800d776:	4d06      	ldr	r5, [pc, #24]	@ (800d790 <_close_r+0x1c>)
 800d778:	2300      	movs	r3, #0
 800d77a:	4604      	mov	r4, r0
 800d77c:	4608      	mov	r0, r1
 800d77e:	602b      	str	r3, [r5, #0]
 800d780:	f7f6 f97a 	bl	8003a78 <_close>
 800d784:	1c43      	adds	r3, r0, #1
 800d786:	d102      	bne.n	800d78e <_close_r+0x1a>
 800d788:	682b      	ldr	r3, [r5, #0]
 800d78a:	b103      	cbz	r3, 800d78e <_close_r+0x1a>
 800d78c:	6023      	str	r3, [r4, #0]
 800d78e:	bd38      	pop	{r3, r4, r5, pc}
 800d790:	20004674 	.word	0x20004674

0800d794 <_lseek_r>:
 800d794:	b538      	push	{r3, r4, r5, lr}
 800d796:	4d07      	ldr	r5, [pc, #28]	@ (800d7b4 <_lseek_r+0x20>)
 800d798:	4604      	mov	r4, r0
 800d79a:	4608      	mov	r0, r1
 800d79c:	4611      	mov	r1, r2
 800d79e:	2200      	movs	r2, #0
 800d7a0:	602a      	str	r2, [r5, #0]
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	f7f6 f98f 	bl	8003ac6 <_lseek>
 800d7a8:	1c43      	adds	r3, r0, #1
 800d7aa:	d102      	bne.n	800d7b2 <_lseek_r+0x1e>
 800d7ac:	682b      	ldr	r3, [r5, #0]
 800d7ae:	b103      	cbz	r3, 800d7b2 <_lseek_r+0x1e>
 800d7b0:	6023      	str	r3, [r4, #0]
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}
 800d7b4:	20004674 	.word	0x20004674

0800d7b8 <_read_r>:
 800d7b8:	b538      	push	{r3, r4, r5, lr}
 800d7ba:	4d07      	ldr	r5, [pc, #28]	@ (800d7d8 <_read_r+0x20>)
 800d7bc:	4604      	mov	r4, r0
 800d7be:	4608      	mov	r0, r1
 800d7c0:	4611      	mov	r1, r2
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	602a      	str	r2, [r5, #0]
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	f7f6 f91d 	bl	8003a06 <_read>
 800d7cc:	1c43      	adds	r3, r0, #1
 800d7ce:	d102      	bne.n	800d7d6 <_read_r+0x1e>
 800d7d0:	682b      	ldr	r3, [r5, #0]
 800d7d2:	b103      	cbz	r3, 800d7d6 <_read_r+0x1e>
 800d7d4:	6023      	str	r3, [r4, #0]
 800d7d6:	bd38      	pop	{r3, r4, r5, pc}
 800d7d8:	20004674 	.word	0x20004674

0800d7dc <_write_r>:
 800d7dc:	b538      	push	{r3, r4, r5, lr}
 800d7de:	4d07      	ldr	r5, [pc, #28]	@ (800d7fc <_write_r+0x20>)
 800d7e0:	4604      	mov	r4, r0
 800d7e2:	4608      	mov	r0, r1
 800d7e4:	4611      	mov	r1, r2
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	602a      	str	r2, [r5, #0]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	f7f6 f928 	bl	8003a40 <_write>
 800d7f0:	1c43      	adds	r3, r0, #1
 800d7f2:	d102      	bne.n	800d7fa <_write_r+0x1e>
 800d7f4:	682b      	ldr	r3, [r5, #0]
 800d7f6:	b103      	cbz	r3, 800d7fa <_write_r+0x1e>
 800d7f8:	6023      	str	r3, [r4, #0]
 800d7fa:	bd38      	pop	{r3, r4, r5, pc}
 800d7fc:	20004674 	.word	0x20004674

0800d800 <__errno>:
 800d800:	4b01      	ldr	r3, [pc, #4]	@ (800d808 <__errno+0x8>)
 800d802:	6818      	ldr	r0, [r3, #0]
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	20000064 	.word	0x20000064

0800d80c <__libc_init_array>:
 800d80c:	b570      	push	{r4, r5, r6, lr}
 800d80e:	4d0d      	ldr	r5, [pc, #52]	@ (800d844 <__libc_init_array+0x38>)
 800d810:	4c0d      	ldr	r4, [pc, #52]	@ (800d848 <__libc_init_array+0x3c>)
 800d812:	1b64      	subs	r4, r4, r5
 800d814:	10a4      	asrs	r4, r4, #2
 800d816:	2600      	movs	r6, #0
 800d818:	42a6      	cmp	r6, r4
 800d81a:	d109      	bne.n	800d830 <__libc_init_array+0x24>
 800d81c:	4d0b      	ldr	r5, [pc, #44]	@ (800d84c <__libc_init_array+0x40>)
 800d81e:	4c0c      	ldr	r4, [pc, #48]	@ (800d850 <__libc_init_array+0x44>)
 800d820:	f003 f9ac 	bl	8010b7c <_init>
 800d824:	1b64      	subs	r4, r4, r5
 800d826:	10a4      	asrs	r4, r4, #2
 800d828:	2600      	movs	r6, #0
 800d82a:	42a6      	cmp	r6, r4
 800d82c:	d105      	bne.n	800d83a <__libc_init_array+0x2e>
 800d82e:	bd70      	pop	{r4, r5, r6, pc}
 800d830:	f855 3b04 	ldr.w	r3, [r5], #4
 800d834:	4798      	blx	r3
 800d836:	3601      	adds	r6, #1
 800d838:	e7ee      	b.n	800d818 <__libc_init_array+0xc>
 800d83a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d83e:	4798      	blx	r3
 800d840:	3601      	adds	r6, #1
 800d842:	e7f2      	b.n	800d82a <__libc_init_array+0x1e>
 800d844:	08012410 	.word	0x08012410
 800d848:	08012410 	.word	0x08012410
 800d84c:	08012410 	.word	0x08012410
 800d850:	08012414 	.word	0x08012414

0800d854 <__retarget_lock_init_recursive>:
 800d854:	4770      	bx	lr

0800d856 <__retarget_lock_acquire_recursive>:
 800d856:	4770      	bx	lr

0800d858 <__retarget_lock_release_recursive>:
 800d858:	4770      	bx	lr

0800d85a <memcpy>:
 800d85a:	440a      	add	r2, r1
 800d85c:	4291      	cmp	r1, r2
 800d85e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d862:	d100      	bne.n	800d866 <memcpy+0xc>
 800d864:	4770      	bx	lr
 800d866:	b510      	push	{r4, lr}
 800d868:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d86c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d870:	4291      	cmp	r1, r2
 800d872:	d1f9      	bne.n	800d868 <memcpy+0xe>
 800d874:	bd10      	pop	{r4, pc}

0800d876 <quorem>:
 800d876:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87a:	6903      	ldr	r3, [r0, #16]
 800d87c:	690c      	ldr	r4, [r1, #16]
 800d87e:	42a3      	cmp	r3, r4
 800d880:	4607      	mov	r7, r0
 800d882:	db7e      	blt.n	800d982 <quorem+0x10c>
 800d884:	3c01      	subs	r4, #1
 800d886:	f101 0814 	add.w	r8, r1, #20
 800d88a:	00a3      	lsls	r3, r4, #2
 800d88c:	f100 0514 	add.w	r5, r0, #20
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d896:	9301      	str	r3, [sp, #4]
 800d898:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d89c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d8a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d8ac:	d32e      	bcc.n	800d90c <quorem+0x96>
 800d8ae:	f04f 0a00 	mov.w	sl, #0
 800d8b2:	46c4      	mov	ip, r8
 800d8b4:	46ae      	mov	lr, r5
 800d8b6:	46d3      	mov	fp, sl
 800d8b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d8bc:	b298      	uxth	r0, r3
 800d8be:	fb06 a000 	mla	r0, r6, r0, sl
 800d8c2:	0c02      	lsrs	r2, r0, #16
 800d8c4:	0c1b      	lsrs	r3, r3, #16
 800d8c6:	fb06 2303 	mla	r3, r6, r3, r2
 800d8ca:	f8de 2000 	ldr.w	r2, [lr]
 800d8ce:	b280      	uxth	r0, r0
 800d8d0:	b292      	uxth	r2, r2
 800d8d2:	1a12      	subs	r2, r2, r0
 800d8d4:	445a      	add	r2, fp
 800d8d6:	f8de 0000 	ldr.w	r0, [lr]
 800d8da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d8e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d8e8:	b292      	uxth	r2, r2
 800d8ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d8ee:	45e1      	cmp	r9, ip
 800d8f0:	f84e 2b04 	str.w	r2, [lr], #4
 800d8f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d8f8:	d2de      	bcs.n	800d8b8 <quorem+0x42>
 800d8fa:	9b00      	ldr	r3, [sp, #0]
 800d8fc:	58eb      	ldr	r3, [r5, r3]
 800d8fe:	b92b      	cbnz	r3, 800d90c <quorem+0x96>
 800d900:	9b01      	ldr	r3, [sp, #4]
 800d902:	3b04      	subs	r3, #4
 800d904:	429d      	cmp	r5, r3
 800d906:	461a      	mov	r2, r3
 800d908:	d32f      	bcc.n	800d96a <quorem+0xf4>
 800d90a:	613c      	str	r4, [r7, #16]
 800d90c:	4638      	mov	r0, r7
 800d90e:	f001 f979 	bl	800ec04 <__mcmp>
 800d912:	2800      	cmp	r0, #0
 800d914:	db25      	blt.n	800d962 <quorem+0xec>
 800d916:	4629      	mov	r1, r5
 800d918:	2000      	movs	r0, #0
 800d91a:	f858 2b04 	ldr.w	r2, [r8], #4
 800d91e:	f8d1 c000 	ldr.w	ip, [r1]
 800d922:	fa1f fe82 	uxth.w	lr, r2
 800d926:	fa1f f38c 	uxth.w	r3, ip
 800d92a:	eba3 030e 	sub.w	r3, r3, lr
 800d92e:	4403      	add	r3, r0
 800d930:	0c12      	lsrs	r2, r2, #16
 800d932:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d936:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d940:	45c1      	cmp	r9, r8
 800d942:	f841 3b04 	str.w	r3, [r1], #4
 800d946:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d94a:	d2e6      	bcs.n	800d91a <quorem+0xa4>
 800d94c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d950:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d954:	b922      	cbnz	r2, 800d960 <quorem+0xea>
 800d956:	3b04      	subs	r3, #4
 800d958:	429d      	cmp	r5, r3
 800d95a:	461a      	mov	r2, r3
 800d95c:	d30b      	bcc.n	800d976 <quorem+0x100>
 800d95e:	613c      	str	r4, [r7, #16]
 800d960:	3601      	adds	r6, #1
 800d962:	4630      	mov	r0, r6
 800d964:	b003      	add	sp, #12
 800d966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d96a:	6812      	ldr	r2, [r2, #0]
 800d96c:	3b04      	subs	r3, #4
 800d96e:	2a00      	cmp	r2, #0
 800d970:	d1cb      	bne.n	800d90a <quorem+0x94>
 800d972:	3c01      	subs	r4, #1
 800d974:	e7c6      	b.n	800d904 <quorem+0x8e>
 800d976:	6812      	ldr	r2, [r2, #0]
 800d978:	3b04      	subs	r3, #4
 800d97a:	2a00      	cmp	r2, #0
 800d97c:	d1ef      	bne.n	800d95e <quorem+0xe8>
 800d97e:	3c01      	subs	r4, #1
 800d980:	e7ea      	b.n	800d958 <quorem+0xe2>
 800d982:	2000      	movs	r0, #0
 800d984:	e7ee      	b.n	800d964 <quorem+0xee>
	...

0800d988 <_dtoa_r>:
 800d988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d98c:	69c7      	ldr	r7, [r0, #28]
 800d98e:	b099      	sub	sp, #100	@ 0x64
 800d990:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d994:	ec55 4b10 	vmov	r4, r5, d0
 800d998:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d99a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d99c:	4683      	mov	fp, r0
 800d99e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d9a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d9a2:	b97f      	cbnz	r7, 800d9c4 <_dtoa_r+0x3c>
 800d9a4:	2010      	movs	r0, #16
 800d9a6:	f000 fdfd 	bl	800e5a4 <malloc>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800d9b0:	b920      	cbnz	r0, 800d9bc <_dtoa_r+0x34>
 800d9b2:	4ba7      	ldr	r3, [pc, #668]	@ (800dc50 <_dtoa_r+0x2c8>)
 800d9b4:	21ef      	movs	r1, #239	@ 0xef
 800d9b6:	48a7      	ldr	r0, [pc, #668]	@ (800dc54 <_dtoa_r+0x2cc>)
 800d9b8:	f001 fcae 	bl	800f318 <__assert_func>
 800d9bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d9c0:	6007      	str	r7, [r0, #0]
 800d9c2:	60c7      	str	r7, [r0, #12]
 800d9c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d9c8:	6819      	ldr	r1, [r3, #0]
 800d9ca:	b159      	cbz	r1, 800d9e4 <_dtoa_r+0x5c>
 800d9cc:	685a      	ldr	r2, [r3, #4]
 800d9ce:	604a      	str	r2, [r1, #4]
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	4093      	lsls	r3, r2
 800d9d4:	608b      	str	r3, [r1, #8]
 800d9d6:	4658      	mov	r0, fp
 800d9d8:	f000 feda 	bl	800e790 <_Bfree>
 800d9dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	601a      	str	r2, [r3, #0]
 800d9e4:	1e2b      	subs	r3, r5, #0
 800d9e6:	bfb9      	ittee	lt
 800d9e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d9ec:	9303      	strlt	r3, [sp, #12]
 800d9ee:	2300      	movge	r3, #0
 800d9f0:	6033      	strge	r3, [r6, #0]
 800d9f2:	9f03      	ldr	r7, [sp, #12]
 800d9f4:	4b98      	ldr	r3, [pc, #608]	@ (800dc58 <_dtoa_r+0x2d0>)
 800d9f6:	bfbc      	itt	lt
 800d9f8:	2201      	movlt	r2, #1
 800d9fa:	6032      	strlt	r2, [r6, #0]
 800d9fc:	43bb      	bics	r3, r7
 800d9fe:	d112      	bne.n	800da26 <_dtoa_r+0x9e>
 800da00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800da02:	f242 730f 	movw	r3, #9999	@ 0x270f
 800da06:	6013      	str	r3, [r2, #0]
 800da08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da0c:	4323      	orrs	r3, r4
 800da0e:	f000 854d 	beq.w	800e4ac <_dtoa_r+0xb24>
 800da12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800da14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dc6c <_dtoa_r+0x2e4>
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f000 854f 	beq.w	800e4bc <_dtoa_r+0xb34>
 800da1e:	f10a 0303 	add.w	r3, sl, #3
 800da22:	f000 bd49 	b.w	800e4b8 <_dtoa_r+0xb30>
 800da26:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da2a:	2200      	movs	r2, #0
 800da2c:	ec51 0b17 	vmov	r0, r1, d7
 800da30:	2300      	movs	r3, #0
 800da32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800da36:	f7f3 f84f 	bl	8000ad8 <__aeabi_dcmpeq>
 800da3a:	4680      	mov	r8, r0
 800da3c:	b158      	cbz	r0, 800da56 <_dtoa_r+0xce>
 800da3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800da40:	2301      	movs	r3, #1
 800da42:	6013      	str	r3, [r2, #0]
 800da44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800da46:	b113      	cbz	r3, 800da4e <_dtoa_r+0xc6>
 800da48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800da4a:	4b84      	ldr	r3, [pc, #528]	@ (800dc5c <_dtoa_r+0x2d4>)
 800da4c:	6013      	str	r3, [r2, #0]
 800da4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800dc70 <_dtoa_r+0x2e8>
 800da52:	f000 bd33 	b.w	800e4bc <_dtoa_r+0xb34>
 800da56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800da5a:	aa16      	add	r2, sp, #88	@ 0x58
 800da5c:	a917      	add	r1, sp, #92	@ 0x5c
 800da5e:	4658      	mov	r0, fp
 800da60:	f001 f980 	bl	800ed64 <__d2b>
 800da64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800da68:	4681      	mov	r9, r0
 800da6a:	2e00      	cmp	r6, #0
 800da6c:	d077      	beq.n	800db5e <_dtoa_r+0x1d6>
 800da6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800da74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800da80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800da84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800da88:	4619      	mov	r1, r3
 800da8a:	2200      	movs	r2, #0
 800da8c:	4b74      	ldr	r3, [pc, #464]	@ (800dc60 <_dtoa_r+0x2d8>)
 800da8e:	f7f2 fc03 	bl	8000298 <__aeabi_dsub>
 800da92:	a369      	add	r3, pc, #420	@ (adr r3, 800dc38 <_dtoa_r+0x2b0>)
 800da94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da98:	f7f2 fdb6 	bl	8000608 <__aeabi_dmul>
 800da9c:	a368      	add	r3, pc, #416	@ (adr r3, 800dc40 <_dtoa_r+0x2b8>)
 800da9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa2:	f7f2 fbfb 	bl	800029c <__adddf3>
 800daa6:	4604      	mov	r4, r0
 800daa8:	4630      	mov	r0, r6
 800daaa:	460d      	mov	r5, r1
 800daac:	f7f2 fd42 	bl	8000534 <__aeabi_i2d>
 800dab0:	a365      	add	r3, pc, #404	@ (adr r3, 800dc48 <_dtoa_r+0x2c0>)
 800dab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab6:	f7f2 fda7 	bl	8000608 <__aeabi_dmul>
 800daba:	4602      	mov	r2, r0
 800dabc:	460b      	mov	r3, r1
 800dabe:	4620      	mov	r0, r4
 800dac0:	4629      	mov	r1, r5
 800dac2:	f7f2 fbeb 	bl	800029c <__adddf3>
 800dac6:	4604      	mov	r4, r0
 800dac8:	460d      	mov	r5, r1
 800daca:	f7f3 f84d 	bl	8000b68 <__aeabi_d2iz>
 800dace:	2200      	movs	r2, #0
 800dad0:	4607      	mov	r7, r0
 800dad2:	2300      	movs	r3, #0
 800dad4:	4620      	mov	r0, r4
 800dad6:	4629      	mov	r1, r5
 800dad8:	f7f3 f808 	bl	8000aec <__aeabi_dcmplt>
 800dadc:	b140      	cbz	r0, 800daf0 <_dtoa_r+0x168>
 800dade:	4638      	mov	r0, r7
 800dae0:	f7f2 fd28 	bl	8000534 <__aeabi_i2d>
 800dae4:	4622      	mov	r2, r4
 800dae6:	462b      	mov	r3, r5
 800dae8:	f7f2 fff6 	bl	8000ad8 <__aeabi_dcmpeq>
 800daec:	b900      	cbnz	r0, 800daf0 <_dtoa_r+0x168>
 800daee:	3f01      	subs	r7, #1
 800daf0:	2f16      	cmp	r7, #22
 800daf2:	d851      	bhi.n	800db98 <_dtoa_r+0x210>
 800daf4:	4b5b      	ldr	r3, [pc, #364]	@ (800dc64 <_dtoa_r+0x2dc>)
 800daf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db02:	f7f2 fff3 	bl	8000aec <__aeabi_dcmplt>
 800db06:	2800      	cmp	r0, #0
 800db08:	d048      	beq.n	800db9c <_dtoa_r+0x214>
 800db0a:	3f01      	subs	r7, #1
 800db0c:	2300      	movs	r3, #0
 800db0e:	9312      	str	r3, [sp, #72]	@ 0x48
 800db10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800db12:	1b9b      	subs	r3, r3, r6
 800db14:	1e5a      	subs	r2, r3, #1
 800db16:	bf44      	itt	mi
 800db18:	f1c3 0801 	rsbmi	r8, r3, #1
 800db1c:	2300      	movmi	r3, #0
 800db1e:	9208      	str	r2, [sp, #32]
 800db20:	bf54      	ite	pl
 800db22:	f04f 0800 	movpl.w	r8, #0
 800db26:	9308      	strmi	r3, [sp, #32]
 800db28:	2f00      	cmp	r7, #0
 800db2a:	db39      	blt.n	800dba0 <_dtoa_r+0x218>
 800db2c:	9b08      	ldr	r3, [sp, #32]
 800db2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800db30:	443b      	add	r3, r7
 800db32:	9308      	str	r3, [sp, #32]
 800db34:	2300      	movs	r3, #0
 800db36:	930a      	str	r3, [sp, #40]	@ 0x28
 800db38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db3a:	2b09      	cmp	r3, #9
 800db3c:	d864      	bhi.n	800dc08 <_dtoa_r+0x280>
 800db3e:	2b05      	cmp	r3, #5
 800db40:	bfc4      	itt	gt
 800db42:	3b04      	subgt	r3, #4
 800db44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800db46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db48:	f1a3 0302 	sub.w	r3, r3, #2
 800db4c:	bfcc      	ite	gt
 800db4e:	2400      	movgt	r4, #0
 800db50:	2401      	movle	r4, #1
 800db52:	2b03      	cmp	r3, #3
 800db54:	d863      	bhi.n	800dc1e <_dtoa_r+0x296>
 800db56:	e8df f003 	tbb	[pc, r3]
 800db5a:	372a      	.short	0x372a
 800db5c:	5535      	.short	0x5535
 800db5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800db62:	441e      	add	r6, r3
 800db64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800db68:	2b20      	cmp	r3, #32
 800db6a:	bfc1      	itttt	gt
 800db6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800db70:	409f      	lslgt	r7, r3
 800db72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800db76:	fa24 f303 	lsrgt.w	r3, r4, r3
 800db7a:	bfd6      	itet	le
 800db7c:	f1c3 0320 	rsble	r3, r3, #32
 800db80:	ea47 0003 	orrgt.w	r0, r7, r3
 800db84:	fa04 f003 	lslle.w	r0, r4, r3
 800db88:	f7f2 fcc4 	bl	8000514 <__aeabi_ui2d>
 800db8c:	2201      	movs	r2, #1
 800db8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800db92:	3e01      	subs	r6, #1
 800db94:	9214      	str	r2, [sp, #80]	@ 0x50
 800db96:	e777      	b.n	800da88 <_dtoa_r+0x100>
 800db98:	2301      	movs	r3, #1
 800db9a:	e7b8      	b.n	800db0e <_dtoa_r+0x186>
 800db9c:	9012      	str	r0, [sp, #72]	@ 0x48
 800db9e:	e7b7      	b.n	800db10 <_dtoa_r+0x188>
 800dba0:	427b      	negs	r3, r7
 800dba2:	930a      	str	r3, [sp, #40]	@ 0x28
 800dba4:	2300      	movs	r3, #0
 800dba6:	eba8 0807 	sub.w	r8, r8, r7
 800dbaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dbac:	e7c4      	b.n	800db38 <_dtoa_r+0x1b0>
 800dbae:	2300      	movs	r3, #0
 800dbb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	dc35      	bgt.n	800dc24 <_dtoa_r+0x29c>
 800dbb8:	2301      	movs	r3, #1
 800dbba:	9300      	str	r3, [sp, #0]
 800dbbc:	9307      	str	r3, [sp, #28]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800dbc2:	e00b      	b.n	800dbdc <_dtoa_r+0x254>
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e7f3      	b.n	800dbb0 <_dtoa_r+0x228>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbce:	18fb      	adds	r3, r7, r3
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	9307      	str	r3, [sp, #28]
 800dbd8:	bfb8      	it	lt
 800dbda:	2301      	movlt	r3, #1
 800dbdc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	2204      	movs	r2, #4
 800dbe4:	f102 0514 	add.w	r5, r2, #20
 800dbe8:	429d      	cmp	r5, r3
 800dbea:	d91f      	bls.n	800dc2c <_dtoa_r+0x2a4>
 800dbec:	6041      	str	r1, [r0, #4]
 800dbee:	4658      	mov	r0, fp
 800dbf0:	f000 fd8e 	bl	800e710 <_Balloc>
 800dbf4:	4682      	mov	sl, r0
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	d13c      	bne.n	800dc74 <_dtoa_r+0x2ec>
 800dbfa:	4b1b      	ldr	r3, [pc, #108]	@ (800dc68 <_dtoa_r+0x2e0>)
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	f240 11af 	movw	r1, #431	@ 0x1af
 800dc02:	e6d8      	b.n	800d9b6 <_dtoa_r+0x2e>
 800dc04:	2301      	movs	r3, #1
 800dc06:	e7e0      	b.n	800dbca <_dtoa_r+0x242>
 800dc08:	2401      	movs	r4, #1
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dc10:	f04f 33ff 	mov.w	r3, #4294967295
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	9307      	str	r3, [sp, #28]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	2312      	movs	r3, #18
 800dc1c:	e7d0      	b.n	800dbc0 <_dtoa_r+0x238>
 800dc1e:	2301      	movs	r3, #1
 800dc20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc22:	e7f5      	b.n	800dc10 <_dtoa_r+0x288>
 800dc24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	9307      	str	r3, [sp, #28]
 800dc2a:	e7d7      	b.n	800dbdc <_dtoa_r+0x254>
 800dc2c:	3101      	adds	r1, #1
 800dc2e:	0052      	lsls	r2, r2, #1
 800dc30:	e7d8      	b.n	800dbe4 <_dtoa_r+0x25c>
 800dc32:	bf00      	nop
 800dc34:	f3af 8000 	nop.w
 800dc38:	636f4361 	.word	0x636f4361
 800dc3c:	3fd287a7 	.word	0x3fd287a7
 800dc40:	8b60c8b3 	.word	0x8b60c8b3
 800dc44:	3fc68a28 	.word	0x3fc68a28
 800dc48:	509f79fb 	.word	0x509f79fb
 800dc4c:	3fd34413 	.word	0x3fd34413
 800dc50:	08011c5f 	.word	0x08011c5f
 800dc54:	08011c76 	.word	0x08011c76
 800dc58:	7ff00000 	.word	0x7ff00000
 800dc5c:	08011c2f 	.word	0x08011c2f
 800dc60:	3ff80000 	.word	0x3ff80000
 800dc64:	08011d70 	.word	0x08011d70
 800dc68:	08011cce 	.word	0x08011cce
 800dc6c:	08011c5b 	.word	0x08011c5b
 800dc70:	08011c2e 	.word	0x08011c2e
 800dc74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dc78:	6018      	str	r0, [r3, #0]
 800dc7a:	9b07      	ldr	r3, [sp, #28]
 800dc7c:	2b0e      	cmp	r3, #14
 800dc7e:	f200 80a4 	bhi.w	800ddca <_dtoa_r+0x442>
 800dc82:	2c00      	cmp	r4, #0
 800dc84:	f000 80a1 	beq.w	800ddca <_dtoa_r+0x442>
 800dc88:	2f00      	cmp	r7, #0
 800dc8a:	dd33      	ble.n	800dcf4 <_dtoa_r+0x36c>
 800dc8c:	4bad      	ldr	r3, [pc, #692]	@ (800df44 <_dtoa_r+0x5bc>)
 800dc8e:	f007 020f 	and.w	r2, r7, #15
 800dc92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc96:	ed93 7b00 	vldr	d7, [r3]
 800dc9a:	05f8      	lsls	r0, r7, #23
 800dc9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dca0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dca4:	d516      	bpl.n	800dcd4 <_dtoa_r+0x34c>
 800dca6:	4ba8      	ldr	r3, [pc, #672]	@ (800df48 <_dtoa_r+0x5c0>)
 800dca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dcac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dcb0:	f7f2 fdd4 	bl	800085c <__aeabi_ddiv>
 800dcb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcb8:	f004 040f 	and.w	r4, r4, #15
 800dcbc:	2603      	movs	r6, #3
 800dcbe:	4da2      	ldr	r5, [pc, #648]	@ (800df48 <_dtoa_r+0x5c0>)
 800dcc0:	b954      	cbnz	r4, 800dcd8 <_dtoa_r+0x350>
 800dcc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcca:	f7f2 fdc7 	bl	800085c <__aeabi_ddiv>
 800dcce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcd2:	e028      	b.n	800dd26 <_dtoa_r+0x39e>
 800dcd4:	2602      	movs	r6, #2
 800dcd6:	e7f2      	b.n	800dcbe <_dtoa_r+0x336>
 800dcd8:	07e1      	lsls	r1, r4, #31
 800dcda:	d508      	bpl.n	800dcee <_dtoa_r+0x366>
 800dcdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dce0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dce4:	f7f2 fc90 	bl	8000608 <__aeabi_dmul>
 800dce8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dcec:	3601      	adds	r6, #1
 800dcee:	1064      	asrs	r4, r4, #1
 800dcf0:	3508      	adds	r5, #8
 800dcf2:	e7e5      	b.n	800dcc0 <_dtoa_r+0x338>
 800dcf4:	f000 80d2 	beq.w	800de9c <_dtoa_r+0x514>
 800dcf8:	427c      	negs	r4, r7
 800dcfa:	4b92      	ldr	r3, [pc, #584]	@ (800df44 <_dtoa_r+0x5bc>)
 800dcfc:	4d92      	ldr	r5, [pc, #584]	@ (800df48 <_dtoa_r+0x5c0>)
 800dcfe:	f004 020f 	and.w	r2, r4, #15
 800dd02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd0e:	f7f2 fc7b 	bl	8000608 <__aeabi_dmul>
 800dd12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd16:	1124      	asrs	r4, r4, #4
 800dd18:	2300      	movs	r3, #0
 800dd1a:	2602      	movs	r6, #2
 800dd1c:	2c00      	cmp	r4, #0
 800dd1e:	f040 80b2 	bne.w	800de86 <_dtoa_r+0x4fe>
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1d3      	bne.n	800dcce <_dtoa_r+0x346>
 800dd26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dd28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f000 80b7 	beq.w	800dea0 <_dtoa_r+0x518>
 800dd32:	4b86      	ldr	r3, [pc, #536]	@ (800df4c <_dtoa_r+0x5c4>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	4620      	mov	r0, r4
 800dd38:	4629      	mov	r1, r5
 800dd3a:	f7f2 fed7 	bl	8000aec <__aeabi_dcmplt>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	f000 80ae 	beq.w	800dea0 <_dtoa_r+0x518>
 800dd44:	9b07      	ldr	r3, [sp, #28]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f000 80aa 	beq.w	800dea0 <_dtoa_r+0x518>
 800dd4c:	9b00      	ldr	r3, [sp, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	dd37      	ble.n	800ddc2 <_dtoa_r+0x43a>
 800dd52:	1e7b      	subs	r3, r7, #1
 800dd54:	9304      	str	r3, [sp, #16]
 800dd56:	4620      	mov	r0, r4
 800dd58:	4b7d      	ldr	r3, [pc, #500]	@ (800df50 <_dtoa_r+0x5c8>)
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	4629      	mov	r1, r5
 800dd5e:	f7f2 fc53 	bl	8000608 <__aeabi_dmul>
 800dd62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd66:	9c00      	ldr	r4, [sp, #0]
 800dd68:	3601      	adds	r6, #1
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	f7f2 fbe2 	bl	8000534 <__aeabi_i2d>
 800dd70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd74:	f7f2 fc48 	bl	8000608 <__aeabi_dmul>
 800dd78:	4b76      	ldr	r3, [pc, #472]	@ (800df54 <_dtoa_r+0x5cc>)
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f7f2 fa8e 	bl	800029c <__adddf3>
 800dd80:	4605      	mov	r5, r0
 800dd82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dd86:	2c00      	cmp	r4, #0
 800dd88:	f040 808d 	bne.w	800dea6 <_dtoa_r+0x51e>
 800dd8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd90:	4b71      	ldr	r3, [pc, #452]	@ (800df58 <_dtoa_r+0x5d0>)
 800dd92:	2200      	movs	r2, #0
 800dd94:	f7f2 fa80 	bl	8000298 <__aeabi_dsub>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dda0:	462a      	mov	r2, r5
 800dda2:	4633      	mov	r3, r6
 800dda4:	f7f2 fec0 	bl	8000b28 <__aeabi_dcmpgt>
 800dda8:	2800      	cmp	r0, #0
 800ddaa:	f040 828b 	bne.w	800e2c4 <_dtoa_r+0x93c>
 800ddae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddb2:	462a      	mov	r2, r5
 800ddb4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ddb8:	f7f2 fe98 	bl	8000aec <__aeabi_dcmplt>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	f040 8128 	bne.w	800e012 <_dtoa_r+0x68a>
 800ddc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ddc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ddca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	f2c0 815a 	blt.w	800e086 <_dtoa_r+0x6fe>
 800ddd2:	2f0e      	cmp	r7, #14
 800ddd4:	f300 8157 	bgt.w	800e086 <_dtoa_r+0x6fe>
 800ddd8:	4b5a      	ldr	r3, [pc, #360]	@ (800df44 <_dtoa_r+0x5bc>)
 800ddda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ddde:	ed93 7b00 	vldr	d7, [r3]
 800dde2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	ed8d 7b00 	vstr	d7, [sp]
 800ddea:	da03      	bge.n	800ddf4 <_dtoa_r+0x46c>
 800ddec:	9b07      	ldr	r3, [sp, #28]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	f340 8101 	ble.w	800dff6 <_dtoa_r+0x66e>
 800ddf4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ddf8:	4656      	mov	r6, sl
 800ddfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddfe:	4620      	mov	r0, r4
 800de00:	4629      	mov	r1, r5
 800de02:	f7f2 fd2b 	bl	800085c <__aeabi_ddiv>
 800de06:	f7f2 feaf 	bl	8000b68 <__aeabi_d2iz>
 800de0a:	4680      	mov	r8, r0
 800de0c:	f7f2 fb92 	bl	8000534 <__aeabi_i2d>
 800de10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de14:	f7f2 fbf8 	bl	8000608 <__aeabi_dmul>
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	4620      	mov	r0, r4
 800de1e:	4629      	mov	r1, r5
 800de20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800de24:	f7f2 fa38 	bl	8000298 <__aeabi_dsub>
 800de28:	f806 4b01 	strb.w	r4, [r6], #1
 800de2c:	9d07      	ldr	r5, [sp, #28]
 800de2e:	eba6 040a 	sub.w	r4, r6, sl
 800de32:	42a5      	cmp	r5, r4
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	f040 8117 	bne.w	800e06a <_dtoa_r+0x6e2>
 800de3c:	f7f2 fa2e 	bl	800029c <__adddf3>
 800de40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de44:	4604      	mov	r4, r0
 800de46:	460d      	mov	r5, r1
 800de48:	f7f2 fe6e 	bl	8000b28 <__aeabi_dcmpgt>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	f040 80f9 	bne.w	800e044 <_dtoa_r+0x6bc>
 800de52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de56:	4620      	mov	r0, r4
 800de58:	4629      	mov	r1, r5
 800de5a:	f7f2 fe3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800de5e:	b118      	cbz	r0, 800de68 <_dtoa_r+0x4e0>
 800de60:	f018 0f01 	tst.w	r8, #1
 800de64:	f040 80ee 	bne.w	800e044 <_dtoa_r+0x6bc>
 800de68:	4649      	mov	r1, r9
 800de6a:	4658      	mov	r0, fp
 800de6c:	f000 fc90 	bl	800e790 <_Bfree>
 800de70:	2300      	movs	r3, #0
 800de72:	7033      	strb	r3, [r6, #0]
 800de74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800de76:	3701      	adds	r7, #1
 800de78:	601f      	str	r7, [r3, #0]
 800de7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	f000 831d 	beq.w	800e4bc <_dtoa_r+0xb34>
 800de82:	601e      	str	r6, [r3, #0]
 800de84:	e31a      	b.n	800e4bc <_dtoa_r+0xb34>
 800de86:	07e2      	lsls	r2, r4, #31
 800de88:	d505      	bpl.n	800de96 <_dtoa_r+0x50e>
 800de8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800de8e:	f7f2 fbbb 	bl	8000608 <__aeabi_dmul>
 800de92:	3601      	adds	r6, #1
 800de94:	2301      	movs	r3, #1
 800de96:	1064      	asrs	r4, r4, #1
 800de98:	3508      	adds	r5, #8
 800de9a:	e73f      	b.n	800dd1c <_dtoa_r+0x394>
 800de9c:	2602      	movs	r6, #2
 800de9e:	e742      	b.n	800dd26 <_dtoa_r+0x39e>
 800dea0:	9c07      	ldr	r4, [sp, #28]
 800dea2:	9704      	str	r7, [sp, #16]
 800dea4:	e761      	b.n	800dd6a <_dtoa_r+0x3e2>
 800dea6:	4b27      	ldr	r3, [pc, #156]	@ (800df44 <_dtoa_r+0x5bc>)
 800dea8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800deaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800deae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800deb2:	4454      	add	r4, sl
 800deb4:	2900      	cmp	r1, #0
 800deb6:	d053      	beq.n	800df60 <_dtoa_r+0x5d8>
 800deb8:	4928      	ldr	r1, [pc, #160]	@ (800df5c <_dtoa_r+0x5d4>)
 800deba:	2000      	movs	r0, #0
 800debc:	f7f2 fcce 	bl	800085c <__aeabi_ddiv>
 800dec0:	4633      	mov	r3, r6
 800dec2:	462a      	mov	r2, r5
 800dec4:	f7f2 f9e8 	bl	8000298 <__aeabi_dsub>
 800dec8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800decc:	4656      	mov	r6, sl
 800dece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ded2:	f7f2 fe49 	bl	8000b68 <__aeabi_d2iz>
 800ded6:	4605      	mov	r5, r0
 800ded8:	f7f2 fb2c 	bl	8000534 <__aeabi_i2d>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dee4:	f7f2 f9d8 	bl	8000298 <__aeabi_dsub>
 800dee8:	3530      	adds	r5, #48	@ 0x30
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800def2:	f806 5b01 	strb.w	r5, [r6], #1
 800def6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800defa:	f7f2 fdf7 	bl	8000aec <__aeabi_dcmplt>
 800defe:	2800      	cmp	r0, #0
 800df00:	d171      	bne.n	800dfe6 <_dtoa_r+0x65e>
 800df02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df06:	4911      	ldr	r1, [pc, #68]	@ (800df4c <_dtoa_r+0x5c4>)
 800df08:	2000      	movs	r0, #0
 800df0a:	f7f2 f9c5 	bl	8000298 <__aeabi_dsub>
 800df0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800df12:	f7f2 fdeb 	bl	8000aec <__aeabi_dcmplt>
 800df16:	2800      	cmp	r0, #0
 800df18:	f040 8095 	bne.w	800e046 <_dtoa_r+0x6be>
 800df1c:	42a6      	cmp	r6, r4
 800df1e:	f43f af50 	beq.w	800ddc2 <_dtoa_r+0x43a>
 800df22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800df26:	4b0a      	ldr	r3, [pc, #40]	@ (800df50 <_dtoa_r+0x5c8>)
 800df28:	2200      	movs	r2, #0
 800df2a:	f7f2 fb6d 	bl	8000608 <__aeabi_dmul>
 800df2e:	4b08      	ldr	r3, [pc, #32]	@ (800df50 <_dtoa_r+0x5c8>)
 800df30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800df34:	2200      	movs	r2, #0
 800df36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df3a:	f7f2 fb65 	bl	8000608 <__aeabi_dmul>
 800df3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df42:	e7c4      	b.n	800dece <_dtoa_r+0x546>
 800df44:	08011d70 	.word	0x08011d70
 800df48:	08011d48 	.word	0x08011d48
 800df4c:	3ff00000 	.word	0x3ff00000
 800df50:	40240000 	.word	0x40240000
 800df54:	401c0000 	.word	0x401c0000
 800df58:	40140000 	.word	0x40140000
 800df5c:	3fe00000 	.word	0x3fe00000
 800df60:	4631      	mov	r1, r6
 800df62:	4628      	mov	r0, r5
 800df64:	f7f2 fb50 	bl	8000608 <__aeabi_dmul>
 800df68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800df6c:	9415      	str	r4, [sp, #84]	@ 0x54
 800df6e:	4656      	mov	r6, sl
 800df70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df74:	f7f2 fdf8 	bl	8000b68 <__aeabi_d2iz>
 800df78:	4605      	mov	r5, r0
 800df7a:	f7f2 fadb 	bl	8000534 <__aeabi_i2d>
 800df7e:	4602      	mov	r2, r0
 800df80:	460b      	mov	r3, r1
 800df82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df86:	f7f2 f987 	bl	8000298 <__aeabi_dsub>
 800df8a:	3530      	adds	r5, #48	@ 0x30
 800df8c:	f806 5b01 	strb.w	r5, [r6], #1
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	42a6      	cmp	r6, r4
 800df96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df9a:	f04f 0200 	mov.w	r2, #0
 800df9e:	d124      	bne.n	800dfea <_dtoa_r+0x662>
 800dfa0:	4bac      	ldr	r3, [pc, #688]	@ (800e254 <_dtoa_r+0x8cc>)
 800dfa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dfa6:	f7f2 f979 	bl	800029c <__adddf3>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	460b      	mov	r3, r1
 800dfae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfb2:	f7f2 fdb9 	bl	8000b28 <__aeabi_dcmpgt>
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	d145      	bne.n	800e046 <_dtoa_r+0x6be>
 800dfba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dfbe:	49a5      	ldr	r1, [pc, #660]	@ (800e254 <_dtoa_r+0x8cc>)
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	f7f2 f969 	bl	8000298 <__aeabi_dsub>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	460b      	mov	r3, r1
 800dfca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfce:	f7f2 fd8d 	bl	8000aec <__aeabi_dcmplt>
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	f43f aef5 	beq.w	800ddc2 <_dtoa_r+0x43a>
 800dfd8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800dfda:	1e73      	subs	r3, r6, #1
 800dfdc:	9315      	str	r3, [sp, #84]	@ 0x54
 800dfde:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dfe2:	2b30      	cmp	r3, #48	@ 0x30
 800dfe4:	d0f8      	beq.n	800dfd8 <_dtoa_r+0x650>
 800dfe6:	9f04      	ldr	r7, [sp, #16]
 800dfe8:	e73e      	b.n	800de68 <_dtoa_r+0x4e0>
 800dfea:	4b9b      	ldr	r3, [pc, #620]	@ (800e258 <_dtoa_r+0x8d0>)
 800dfec:	f7f2 fb0c 	bl	8000608 <__aeabi_dmul>
 800dff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dff4:	e7bc      	b.n	800df70 <_dtoa_r+0x5e8>
 800dff6:	d10c      	bne.n	800e012 <_dtoa_r+0x68a>
 800dff8:	4b98      	ldr	r3, [pc, #608]	@ (800e25c <_dtoa_r+0x8d4>)
 800dffa:	2200      	movs	r2, #0
 800dffc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e000:	f7f2 fb02 	bl	8000608 <__aeabi_dmul>
 800e004:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e008:	f7f2 fd84 	bl	8000b14 <__aeabi_dcmpge>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	f000 8157 	beq.w	800e2c0 <_dtoa_r+0x938>
 800e012:	2400      	movs	r4, #0
 800e014:	4625      	mov	r5, r4
 800e016:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e018:	43db      	mvns	r3, r3
 800e01a:	9304      	str	r3, [sp, #16]
 800e01c:	4656      	mov	r6, sl
 800e01e:	2700      	movs	r7, #0
 800e020:	4621      	mov	r1, r4
 800e022:	4658      	mov	r0, fp
 800e024:	f000 fbb4 	bl	800e790 <_Bfree>
 800e028:	2d00      	cmp	r5, #0
 800e02a:	d0dc      	beq.n	800dfe6 <_dtoa_r+0x65e>
 800e02c:	b12f      	cbz	r7, 800e03a <_dtoa_r+0x6b2>
 800e02e:	42af      	cmp	r7, r5
 800e030:	d003      	beq.n	800e03a <_dtoa_r+0x6b2>
 800e032:	4639      	mov	r1, r7
 800e034:	4658      	mov	r0, fp
 800e036:	f000 fbab 	bl	800e790 <_Bfree>
 800e03a:	4629      	mov	r1, r5
 800e03c:	4658      	mov	r0, fp
 800e03e:	f000 fba7 	bl	800e790 <_Bfree>
 800e042:	e7d0      	b.n	800dfe6 <_dtoa_r+0x65e>
 800e044:	9704      	str	r7, [sp, #16]
 800e046:	4633      	mov	r3, r6
 800e048:	461e      	mov	r6, r3
 800e04a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e04e:	2a39      	cmp	r2, #57	@ 0x39
 800e050:	d107      	bne.n	800e062 <_dtoa_r+0x6da>
 800e052:	459a      	cmp	sl, r3
 800e054:	d1f8      	bne.n	800e048 <_dtoa_r+0x6c0>
 800e056:	9a04      	ldr	r2, [sp, #16]
 800e058:	3201      	adds	r2, #1
 800e05a:	9204      	str	r2, [sp, #16]
 800e05c:	2230      	movs	r2, #48	@ 0x30
 800e05e:	f88a 2000 	strb.w	r2, [sl]
 800e062:	781a      	ldrb	r2, [r3, #0]
 800e064:	3201      	adds	r2, #1
 800e066:	701a      	strb	r2, [r3, #0]
 800e068:	e7bd      	b.n	800dfe6 <_dtoa_r+0x65e>
 800e06a:	4b7b      	ldr	r3, [pc, #492]	@ (800e258 <_dtoa_r+0x8d0>)
 800e06c:	2200      	movs	r2, #0
 800e06e:	f7f2 facb 	bl	8000608 <__aeabi_dmul>
 800e072:	2200      	movs	r2, #0
 800e074:	2300      	movs	r3, #0
 800e076:	4604      	mov	r4, r0
 800e078:	460d      	mov	r5, r1
 800e07a:	f7f2 fd2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e07e:	2800      	cmp	r0, #0
 800e080:	f43f aebb 	beq.w	800ddfa <_dtoa_r+0x472>
 800e084:	e6f0      	b.n	800de68 <_dtoa_r+0x4e0>
 800e086:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e088:	2a00      	cmp	r2, #0
 800e08a:	f000 80db 	beq.w	800e244 <_dtoa_r+0x8bc>
 800e08e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e090:	2a01      	cmp	r2, #1
 800e092:	f300 80bf 	bgt.w	800e214 <_dtoa_r+0x88c>
 800e096:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e098:	2a00      	cmp	r2, #0
 800e09a:	f000 80b7 	beq.w	800e20c <_dtoa_r+0x884>
 800e09e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e0a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e0a4:	4646      	mov	r6, r8
 800e0a6:	9a08      	ldr	r2, [sp, #32]
 800e0a8:	2101      	movs	r1, #1
 800e0aa:	441a      	add	r2, r3
 800e0ac:	4658      	mov	r0, fp
 800e0ae:	4498      	add	r8, r3
 800e0b0:	9208      	str	r2, [sp, #32]
 800e0b2:	f000 fc21 	bl	800e8f8 <__i2b>
 800e0b6:	4605      	mov	r5, r0
 800e0b8:	b15e      	cbz	r6, 800e0d2 <_dtoa_r+0x74a>
 800e0ba:	9b08      	ldr	r3, [sp, #32]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	dd08      	ble.n	800e0d2 <_dtoa_r+0x74a>
 800e0c0:	42b3      	cmp	r3, r6
 800e0c2:	9a08      	ldr	r2, [sp, #32]
 800e0c4:	bfa8      	it	ge
 800e0c6:	4633      	movge	r3, r6
 800e0c8:	eba8 0803 	sub.w	r8, r8, r3
 800e0cc:	1af6      	subs	r6, r6, r3
 800e0ce:	1ad3      	subs	r3, r2, r3
 800e0d0:	9308      	str	r3, [sp, #32]
 800e0d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0d4:	b1f3      	cbz	r3, 800e114 <_dtoa_r+0x78c>
 800e0d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f000 80b7 	beq.w	800e24c <_dtoa_r+0x8c4>
 800e0de:	b18c      	cbz	r4, 800e104 <_dtoa_r+0x77c>
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	4622      	mov	r2, r4
 800e0e4:	4658      	mov	r0, fp
 800e0e6:	f000 fcc7 	bl	800ea78 <__pow5mult>
 800e0ea:	464a      	mov	r2, r9
 800e0ec:	4601      	mov	r1, r0
 800e0ee:	4605      	mov	r5, r0
 800e0f0:	4658      	mov	r0, fp
 800e0f2:	f000 fc17 	bl	800e924 <__multiply>
 800e0f6:	4649      	mov	r1, r9
 800e0f8:	9004      	str	r0, [sp, #16]
 800e0fa:	4658      	mov	r0, fp
 800e0fc:	f000 fb48 	bl	800e790 <_Bfree>
 800e100:	9b04      	ldr	r3, [sp, #16]
 800e102:	4699      	mov	r9, r3
 800e104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e106:	1b1a      	subs	r2, r3, r4
 800e108:	d004      	beq.n	800e114 <_dtoa_r+0x78c>
 800e10a:	4649      	mov	r1, r9
 800e10c:	4658      	mov	r0, fp
 800e10e:	f000 fcb3 	bl	800ea78 <__pow5mult>
 800e112:	4681      	mov	r9, r0
 800e114:	2101      	movs	r1, #1
 800e116:	4658      	mov	r0, fp
 800e118:	f000 fbee 	bl	800e8f8 <__i2b>
 800e11c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e11e:	4604      	mov	r4, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	f000 81cf 	beq.w	800e4c4 <_dtoa_r+0xb3c>
 800e126:	461a      	mov	r2, r3
 800e128:	4601      	mov	r1, r0
 800e12a:	4658      	mov	r0, fp
 800e12c:	f000 fca4 	bl	800ea78 <__pow5mult>
 800e130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e132:	2b01      	cmp	r3, #1
 800e134:	4604      	mov	r4, r0
 800e136:	f300 8095 	bgt.w	800e264 <_dtoa_r+0x8dc>
 800e13a:	9b02      	ldr	r3, [sp, #8]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f040 8087 	bne.w	800e250 <_dtoa_r+0x8c8>
 800e142:	9b03      	ldr	r3, [sp, #12]
 800e144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e148:	2b00      	cmp	r3, #0
 800e14a:	f040 8089 	bne.w	800e260 <_dtoa_r+0x8d8>
 800e14e:	9b03      	ldr	r3, [sp, #12]
 800e150:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e154:	0d1b      	lsrs	r3, r3, #20
 800e156:	051b      	lsls	r3, r3, #20
 800e158:	b12b      	cbz	r3, 800e166 <_dtoa_r+0x7de>
 800e15a:	9b08      	ldr	r3, [sp, #32]
 800e15c:	3301      	adds	r3, #1
 800e15e:	9308      	str	r3, [sp, #32]
 800e160:	f108 0801 	add.w	r8, r8, #1
 800e164:	2301      	movs	r3, #1
 800e166:	930a      	str	r3, [sp, #40]	@ 0x28
 800e168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f000 81b0 	beq.w	800e4d0 <_dtoa_r+0xb48>
 800e170:	6923      	ldr	r3, [r4, #16]
 800e172:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e176:	6918      	ldr	r0, [r3, #16]
 800e178:	f000 fb72 	bl	800e860 <__hi0bits>
 800e17c:	f1c0 0020 	rsb	r0, r0, #32
 800e180:	9b08      	ldr	r3, [sp, #32]
 800e182:	4418      	add	r0, r3
 800e184:	f010 001f 	ands.w	r0, r0, #31
 800e188:	d077      	beq.n	800e27a <_dtoa_r+0x8f2>
 800e18a:	f1c0 0320 	rsb	r3, r0, #32
 800e18e:	2b04      	cmp	r3, #4
 800e190:	dd6b      	ble.n	800e26a <_dtoa_r+0x8e2>
 800e192:	9b08      	ldr	r3, [sp, #32]
 800e194:	f1c0 001c 	rsb	r0, r0, #28
 800e198:	4403      	add	r3, r0
 800e19a:	4480      	add	r8, r0
 800e19c:	4406      	add	r6, r0
 800e19e:	9308      	str	r3, [sp, #32]
 800e1a0:	f1b8 0f00 	cmp.w	r8, #0
 800e1a4:	dd05      	ble.n	800e1b2 <_dtoa_r+0x82a>
 800e1a6:	4649      	mov	r1, r9
 800e1a8:	4642      	mov	r2, r8
 800e1aa:	4658      	mov	r0, fp
 800e1ac:	f000 fcbe 	bl	800eb2c <__lshift>
 800e1b0:	4681      	mov	r9, r0
 800e1b2:	9b08      	ldr	r3, [sp, #32]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	dd05      	ble.n	800e1c4 <_dtoa_r+0x83c>
 800e1b8:	4621      	mov	r1, r4
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	4658      	mov	r0, fp
 800e1be:	f000 fcb5 	bl	800eb2c <__lshift>
 800e1c2:	4604      	mov	r4, r0
 800e1c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d059      	beq.n	800e27e <_dtoa_r+0x8f6>
 800e1ca:	4621      	mov	r1, r4
 800e1cc:	4648      	mov	r0, r9
 800e1ce:	f000 fd19 	bl	800ec04 <__mcmp>
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	da53      	bge.n	800e27e <_dtoa_r+0x8f6>
 800e1d6:	1e7b      	subs	r3, r7, #1
 800e1d8:	9304      	str	r3, [sp, #16]
 800e1da:	4649      	mov	r1, r9
 800e1dc:	2300      	movs	r3, #0
 800e1de:	220a      	movs	r2, #10
 800e1e0:	4658      	mov	r0, fp
 800e1e2:	f000 faf7 	bl	800e7d4 <__multadd>
 800e1e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1e8:	4681      	mov	r9, r0
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	f000 8172 	beq.w	800e4d4 <_dtoa_r+0xb4c>
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	4629      	mov	r1, r5
 800e1f4:	220a      	movs	r2, #10
 800e1f6:	4658      	mov	r0, fp
 800e1f8:	f000 faec 	bl	800e7d4 <__multadd>
 800e1fc:	9b00      	ldr	r3, [sp, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	4605      	mov	r5, r0
 800e202:	dc67      	bgt.n	800e2d4 <_dtoa_r+0x94c>
 800e204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e206:	2b02      	cmp	r3, #2
 800e208:	dc41      	bgt.n	800e28e <_dtoa_r+0x906>
 800e20a:	e063      	b.n	800e2d4 <_dtoa_r+0x94c>
 800e20c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e20e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e212:	e746      	b.n	800e0a2 <_dtoa_r+0x71a>
 800e214:	9b07      	ldr	r3, [sp, #28]
 800e216:	1e5c      	subs	r4, r3, #1
 800e218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e21a:	42a3      	cmp	r3, r4
 800e21c:	bfbf      	itttt	lt
 800e21e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e220:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e222:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e224:	1ae3      	sublt	r3, r4, r3
 800e226:	bfb4      	ite	lt
 800e228:	18d2      	addlt	r2, r2, r3
 800e22a:	1b1c      	subge	r4, r3, r4
 800e22c:	9b07      	ldr	r3, [sp, #28]
 800e22e:	bfbc      	itt	lt
 800e230:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e232:	2400      	movlt	r4, #0
 800e234:	2b00      	cmp	r3, #0
 800e236:	bfb5      	itete	lt
 800e238:	eba8 0603 	sublt.w	r6, r8, r3
 800e23c:	9b07      	ldrge	r3, [sp, #28]
 800e23e:	2300      	movlt	r3, #0
 800e240:	4646      	movge	r6, r8
 800e242:	e730      	b.n	800e0a6 <_dtoa_r+0x71e>
 800e244:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e246:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e248:	4646      	mov	r6, r8
 800e24a:	e735      	b.n	800e0b8 <_dtoa_r+0x730>
 800e24c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e24e:	e75c      	b.n	800e10a <_dtoa_r+0x782>
 800e250:	2300      	movs	r3, #0
 800e252:	e788      	b.n	800e166 <_dtoa_r+0x7de>
 800e254:	3fe00000 	.word	0x3fe00000
 800e258:	40240000 	.word	0x40240000
 800e25c:	40140000 	.word	0x40140000
 800e260:	9b02      	ldr	r3, [sp, #8]
 800e262:	e780      	b.n	800e166 <_dtoa_r+0x7de>
 800e264:	2300      	movs	r3, #0
 800e266:	930a      	str	r3, [sp, #40]	@ 0x28
 800e268:	e782      	b.n	800e170 <_dtoa_r+0x7e8>
 800e26a:	d099      	beq.n	800e1a0 <_dtoa_r+0x818>
 800e26c:	9a08      	ldr	r2, [sp, #32]
 800e26e:	331c      	adds	r3, #28
 800e270:	441a      	add	r2, r3
 800e272:	4498      	add	r8, r3
 800e274:	441e      	add	r6, r3
 800e276:	9208      	str	r2, [sp, #32]
 800e278:	e792      	b.n	800e1a0 <_dtoa_r+0x818>
 800e27a:	4603      	mov	r3, r0
 800e27c:	e7f6      	b.n	800e26c <_dtoa_r+0x8e4>
 800e27e:	9b07      	ldr	r3, [sp, #28]
 800e280:	9704      	str	r7, [sp, #16]
 800e282:	2b00      	cmp	r3, #0
 800e284:	dc20      	bgt.n	800e2c8 <_dtoa_r+0x940>
 800e286:	9300      	str	r3, [sp, #0]
 800e288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e28a:	2b02      	cmp	r3, #2
 800e28c:	dd1e      	ble.n	800e2cc <_dtoa_r+0x944>
 800e28e:	9b00      	ldr	r3, [sp, #0]
 800e290:	2b00      	cmp	r3, #0
 800e292:	f47f aec0 	bne.w	800e016 <_dtoa_r+0x68e>
 800e296:	4621      	mov	r1, r4
 800e298:	2205      	movs	r2, #5
 800e29a:	4658      	mov	r0, fp
 800e29c:	f000 fa9a 	bl	800e7d4 <__multadd>
 800e2a0:	4601      	mov	r1, r0
 800e2a2:	4604      	mov	r4, r0
 800e2a4:	4648      	mov	r0, r9
 800e2a6:	f000 fcad 	bl	800ec04 <__mcmp>
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	f77f aeb3 	ble.w	800e016 <_dtoa_r+0x68e>
 800e2b0:	4656      	mov	r6, sl
 800e2b2:	2331      	movs	r3, #49	@ 0x31
 800e2b4:	f806 3b01 	strb.w	r3, [r6], #1
 800e2b8:	9b04      	ldr	r3, [sp, #16]
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	9304      	str	r3, [sp, #16]
 800e2be:	e6ae      	b.n	800e01e <_dtoa_r+0x696>
 800e2c0:	9c07      	ldr	r4, [sp, #28]
 800e2c2:	9704      	str	r7, [sp, #16]
 800e2c4:	4625      	mov	r5, r4
 800e2c6:	e7f3      	b.n	800e2b0 <_dtoa_r+0x928>
 800e2c8:	9b07      	ldr	r3, [sp, #28]
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	f000 8104 	beq.w	800e4dc <_dtoa_r+0xb54>
 800e2d4:	2e00      	cmp	r6, #0
 800e2d6:	dd05      	ble.n	800e2e4 <_dtoa_r+0x95c>
 800e2d8:	4629      	mov	r1, r5
 800e2da:	4632      	mov	r2, r6
 800e2dc:	4658      	mov	r0, fp
 800e2de:	f000 fc25 	bl	800eb2c <__lshift>
 800e2e2:	4605      	mov	r5, r0
 800e2e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d05a      	beq.n	800e3a0 <_dtoa_r+0xa18>
 800e2ea:	6869      	ldr	r1, [r5, #4]
 800e2ec:	4658      	mov	r0, fp
 800e2ee:	f000 fa0f 	bl	800e710 <_Balloc>
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	b928      	cbnz	r0, 800e302 <_dtoa_r+0x97a>
 800e2f6:	4b84      	ldr	r3, [pc, #528]	@ (800e508 <_dtoa_r+0xb80>)
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e2fe:	f7ff bb5a 	b.w	800d9b6 <_dtoa_r+0x2e>
 800e302:	692a      	ldr	r2, [r5, #16]
 800e304:	3202      	adds	r2, #2
 800e306:	0092      	lsls	r2, r2, #2
 800e308:	f105 010c 	add.w	r1, r5, #12
 800e30c:	300c      	adds	r0, #12
 800e30e:	f7ff faa4 	bl	800d85a <memcpy>
 800e312:	2201      	movs	r2, #1
 800e314:	4631      	mov	r1, r6
 800e316:	4658      	mov	r0, fp
 800e318:	f000 fc08 	bl	800eb2c <__lshift>
 800e31c:	f10a 0301 	add.w	r3, sl, #1
 800e320:	9307      	str	r3, [sp, #28]
 800e322:	9b00      	ldr	r3, [sp, #0]
 800e324:	4453      	add	r3, sl
 800e326:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e328:	9b02      	ldr	r3, [sp, #8]
 800e32a:	f003 0301 	and.w	r3, r3, #1
 800e32e:	462f      	mov	r7, r5
 800e330:	930a      	str	r3, [sp, #40]	@ 0x28
 800e332:	4605      	mov	r5, r0
 800e334:	9b07      	ldr	r3, [sp, #28]
 800e336:	4621      	mov	r1, r4
 800e338:	3b01      	subs	r3, #1
 800e33a:	4648      	mov	r0, r9
 800e33c:	9300      	str	r3, [sp, #0]
 800e33e:	f7ff fa9a 	bl	800d876 <quorem>
 800e342:	4639      	mov	r1, r7
 800e344:	9002      	str	r0, [sp, #8]
 800e346:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e34a:	4648      	mov	r0, r9
 800e34c:	f000 fc5a 	bl	800ec04 <__mcmp>
 800e350:	462a      	mov	r2, r5
 800e352:	9008      	str	r0, [sp, #32]
 800e354:	4621      	mov	r1, r4
 800e356:	4658      	mov	r0, fp
 800e358:	f000 fc70 	bl	800ec3c <__mdiff>
 800e35c:	68c2      	ldr	r2, [r0, #12]
 800e35e:	4606      	mov	r6, r0
 800e360:	bb02      	cbnz	r2, 800e3a4 <_dtoa_r+0xa1c>
 800e362:	4601      	mov	r1, r0
 800e364:	4648      	mov	r0, r9
 800e366:	f000 fc4d 	bl	800ec04 <__mcmp>
 800e36a:	4602      	mov	r2, r0
 800e36c:	4631      	mov	r1, r6
 800e36e:	4658      	mov	r0, fp
 800e370:	920e      	str	r2, [sp, #56]	@ 0x38
 800e372:	f000 fa0d 	bl	800e790 <_Bfree>
 800e376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e378:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e37a:	9e07      	ldr	r6, [sp, #28]
 800e37c:	ea43 0102 	orr.w	r1, r3, r2
 800e380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e382:	4319      	orrs	r1, r3
 800e384:	d110      	bne.n	800e3a8 <_dtoa_r+0xa20>
 800e386:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e38a:	d029      	beq.n	800e3e0 <_dtoa_r+0xa58>
 800e38c:	9b08      	ldr	r3, [sp, #32]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	dd02      	ble.n	800e398 <_dtoa_r+0xa10>
 800e392:	9b02      	ldr	r3, [sp, #8]
 800e394:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e398:	9b00      	ldr	r3, [sp, #0]
 800e39a:	f883 8000 	strb.w	r8, [r3]
 800e39e:	e63f      	b.n	800e020 <_dtoa_r+0x698>
 800e3a0:	4628      	mov	r0, r5
 800e3a2:	e7bb      	b.n	800e31c <_dtoa_r+0x994>
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	e7e1      	b.n	800e36c <_dtoa_r+0x9e4>
 800e3a8:	9b08      	ldr	r3, [sp, #32]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	db04      	blt.n	800e3b8 <_dtoa_r+0xa30>
 800e3ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e3b0:	430b      	orrs	r3, r1
 800e3b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e3b4:	430b      	orrs	r3, r1
 800e3b6:	d120      	bne.n	800e3fa <_dtoa_r+0xa72>
 800e3b8:	2a00      	cmp	r2, #0
 800e3ba:	dded      	ble.n	800e398 <_dtoa_r+0xa10>
 800e3bc:	4649      	mov	r1, r9
 800e3be:	2201      	movs	r2, #1
 800e3c0:	4658      	mov	r0, fp
 800e3c2:	f000 fbb3 	bl	800eb2c <__lshift>
 800e3c6:	4621      	mov	r1, r4
 800e3c8:	4681      	mov	r9, r0
 800e3ca:	f000 fc1b 	bl	800ec04 <__mcmp>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	dc03      	bgt.n	800e3da <_dtoa_r+0xa52>
 800e3d2:	d1e1      	bne.n	800e398 <_dtoa_r+0xa10>
 800e3d4:	f018 0f01 	tst.w	r8, #1
 800e3d8:	d0de      	beq.n	800e398 <_dtoa_r+0xa10>
 800e3da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e3de:	d1d8      	bne.n	800e392 <_dtoa_r+0xa0a>
 800e3e0:	9a00      	ldr	r2, [sp, #0]
 800e3e2:	2339      	movs	r3, #57	@ 0x39
 800e3e4:	7013      	strb	r3, [r2, #0]
 800e3e6:	4633      	mov	r3, r6
 800e3e8:	461e      	mov	r6, r3
 800e3ea:	3b01      	subs	r3, #1
 800e3ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e3f0:	2a39      	cmp	r2, #57	@ 0x39
 800e3f2:	d052      	beq.n	800e49a <_dtoa_r+0xb12>
 800e3f4:	3201      	adds	r2, #1
 800e3f6:	701a      	strb	r2, [r3, #0]
 800e3f8:	e612      	b.n	800e020 <_dtoa_r+0x698>
 800e3fa:	2a00      	cmp	r2, #0
 800e3fc:	dd07      	ble.n	800e40e <_dtoa_r+0xa86>
 800e3fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e402:	d0ed      	beq.n	800e3e0 <_dtoa_r+0xa58>
 800e404:	9a00      	ldr	r2, [sp, #0]
 800e406:	f108 0301 	add.w	r3, r8, #1
 800e40a:	7013      	strb	r3, [r2, #0]
 800e40c:	e608      	b.n	800e020 <_dtoa_r+0x698>
 800e40e:	9b07      	ldr	r3, [sp, #28]
 800e410:	9a07      	ldr	r2, [sp, #28]
 800e412:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e418:	4293      	cmp	r3, r2
 800e41a:	d028      	beq.n	800e46e <_dtoa_r+0xae6>
 800e41c:	4649      	mov	r1, r9
 800e41e:	2300      	movs	r3, #0
 800e420:	220a      	movs	r2, #10
 800e422:	4658      	mov	r0, fp
 800e424:	f000 f9d6 	bl	800e7d4 <__multadd>
 800e428:	42af      	cmp	r7, r5
 800e42a:	4681      	mov	r9, r0
 800e42c:	f04f 0300 	mov.w	r3, #0
 800e430:	f04f 020a 	mov.w	r2, #10
 800e434:	4639      	mov	r1, r7
 800e436:	4658      	mov	r0, fp
 800e438:	d107      	bne.n	800e44a <_dtoa_r+0xac2>
 800e43a:	f000 f9cb 	bl	800e7d4 <__multadd>
 800e43e:	4607      	mov	r7, r0
 800e440:	4605      	mov	r5, r0
 800e442:	9b07      	ldr	r3, [sp, #28]
 800e444:	3301      	adds	r3, #1
 800e446:	9307      	str	r3, [sp, #28]
 800e448:	e774      	b.n	800e334 <_dtoa_r+0x9ac>
 800e44a:	f000 f9c3 	bl	800e7d4 <__multadd>
 800e44e:	4629      	mov	r1, r5
 800e450:	4607      	mov	r7, r0
 800e452:	2300      	movs	r3, #0
 800e454:	220a      	movs	r2, #10
 800e456:	4658      	mov	r0, fp
 800e458:	f000 f9bc 	bl	800e7d4 <__multadd>
 800e45c:	4605      	mov	r5, r0
 800e45e:	e7f0      	b.n	800e442 <_dtoa_r+0xaba>
 800e460:	9b00      	ldr	r3, [sp, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	bfcc      	ite	gt
 800e466:	461e      	movgt	r6, r3
 800e468:	2601      	movle	r6, #1
 800e46a:	4456      	add	r6, sl
 800e46c:	2700      	movs	r7, #0
 800e46e:	4649      	mov	r1, r9
 800e470:	2201      	movs	r2, #1
 800e472:	4658      	mov	r0, fp
 800e474:	f000 fb5a 	bl	800eb2c <__lshift>
 800e478:	4621      	mov	r1, r4
 800e47a:	4681      	mov	r9, r0
 800e47c:	f000 fbc2 	bl	800ec04 <__mcmp>
 800e480:	2800      	cmp	r0, #0
 800e482:	dcb0      	bgt.n	800e3e6 <_dtoa_r+0xa5e>
 800e484:	d102      	bne.n	800e48c <_dtoa_r+0xb04>
 800e486:	f018 0f01 	tst.w	r8, #1
 800e48a:	d1ac      	bne.n	800e3e6 <_dtoa_r+0xa5e>
 800e48c:	4633      	mov	r3, r6
 800e48e:	461e      	mov	r6, r3
 800e490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e494:	2a30      	cmp	r2, #48	@ 0x30
 800e496:	d0fa      	beq.n	800e48e <_dtoa_r+0xb06>
 800e498:	e5c2      	b.n	800e020 <_dtoa_r+0x698>
 800e49a:	459a      	cmp	sl, r3
 800e49c:	d1a4      	bne.n	800e3e8 <_dtoa_r+0xa60>
 800e49e:	9b04      	ldr	r3, [sp, #16]
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	9304      	str	r3, [sp, #16]
 800e4a4:	2331      	movs	r3, #49	@ 0x31
 800e4a6:	f88a 3000 	strb.w	r3, [sl]
 800e4aa:	e5b9      	b.n	800e020 <_dtoa_r+0x698>
 800e4ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e4ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e50c <_dtoa_r+0xb84>
 800e4b2:	b11b      	cbz	r3, 800e4bc <_dtoa_r+0xb34>
 800e4b4:	f10a 0308 	add.w	r3, sl, #8
 800e4b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e4ba:	6013      	str	r3, [r2, #0]
 800e4bc:	4650      	mov	r0, sl
 800e4be:	b019      	add	sp, #100	@ 0x64
 800e4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4c6:	2b01      	cmp	r3, #1
 800e4c8:	f77f ae37 	ble.w	800e13a <_dtoa_r+0x7b2>
 800e4cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4d0:	2001      	movs	r0, #1
 800e4d2:	e655      	b.n	800e180 <_dtoa_r+0x7f8>
 800e4d4:	9b00      	ldr	r3, [sp, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	f77f aed6 	ble.w	800e288 <_dtoa_r+0x900>
 800e4dc:	4656      	mov	r6, sl
 800e4de:	4621      	mov	r1, r4
 800e4e0:	4648      	mov	r0, r9
 800e4e2:	f7ff f9c8 	bl	800d876 <quorem>
 800e4e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e4ea:	f806 8b01 	strb.w	r8, [r6], #1
 800e4ee:	9b00      	ldr	r3, [sp, #0]
 800e4f0:	eba6 020a 	sub.w	r2, r6, sl
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	ddb3      	ble.n	800e460 <_dtoa_r+0xad8>
 800e4f8:	4649      	mov	r1, r9
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	220a      	movs	r2, #10
 800e4fe:	4658      	mov	r0, fp
 800e500:	f000 f968 	bl	800e7d4 <__multadd>
 800e504:	4681      	mov	r9, r0
 800e506:	e7ea      	b.n	800e4de <_dtoa_r+0xb56>
 800e508:	08011cce 	.word	0x08011cce
 800e50c:	08011c52 	.word	0x08011c52

0800e510 <_free_r>:
 800e510:	b538      	push	{r3, r4, r5, lr}
 800e512:	4605      	mov	r5, r0
 800e514:	2900      	cmp	r1, #0
 800e516:	d041      	beq.n	800e59c <_free_r+0x8c>
 800e518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e51c:	1f0c      	subs	r4, r1, #4
 800e51e:	2b00      	cmp	r3, #0
 800e520:	bfb8      	it	lt
 800e522:	18e4      	addlt	r4, r4, r3
 800e524:	f000 f8e8 	bl	800e6f8 <__malloc_lock>
 800e528:	4a1d      	ldr	r2, [pc, #116]	@ (800e5a0 <_free_r+0x90>)
 800e52a:	6813      	ldr	r3, [r2, #0]
 800e52c:	b933      	cbnz	r3, 800e53c <_free_r+0x2c>
 800e52e:	6063      	str	r3, [r4, #4]
 800e530:	6014      	str	r4, [r2, #0]
 800e532:	4628      	mov	r0, r5
 800e534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e538:	f000 b8e4 	b.w	800e704 <__malloc_unlock>
 800e53c:	42a3      	cmp	r3, r4
 800e53e:	d908      	bls.n	800e552 <_free_r+0x42>
 800e540:	6820      	ldr	r0, [r4, #0]
 800e542:	1821      	adds	r1, r4, r0
 800e544:	428b      	cmp	r3, r1
 800e546:	bf01      	itttt	eq
 800e548:	6819      	ldreq	r1, [r3, #0]
 800e54a:	685b      	ldreq	r3, [r3, #4]
 800e54c:	1809      	addeq	r1, r1, r0
 800e54e:	6021      	streq	r1, [r4, #0]
 800e550:	e7ed      	b.n	800e52e <_free_r+0x1e>
 800e552:	461a      	mov	r2, r3
 800e554:	685b      	ldr	r3, [r3, #4]
 800e556:	b10b      	cbz	r3, 800e55c <_free_r+0x4c>
 800e558:	42a3      	cmp	r3, r4
 800e55a:	d9fa      	bls.n	800e552 <_free_r+0x42>
 800e55c:	6811      	ldr	r1, [r2, #0]
 800e55e:	1850      	adds	r0, r2, r1
 800e560:	42a0      	cmp	r0, r4
 800e562:	d10b      	bne.n	800e57c <_free_r+0x6c>
 800e564:	6820      	ldr	r0, [r4, #0]
 800e566:	4401      	add	r1, r0
 800e568:	1850      	adds	r0, r2, r1
 800e56a:	4283      	cmp	r3, r0
 800e56c:	6011      	str	r1, [r2, #0]
 800e56e:	d1e0      	bne.n	800e532 <_free_r+0x22>
 800e570:	6818      	ldr	r0, [r3, #0]
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	6053      	str	r3, [r2, #4]
 800e576:	4408      	add	r0, r1
 800e578:	6010      	str	r0, [r2, #0]
 800e57a:	e7da      	b.n	800e532 <_free_r+0x22>
 800e57c:	d902      	bls.n	800e584 <_free_r+0x74>
 800e57e:	230c      	movs	r3, #12
 800e580:	602b      	str	r3, [r5, #0]
 800e582:	e7d6      	b.n	800e532 <_free_r+0x22>
 800e584:	6820      	ldr	r0, [r4, #0]
 800e586:	1821      	adds	r1, r4, r0
 800e588:	428b      	cmp	r3, r1
 800e58a:	bf04      	itt	eq
 800e58c:	6819      	ldreq	r1, [r3, #0]
 800e58e:	685b      	ldreq	r3, [r3, #4]
 800e590:	6063      	str	r3, [r4, #4]
 800e592:	bf04      	itt	eq
 800e594:	1809      	addeq	r1, r1, r0
 800e596:	6021      	streq	r1, [r4, #0]
 800e598:	6054      	str	r4, [r2, #4]
 800e59a:	e7ca      	b.n	800e532 <_free_r+0x22>
 800e59c:	bd38      	pop	{r3, r4, r5, pc}
 800e59e:	bf00      	nop
 800e5a0:	20004680 	.word	0x20004680

0800e5a4 <malloc>:
 800e5a4:	4b02      	ldr	r3, [pc, #8]	@ (800e5b0 <malloc+0xc>)
 800e5a6:	4601      	mov	r1, r0
 800e5a8:	6818      	ldr	r0, [r3, #0]
 800e5aa:	f000 b825 	b.w	800e5f8 <_malloc_r>
 800e5ae:	bf00      	nop
 800e5b0:	20000064 	.word	0x20000064

0800e5b4 <sbrk_aligned>:
 800e5b4:	b570      	push	{r4, r5, r6, lr}
 800e5b6:	4e0f      	ldr	r6, [pc, #60]	@ (800e5f4 <sbrk_aligned+0x40>)
 800e5b8:	460c      	mov	r4, r1
 800e5ba:	6831      	ldr	r1, [r6, #0]
 800e5bc:	4605      	mov	r5, r0
 800e5be:	b911      	cbnz	r1, 800e5c6 <sbrk_aligned+0x12>
 800e5c0:	f000 fe9a 	bl	800f2f8 <_sbrk_r>
 800e5c4:	6030      	str	r0, [r6, #0]
 800e5c6:	4621      	mov	r1, r4
 800e5c8:	4628      	mov	r0, r5
 800e5ca:	f000 fe95 	bl	800f2f8 <_sbrk_r>
 800e5ce:	1c43      	adds	r3, r0, #1
 800e5d0:	d103      	bne.n	800e5da <sbrk_aligned+0x26>
 800e5d2:	f04f 34ff 	mov.w	r4, #4294967295
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	bd70      	pop	{r4, r5, r6, pc}
 800e5da:	1cc4      	adds	r4, r0, #3
 800e5dc:	f024 0403 	bic.w	r4, r4, #3
 800e5e0:	42a0      	cmp	r0, r4
 800e5e2:	d0f8      	beq.n	800e5d6 <sbrk_aligned+0x22>
 800e5e4:	1a21      	subs	r1, r4, r0
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	f000 fe86 	bl	800f2f8 <_sbrk_r>
 800e5ec:	3001      	adds	r0, #1
 800e5ee:	d1f2      	bne.n	800e5d6 <sbrk_aligned+0x22>
 800e5f0:	e7ef      	b.n	800e5d2 <sbrk_aligned+0x1e>
 800e5f2:	bf00      	nop
 800e5f4:	2000467c 	.word	0x2000467c

0800e5f8 <_malloc_r>:
 800e5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5fc:	1ccd      	adds	r5, r1, #3
 800e5fe:	f025 0503 	bic.w	r5, r5, #3
 800e602:	3508      	adds	r5, #8
 800e604:	2d0c      	cmp	r5, #12
 800e606:	bf38      	it	cc
 800e608:	250c      	movcc	r5, #12
 800e60a:	2d00      	cmp	r5, #0
 800e60c:	4606      	mov	r6, r0
 800e60e:	db01      	blt.n	800e614 <_malloc_r+0x1c>
 800e610:	42a9      	cmp	r1, r5
 800e612:	d904      	bls.n	800e61e <_malloc_r+0x26>
 800e614:	230c      	movs	r3, #12
 800e616:	6033      	str	r3, [r6, #0]
 800e618:	2000      	movs	r0, #0
 800e61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e61e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e6f4 <_malloc_r+0xfc>
 800e622:	f000 f869 	bl	800e6f8 <__malloc_lock>
 800e626:	f8d8 3000 	ldr.w	r3, [r8]
 800e62a:	461c      	mov	r4, r3
 800e62c:	bb44      	cbnz	r4, 800e680 <_malloc_r+0x88>
 800e62e:	4629      	mov	r1, r5
 800e630:	4630      	mov	r0, r6
 800e632:	f7ff ffbf 	bl	800e5b4 <sbrk_aligned>
 800e636:	1c43      	adds	r3, r0, #1
 800e638:	4604      	mov	r4, r0
 800e63a:	d158      	bne.n	800e6ee <_malloc_r+0xf6>
 800e63c:	f8d8 4000 	ldr.w	r4, [r8]
 800e640:	4627      	mov	r7, r4
 800e642:	2f00      	cmp	r7, #0
 800e644:	d143      	bne.n	800e6ce <_malloc_r+0xd6>
 800e646:	2c00      	cmp	r4, #0
 800e648:	d04b      	beq.n	800e6e2 <_malloc_r+0xea>
 800e64a:	6823      	ldr	r3, [r4, #0]
 800e64c:	4639      	mov	r1, r7
 800e64e:	4630      	mov	r0, r6
 800e650:	eb04 0903 	add.w	r9, r4, r3
 800e654:	f000 fe50 	bl	800f2f8 <_sbrk_r>
 800e658:	4581      	cmp	r9, r0
 800e65a:	d142      	bne.n	800e6e2 <_malloc_r+0xea>
 800e65c:	6821      	ldr	r1, [r4, #0]
 800e65e:	1a6d      	subs	r5, r5, r1
 800e660:	4629      	mov	r1, r5
 800e662:	4630      	mov	r0, r6
 800e664:	f7ff ffa6 	bl	800e5b4 <sbrk_aligned>
 800e668:	3001      	adds	r0, #1
 800e66a:	d03a      	beq.n	800e6e2 <_malloc_r+0xea>
 800e66c:	6823      	ldr	r3, [r4, #0]
 800e66e:	442b      	add	r3, r5
 800e670:	6023      	str	r3, [r4, #0]
 800e672:	f8d8 3000 	ldr.w	r3, [r8]
 800e676:	685a      	ldr	r2, [r3, #4]
 800e678:	bb62      	cbnz	r2, 800e6d4 <_malloc_r+0xdc>
 800e67a:	f8c8 7000 	str.w	r7, [r8]
 800e67e:	e00f      	b.n	800e6a0 <_malloc_r+0xa8>
 800e680:	6822      	ldr	r2, [r4, #0]
 800e682:	1b52      	subs	r2, r2, r5
 800e684:	d420      	bmi.n	800e6c8 <_malloc_r+0xd0>
 800e686:	2a0b      	cmp	r2, #11
 800e688:	d917      	bls.n	800e6ba <_malloc_r+0xc2>
 800e68a:	1961      	adds	r1, r4, r5
 800e68c:	42a3      	cmp	r3, r4
 800e68e:	6025      	str	r5, [r4, #0]
 800e690:	bf18      	it	ne
 800e692:	6059      	strne	r1, [r3, #4]
 800e694:	6863      	ldr	r3, [r4, #4]
 800e696:	bf08      	it	eq
 800e698:	f8c8 1000 	streq.w	r1, [r8]
 800e69c:	5162      	str	r2, [r4, r5]
 800e69e:	604b      	str	r3, [r1, #4]
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	f000 f82f 	bl	800e704 <__malloc_unlock>
 800e6a6:	f104 000b 	add.w	r0, r4, #11
 800e6aa:	1d23      	adds	r3, r4, #4
 800e6ac:	f020 0007 	bic.w	r0, r0, #7
 800e6b0:	1ac2      	subs	r2, r0, r3
 800e6b2:	bf1c      	itt	ne
 800e6b4:	1a1b      	subne	r3, r3, r0
 800e6b6:	50a3      	strne	r3, [r4, r2]
 800e6b8:	e7af      	b.n	800e61a <_malloc_r+0x22>
 800e6ba:	6862      	ldr	r2, [r4, #4]
 800e6bc:	42a3      	cmp	r3, r4
 800e6be:	bf0c      	ite	eq
 800e6c0:	f8c8 2000 	streq.w	r2, [r8]
 800e6c4:	605a      	strne	r2, [r3, #4]
 800e6c6:	e7eb      	b.n	800e6a0 <_malloc_r+0xa8>
 800e6c8:	4623      	mov	r3, r4
 800e6ca:	6864      	ldr	r4, [r4, #4]
 800e6cc:	e7ae      	b.n	800e62c <_malloc_r+0x34>
 800e6ce:	463c      	mov	r4, r7
 800e6d0:	687f      	ldr	r7, [r7, #4]
 800e6d2:	e7b6      	b.n	800e642 <_malloc_r+0x4a>
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	42a3      	cmp	r3, r4
 800e6da:	d1fb      	bne.n	800e6d4 <_malloc_r+0xdc>
 800e6dc:	2300      	movs	r3, #0
 800e6de:	6053      	str	r3, [r2, #4]
 800e6e0:	e7de      	b.n	800e6a0 <_malloc_r+0xa8>
 800e6e2:	230c      	movs	r3, #12
 800e6e4:	6033      	str	r3, [r6, #0]
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	f000 f80c 	bl	800e704 <__malloc_unlock>
 800e6ec:	e794      	b.n	800e618 <_malloc_r+0x20>
 800e6ee:	6005      	str	r5, [r0, #0]
 800e6f0:	e7d6      	b.n	800e6a0 <_malloc_r+0xa8>
 800e6f2:	bf00      	nop
 800e6f4:	20004680 	.word	0x20004680

0800e6f8 <__malloc_lock>:
 800e6f8:	4801      	ldr	r0, [pc, #4]	@ (800e700 <__malloc_lock+0x8>)
 800e6fa:	f7ff b8ac 	b.w	800d856 <__retarget_lock_acquire_recursive>
 800e6fe:	bf00      	nop
 800e700:	20004678 	.word	0x20004678

0800e704 <__malloc_unlock>:
 800e704:	4801      	ldr	r0, [pc, #4]	@ (800e70c <__malloc_unlock+0x8>)
 800e706:	f7ff b8a7 	b.w	800d858 <__retarget_lock_release_recursive>
 800e70a:	bf00      	nop
 800e70c:	20004678 	.word	0x20004678

0800e710 <_Balloc>:
 800e710:	b570      	push	{r4, r5, r6, lr}
 800e712:	69c6      	ldr	r6, [r0, #28]
 800e714:	4604      	mov	r4, r0
 800e716:	460d      	mov	r5, r1
 800e718:	b976      	cbnz	r6, 800e738 <_Balloc+0x28>
 800e71a:	2010      	movs	r0, #16
 800e71c:	f7ff ff42 	bl	800e5a4 <malloc>
 800e720:	4602      	mov	r2, r0
 800e722:	61e0      	str	r0, [r4, #28]
 800e724:	b920      	cbnz	r0, 800e730 <_Balloc+0x20>
 800e726:	4b18      	ldr	r3, [pc, #96]	@ (800e788 <_Balloc+0x78>)
 800e728:	4818      	ldr	r0, [pc, #96]	@ (800e78c <_Balloc+0x7c>)
 800e72a:	216b      	movs	r1, #107	@ 0x6b
 800e72c:	f000 fdf4 	bl	800f318 <__assert_func>
 800e730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e734:	6006      	str	r6, [r0, #0]
 800e736:	60c6      	str	r6, [r0, #12]
 800e738:	69e6      	ldr	r6, [r4, #28]
 800e73a:	68f3      	ldr	r3, [r6, #12]
 800e73c:	b183      	cbz	r3, 800e760 <_Balloc+0x50>
 800e73e:	69e3      	ldr	r3, [r4, #28]
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e746:	b9b8      	cbnz	r0, 800e778 <_Balloc+0x68>
 800e748:	2101      	movs	r1, #1
 800e74a:	fa01 f605 	lsl.w	r6, r1, r5
 800e74e:	1d72      	adds	r2, r6, #5
 800e750:	0092      	lsls	r2, r2, #2
 800e752:	4620      	mov	r0, r4
 800e754:	f000 fdfe 	bl	800f354 <_calloc_r>
 800e758:	b160      	cbz	r0, 800e774 <_Balloc+0x64>
 800e75a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e75e:	e00e      	b.n	800e77e <_Balloc+0x6e>
 800e760:	2221      	movs	r2, #33	@ 0x21
 800e762:	2104      	movs	r1, #4
 800e764:	4620      	mov	r0, r4
 800e766:	f000 fdf5 	bl	800f354 <_calloc_r>
 800e76a:	69e3      	ldr	r3, [r4, #28]
 800e76c:	60f0      	str	r0, [r6, #12]
 800e76e:	68db      	ldr	r3, [r3, #12]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1e4      	bne.n	800e73e <_Balloc+0x2e>
 800e774:	2000      	movs	r0, #0
 800e776:	bd70      	pop	{r4, r5, r6, pc}
 800e778:	6802      	ldr	r2, [r0, #0]
 800e77a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e77e:	2300      	movs	r3, #0
 800e780:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e784:	e7f7      	b.n	800e776 <_Balloc+0x66>
 800e786:	bf00      	nop
 800e788:	08011c5f 	.word	0x08011c5f
 800e78c:	08011cdf 	.word	0x08011cdf

0800e790 <_Bfree>:
 800e790:	b570      	push	{r4, r5, r6, lr}
 800e792:	69c6      	ldr	r6, [r0, #28]
 800e794:	4605      	mov	r5, r0
 800e796:	460c      	mov	r4, r1
 800e798:	b976      	cbnz	r6, 800e7b8 <_Bfree+0x28>
 800e79a:	2010      	movs	r0, #16
 800e79c:	f7ff ff02 	bl	800e5a4 <malloc>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	61e8      	str	r0, [r5, #28]
 800e7a4:	b920      	cbnz	r0, 800e7b0 <_Bfree+0x20>
 800e7a6:	4b09      	ldr	r3, [pc, #36]	@ (800e7cc <_Bfree+0x3c>)
 800e7a8:	4809      	ldr	r0, [pc, #36]	@ (800e7d0 <_Bfree+0x40>)
 800e7aa:	218f      	movs	r1, #143	@ 0x8f
 800e7ac:	f000 fdb4 	bl	800f318 <__assert_func>
 800e7b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7b4:	6006      	str	r6, [r0, #0]
 800e7b6:	60c6      	str	r6, [r0, #12]
 800e7b8:	b13c      	cbz	r4, 800e7ca <_Bfree+0x3a>
 800e7ba:	69eb      	ldr	r3, [r5, #28]
 800e7bc:	6862      	ldr	r2, [r4, #4]
 800e7be:	68db      	ldr	r3, [r3, #12]
 800e7c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e7c4:	6021      	str	r1, [r4, #0]
 800e7c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e7ca:	bd70      	pop	{r4, r5, r6, pc}
 800e7cc:	08011c5f 	.word	0x08011c5f
 800e7d0:	08011cdf 	.word	0x08011cdf

0800e7d4 <__multadd>:
 800e7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d8:	690d      	ldr	r5, [r1, #16]
 800e7da:	4607      	mov	r7, r0
 800e7dc:	460c      	mov	r4, r1
 800e7de:	461e      	mov	r6, r3
 800e7e0:	f101 0c14 	add.w	ip, r1, #20
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	f8dc 3000 	ldr.w	r3, [ip]
 800e7ea:	b299      	uxth	r1, r3
 800e7ec:	fb02 6101 	mla	r1, r2, r1, r6
 800e7f0:	0c1e      	lsrs	r6, r3, #16
 800e7f2:	0c0b      	lsrs	r3, r1, #16
 800e7f4:	fb02 3306 	mla	r3, r2, r6, r3
 800e7f8:	b289      	uxth	r1, r1
 800e7fa:	3001      	adds	r0, #1
 800e7fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e800:	4285      	cmp	r5, r0
 800e802:	f84c 1b04 	str.w	r1, [ip], #4
 800e806:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e80a:	dcec      	bgt.n	800e7e6 <__multadd+0x12>
 800e80c:	b30e      	cbz	r6, 800e852 <__multadd+0x7e>
 800e80e:	68a3      	ldr	r3, [r4, #8]
 800e810:	42ab      	cmp	r3, r5
 800e812:	dc19      	bgt.n	800e848 <__multadd+0x74>
 800e814:	6861      	ldr	r1, [r4, #4]
 800e816:	4638      	mov	r0, r7
 800e818:	3101      	adds	r1, #1
 800e81a:	f7ff ff79 	bl	800e710 <_Balloc>
 800e81e:	4680      	mov	r8, r0
 800e820:	b928      	cbnz	r0, 800e82e <__multadd+0x5a>
 800e822:	4602      	mov	r2, r0
 800e824:	4b0c      	ldr	r3, [pc, #48]	@ (800e858 <__multadd+0x84>)
 800e826:	480d      	ldr	r0, [pc, #52]	@ (800e85c <__multadd+0x88>)
 800e828:	21ba      	movs	r1, #186	@ 0xba
 800e82a:	f000 fd75 	bl	800f318 <__assert_func>
 800e82e:	6922      	ldr	r2, [r4, #16]
 800e830:	3202      	adds	r2, #2
 800e832:	f104 010c 	add.w	r1, r4, #12
 800e836:	0092      	lsls	r2, r2, #2
 800e838:	300c      	adds	r0, #12
 800e83a:	f7ff f80e 	bl	800d85a <memcpy>
 800e83e:	4621      	mov	r1, r4
 800e840:	4638      	mov	r0, r7
 800e842:	f7ff ffa5 	bl	800e790 <_Bfree>
 800e846:	4644      	mov	r4, r8
 800e848:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e84c:	3501      	adds	r5, #1
 800e84e:	615e      	str	r6, [r3, #20]
 800e850:	6125      	str	r5, [r4, #16]
 800e852:	4620      	mov	r0, r4
 800e854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e858:	08011cce 	.word	0x08011cce
 800e85c:	08011cdf 	.word	0x08011cdf

0800e860 <__hi0bits>:
 800e860:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e864:	4603      	mov	r3, r0
 800e866:	bf36      	itet	cc
 800e868:	0403      	lslcc	r3, r0, #16
 800e86a:	2000      	movcs	r0, #0
 800e86c:	2010      	movcc	r0, #16
 800e86e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e872:	bf3c      	itt	cc
 800e874:	021b      	lslcc	r3, r3, #8
 800e876:	3008      	addcc	r0, #8
 800e878:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e87c:	bf3c      	itt	cc
 800e87e:	011b      	lslcc	r3, r3, #4
 800e880:	3004      	addcc	r0, #4
 800e882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e886:	bf3c      	itt	cc
 800e888:	009b      	lslcc	r3, r3, #2
 800e88a:	3002      	addcc	r0, #2
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	db05      	blt.n	800e89c <__hi0bits+0x3c>
 800e890:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e894:	f100 0001 	add.w	r0, r0, #1
 800e898:	bf08      	it	eq
 800e89a:	2020      	moveq	r0, #32
 800e89c:	4770      	bx	lr

0800e89e <__lo0bits>:
 800e89e:	6803      	ldr	r3, [r0, #0]
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	f013 0007 	ands.w	r0, r3, #7
 800e8a6:	d00b      	beq.n	800e8c0 <__lo0bits+0x22>
 800e8a8:	07d9      	lsls	r1, r3, #31
 800e8aa:	d421      	bmi.n	800e8f0 <__lo0bits+0x52>
 800e8ac:	0798      	lsls	r0, r3, #30
 800e8ae:	bf49      	itett	mi
 800e8b0:	085b      	lsrmi	r3, r3, #1
 800e8b2:	089b      	lsrpl	r3, r3, #2
 800e8b4:	2001      	movmi	r0, #1
 800e8b6:	6013      	strmi	r3, [r2, #0]
 800e8b8:	bf5c      	itt	pl
 800e8ba:	6013      	strpl	r3, [r2, #0]
 800e8bc:	2002      	movpl	r0, #2
 800e8be:	4770      	bx	lr
 800e8c0:	b299      	uxth	r1, r3
 800e8c2:	b909      	cbnz	r1, 800e8c8 <__lo0bits+0x2a>
 800e8c4:	0c1b      	lsrs	r3, r3, #16
 800e8c6:	2010      	movs	r0, #16
 800e8c8:	b2d9      	uxtb	r1, r3
 800e8ca:	b909      	cbnz	r1, 800e8d0 <__lo0bits+0x32>
 800e8cc:	3008      	adds	r0, #8
 800e8ce:	0a1b      	lsrs	r3, r3, #8
 800e8d0:	0719      	lsls	r1, r3, #28
 800e8d2:	bf04      	itt	eq
 800e8d4:	091b      	lsreq	r3, r3, #4
 800e8d6:	3004      	addeq	r0, #4
 800e8d8:	0799      	lsls	r1, r3, #30
 800e8da:	bf04      	itt	eq
 800e8dc:	089b      	lsreq	r3, r3, #2
 800e8de:	3002      	addeq	r0, #2
 800e8e0:	07d9      	lsls	r1, r3, #31
 800e8e2:	d403      	bmi.n	800e8ec <__lo0bits+0x4e>
 800e8e4:	085b      	lsrs	r3, r3, #1
 800e8e6:	f100 0001 	add.w	r0, r0, #1
 800e8ea:	d003      	beq.n	800e8f4 <__lo0bits+0x56>
 800e8ec:	6013      	str	r3, [r2, #0]
 800e8ee:	4770      	bx	lr
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	4770      	bx	lr
 800e8f4:	2020      	movs	r0, #32
 800e8f6:	4770      	bx	lr

0800e8f8 <__i2b>:
 800e8f8:	b510      	push	{r4, lr}
 800e8fa:	460c      	mov	r4, r1
 800e8fc:	2101      	movs	r1, #1
 800e8fe:	f7ff ff07 	bl	800e710 <_Balloc>
 800e902:	4602      	mov	r2, r0
 800e904:	b928      	cbnz	r0, 800e912 <__i2b+0x1a>
 800e906:	4b05      	ldr	r3, [pc, #20]	@ (800e91c <__i2b+0x24>)
 800e908:	4805      	ldr	r0, [pc, #20]	@ (800e920 <__i2b+0x28>)
 800e90a:	f240 1145 	movw	r1, #325	@ 0x145
 800e90e:	f000 fd03 	bl	800f318 <__assert_func>
 800e912:	2301      	movs	r3, #1
 800e914:	6144      	str	r4, [r0, #20]
 800e916:	6103      	str	r3, [r0, #16]
 800e918:	bd10      	pop	{r4, pc}
 800e91a:	bf00      	nop
 800e91c:	08011cce 	.word	0x08011cce
 800e920:	08011cdf 	.word	0x08011cdf

0800e924 <__multiply>:
 800e924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e928:	4614      	mov	r4, r2
 800e92a:	690a      	ldr	r2, [r1, #16]
 800e92c:	6923      	ldr	r3, [r4, #16]
 800e92e:	429a      	cmp	r2, r3
 800e930:	bfa8      	it	ge
 800e932:	4623      	movge	r3, r4
 800e934:	460f      	mov	r7, r1
 800e936:	bfa4      	itt	ge
 800e938:	460c      	movge	r4, r1
 800e93a:	461f      	movge	r7, r3
 800e93c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e940:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e944:	68a3      	ldr	r3, [r4, #8]
 800e946:	6861      	ldr	r1, [r4, #4]
 800e948:	eb0a 0609 	add.w	r6, sl, r9
 800e94c:	42b3      	cmp	r3, r6
 800e94e:	b085      	sub	sp, #20
 800e950:	bfb8      	it	lt
 800e952:	3101      	addlt	r1, #1
 800e954:	f7ff fedc 	bl	800e710 <_Balloc>
 800e958:	b930      	cbnz	r0, 800e968 <__multiply+0x44>
 800e95a:	4602      	mov	r2, r0
 800e95c:	4b44      	ldr	r3, [pc, #272]	@ (800ea70 <__multiply+0x14c>)
 800e95e:	4845      	ldr	r0, [pc, #276]	@ (800ea74 <__multiply+0x150>)
 800e960:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e964:	f000 fcd8 	bl	800f318 <__assert_func>
 800e968:	f100 0514 	add.w	r5, r0, #20
 800e96c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e970:	462b      	mov	r3, r5
 800e972:	2200      	movs	r2, #0
 800e974:	4543      	cmp	r3, r8
 800e976:	d321      	bcc.n	800e9bc <__multiply+0x98>
 800e978:	f107 0114 	add.w	r1, r7, #20
 800e97c:	f104 0214 	add.w	r2, r4, #20
 800e980:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e984:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e988:	9302      	str	r3, [sp, #8]
 800e98a:	1b13      	subs	r3, r2, r4
 800e98c:	3b15      	subs	r3, #21
 800e98e:	f023 0303 	bic.w	r3, r3, #3
 800e992:	3304      	adds	r3, #4
 800e994:	f104 0715 	add.w	r7, r4, #21
 800e998:	42ba      	cmp	r2, r7
 800e99a:	bf38      	it	cc
 800e99c:	2304      	movcc	r3, #4
 800e99e:	9301      	str	r3, [sp, #4]
 800e9a0:	9b02      	ldr	r3, [sp, #8]
 800e9a2:	9103      	str	r1, [sp, #12]
 800e9a4:	428b      	cmp	r3, r1
 800e9a6:	d80c      	bhi.n	800e9c2 <__multiply+0x9e>
 800e9a8:	2e00      	cmp	r6, #0
 800e9aa:	dd03      	ble.n	800e9b4 <__multiply+0x90>
 800e9ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d05b      	beq.n	800ea6c <__multiply+0x148>
 800e9b4:	6106      	str	r6, [r0, #16]
 800e9b6:	b005      	add	sp, #20
 800e9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9bc:	f843 2b04 	str.w	r2, [r3], #4
 800e9c0:	e7d8      	b.n	800e974 <__multiply+0x50>
 800e9c2:	f8b1 a000 	ldrh.w	sl, [r1]
 800e9c6:	f1ba 0f00 	cmp.w	sl, #0
 800e9ca:	d024      	beq.n	800ea16 <__multiply+0xf2>
 800e9cc:	f104 0e14 	add.w	lr, r4, #20
 800e9d0:	46a9      	mov	r9, r5
 800e9d2:	f04f 0c00 	mov.w	ip, #0
 800e9d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e9da:	f8d9 3000 	ldr.w	r3, [r9]
 800e9de:	fa1f fb87 	uxth.w	fp, r7
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	fb0a 330b 	mla	r3, sl, fp, r3
 800e9e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e9ec:	f8d9 7000 	ldr.w	r7, [r9]
 800e9f0:	4463      	add	r3, ip
 800e9f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e9f6:	fb0a c70b 	mla	r7, sl, fp, ip
 800e9fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ea04:	4572      	cmp	r2, lr
 800ea06:	f849 3b04 	str.w	r3, [r9], #4
 800ea0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ea0e:	d8e2      	bhi.n	800e9d6 <__multiply+0xb2>
 800ea10:	9b01      	ldr	r3, [sp, #4]
 800ea12:	f845 c003 	str.w	ip, [r5, r3]
 800ea16:	9b03      	ldr	r3, [sp, #12]
 800ea18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ea1c:	3104      	adds	r1, #4
 800ea1e:	f1b9 0f00 	cmp.w	r9, #0
 800ea22:	d021      	beq.n	800ea68 <__multiply+0x144>
 800ea24:	682b      	ldr	r3, [r5, #0]
 800ea26:	f104 0c14 	add.w	ip, r4, #20
 800ea2a:	46ae      	mov	lr, r5
 800ea2c:	f04f 0a00 	mov.w	sl, #0
 800ea30:	f8bc b000 	ldrh.w	fp, [ip]
 800ea34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ea38:	fb09 770b 	mla	r7, r9, fp, r7
 800ea3c:	4457      	add	r7, sl
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ea44:	f84e 3b04 	str.w	r3, [lr], #4
 800ea48:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ea4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea50:	f8be 3000 	ldrh.w	r3, [lr]
 800ea54:	fb09 330a 	mla	r3, r9, sl, r3
 800ea58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ea5c:	4562      	cmp	r2, ip
 800ea5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea62:	d8e5      	bhi.n	800ea30 <__multiply+0x10c>
 800ea64:	9f01      	ldr	r7, [sp, #4]
 800ea66:	51eb      	str	r3, [r5, r7]
 800ea68:	3504      	adds	r5, #4
 800ea6a:	e799      	b.n	800e9a0 <__multiply+0x7c>
 800ea6c:	3e01      	subs	r6, #1
 800ea6e:	e79b      	b.n	800e9a8 <__multiply+0x84>
 800ea70:	08011cce 	.word	0x08011cce
 800ea74:	08011cdf 	.word	0x08011cdf

0800ea78 <__pow5mult>:
 800ea78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea7c:	4615      	mov	r5, r2
 800ea7e:	f012 0203 	ands.w	r2, r2, #3
 800ea82:	4607      	mov	r7, r0
 800ea84:	460e      	mov	r6, r1
 800ea86:	d007      	beq.n	800ea98 <__pow5mult+0x20>
 800ea88:	4c25      	ldr	r4, [pc, #148]	@ (800eb20 <__pow5mult+0xa8>)
 800ea8a:	3a01      	subs	r2, #1
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ea92:	f7ff fe9f 	bl	800e7d4 <__multadd>
 800ea96:	4606      	mov	r6, r0
 800ea98:	10ad      	asrs	r5, r5, #2
 800ea9a:	d03d      	beq.n	800eb18 <__pow5mult+0xa0>
 800ea9c:	69fc      	ldr	r4, [r7, #28]
 800ea9e:	b97c      	cbnz	r4, 800eac0 <__pow5mult+0x48>
 800eaa0:	2010      	movs	r0, #16
 800eaa2:	f7ff fd7f 	bl	800e5a4 <malloc>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	61f8      	str	r0, [r7, #28]
 800eaaa:	b928      	cbnz	r0, 800eab8 <__pow5mult+0x40>
 800eaac:	4b1d      	ldr	r3, [pc, #116]	@ (800eb24 <__pow5mult+0xac>)
 800eaae:	481e      	ldr	r0, [pc, #120]	@ (800eb28 <__pow5mult+0xb0>)
 800eab0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800eab4:	f000 fc30 	bl	800f318 <__assert_func>
 800eab8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eabc:	6004      	str	r4, [r0, #0]
 800eabe:	60c4      	str	r4, [r0, #12]
 800eac0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800eac4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eac8:	b94c      	cbnz	r4, 800eade <__pow5mult+0x66>
 800eaca:	f240 2171 	movw	r1, #625	@ 0x271
 800eace:	4638      	mov	r0, r7
 800ead0:	f7ff ff12 	bl	800e8f8 <__i2b>
 800ead4:	2300      	movs	r3, #0
 800ead6:	f8c8 0008 	str.w	r0, [r8, #8]
 800eada:	4604      	mov	r4, r0
 800eadc:	6003      	str	r3, [r0, #0]
 800eade:	f04f 0900 	mov.w	r9, #0
 800eae2:	07eb      	lsls	r3, r5, #31
 800eae4:	d50a      	bpl.n	800eafc <__pow5mult+0x84>
 800eae6:	4631      	mov	r1, r6
 800eae8:	4622      	mov	r2, r4
 800eaea:	4638      	mov	r0, r7
 800eaec:	f7ff ff1a 	bl	800e924 <__multiply>
 800eaf0:	4631      	mov	r1, r6
 800eaf2:	4680      	mov	r8, r0
 800eaf4:	4638      	mov	r0, r7
 800eaf6:	f7ff fe4b 	bl	800e790 <_Bfree>
 800eafa:	4646      	mov	r6, r8
 800eafc:	106d      	asrs	r5, r5, #1
 800eafe:	d00b      	beq.n	800eb18 <__pow5mult+0xa0>
 800eb00:	6820      	ldr	r0, [r4, #0]
 800eb02:	b938      	cbnz	r0, 800eb14 <__pow5mult+0x9c>
 800eb04:	4622      	mov	r2, r4
 800eb06:	4621      	mov	r1, r4
 800eb08:	4638      	mov	r0, r7
 800eb0a:	f7ff ff0b 	bl	800e924 <__multiply>
 800eb0e:	6020      	str	r0, [r4, #0]
 800eb10:	f8c0 9000 	str.w	r9, [r0]
 800eb14:	4604      	mov	r4, r0
 800eb16:	e7e4      	b.n	800eae2 <__pow5mult+0x6a>
 800eb18:	4630      	mov	r0, r6
 800eb1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb1e:	bf00      	nop
 800eb20:	08011d38 	.word	0x08011d38
 800eb24:	08011c5f 	.word	0x08011c5f
 800eb28:	08011cdf 	.word	0x08011cdf

0800eb2c <__lshift>:
 800eb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb30:	460c      	mov	r4, r1
 800eb32:	6849      	ldr	r1, [r1, #4]
 800eb34:	6923      	ldr	r3, [r4, #16]
 800eb36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eb3a:	68a3      	ldr	r3, [r4, #8]
 800eb3c:	4607      	mov	r7, r0
 800eb3e:	4691      	mov	r9, r2
 800eb40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eb44:	f108 0601 	add.w	r6, r8, #1
 800eb48:	42b3      	cmp	r3, r6
 800eb4a:	db0b      	blt.n	800eb64 <__lshift+0x38>
 800eb4c:	4638      	mov	r0, r7
 800eb4e:	f7ff fddf 	bl	800e710 <_Balloc>
 800eb52:	4605      	mov	r5, r0
 800eb54:	b948      	cbnz	r0, 800eb6a <__lshift+0x3e>
 800eb56:	4602      	mov	r2, r0
 800eb58:	4b28      	ldr	r3, [pc, #160]	@ (800ebfc <__lshift+0xd0>)
 800eb5a:	4829      	ldr	r0, [pc, #164]	@ (800ec00 <__lshift+0xd4>)
 800eb5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eb60:	f000 fbda 	bl	800f318 <__assert_func>
 800eb64:	3101      	adds	r1, #1
 800eb66:	005b      	lsls	r3, r3, #1
 800eb68:	e7ee      	b.n	800eb48 <__lshift+0x1c>
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	f100 0114 	add.w	r1, r0, #20
 800eb70:	f100 0210 	add.w	r2, r0, #16
 800eb74:	4618      	mov	r0, r3
 800eb76:	4553      	cmp	r3, sl
 800eb78:	db33      	blt.n	800ebe2 <__lshift+0xb6>
 800eb7a:	6920      	ldr	r0, [r4, #16]
 800eb7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eb80:	f104 0314 	add.w	r3, r4, #20
 800eb84:	f019 091f 	ands.w	r9, r9, #31
 800eb88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eb8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eb90:	d02b      	beq.n	800ebea <__lshift+0xbe>
 800eb92:	f1c9 0e20 	rsb	lr, r9, #32
 800eb96:	468a      	mov	sl, r1
 800eb98:	2200      	movs	r2, #0
 800eb9a:	6818      	ldr	r0, [r3, #0]
 800eb9c:	fa00 f009 	lsl.w	r0, r0, r9
 800eba0:	4310      	orrs	r0, r2
 800eba2:	f84a 0b04 	str.w	r0, [sl], #4
 800eba6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebaa:	459c      	cmp	ip, r3
 800ebac:	fa22 f20e 	lsr.w	r2, r2, lr
 800ebb0:	d8f3      	bhi.n	800eb9a <__lshift+0x6e>
 800ebb2:	ebac 0304 	sub.w	r3, ip, r4
 800ebb6:	3b15      	subs	r3, #21
 800ebb8:	f023 0303 	bic.w	r3, r3, #3
 800ebbc:	3304      	adds	r3, #4
 800ebbe:	f104 0015 	add.w	r0, r4, #21
 800ebc2:	4584      	cmp	ip, r0
 800ebc4:	bf38      	it	cc
 800ebc6:	2304      	movcc	r3, #4
 800ebc8:	50ca      	str	r2, [r1, r3]
 800ebca:	b10a      	cbz	r2, 800ebd0 <__lshift+0xa4>
 800ebcc:	f108 0602 	add.w	r6, r8, #2
 800ebd0:	3e01      	subs	r6, #1
 800ebd2:	4638      	mov	r0, r7
 800ebd4:	612e      	str	r6, [r5, #16]
 800ebd6:	4621      	mov	r1, r4
 800ebd8:	f7ff fdda 	bl	800e790 <_Bfree>
 800ebdc:	4628      	mov	r0, r5
 800ebde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebe2:	f842 0f04 	str.w	r0, [r2, #4]!
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	e7c5      	b.n	800eb76 <__lshift+0x4a>
 800ebea:	3904      	subs	r1, #4
 800ebec:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebf0:	f841 2f04 	str.w	r2, [r1, #4]!
 800ebf4:	459c      	cmp	ip, r3
 800ebf6:	d8f9      	bhi.n	800ebec <__lshift+0xc0>
 800ebf8:	e7ea      	b.n	800ebd0 <__lshift+0xa4>
 800ebfa:	bf00      	nop
 800ebfc:	08011cce 	.word	0x08011cce
 800ec00:	08011cdf 	.word	0x08011cdf

0800ec04 <__mcmp>:
 800ec04:	690a      	ldr	r2, [r1, #16]
 800ec06:	4603      	mov	r3, r0
 800ec08:	6900      	ldr	r0, [r0, #16]
 800ec0a:	1a80      	subs	r0, r0, r2
 800ec0c:	b530      	push	{r4, r5, lr}
 800ec0e:	d10e      	bne.n	800ec2e <__mcmp+0x2a>
 800ec10:	3314      	adds	r3, #20
 800ec12:	3114      	adds	r1, #20
 800ec14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ec18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ec1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ec20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ec24:	4295      	cmp	r5, r2
 800ec26:	d003      	beq.n	800ec30 <__mcmp+0x2c>
 800ec28:	d205      	bcs.n	800ec36 <__mcmp+0x32>
 800ec2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec2e:	bd30      	pop	{r4, r5, pc}
 800ec30:	42a3      	cmp	r3, r4
 800ec32:	d3f3      	bcc.n	800ec1c <__mcmp+0x18>
 800ec34:	e7fb      	b.n	800ec2e <__mcmp+0x2a>
 800ec36:	2001      	movs	r0, #1
 800ec38:	e7f9      	b.n	800ec2e <__mcmp+0x2a>
	...

0800ec3c <__mdiff>:
 800ec3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec40:	4689      	mov	r9, r1
 800ec42:	4606      	mov	r6, r0
 800ec44:	4611      	mov	r1, r2
 800ec46:	4648      	mov	r0, r9
 800ec48:	4614      	mov	r4, r2
 800ec4a:	f7ff ffdb 	bl	800ec04 <__mcmp>
 800ec4e:	1e05      	subs	r5, r0, #0
 800ec50:	d112      	bne.n	800ec78 <__mdiff+0x3c>
 800ec52:	4629      	mov	r1, r5
 800ec54:	4630      	mov	r0, r6
 800ec56:	f7ff fd5b 	bl	800e710 <_Balloc>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	b928      	cbnz	r0, 800ec6a <__mdiff+0x2e>
 800ec5e:	4b3f      	ldr	r3, [pc, #252]	@ (800ed5c <__mdiff+0x120>)
 800ec60:	f240 2137 	movw	r1, #567	@ 0x237
 800ec64:	483e      	ldr	r0, [pc, #248]	@ (800ed60 <__mdiff+0x124>)
 800ec66:	f000 fb57 	bl	800f318 <__assert_func>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ec70:	4610      	mov	r0, r2
 800ec72:	b003      	add	sp, #12
 800ec74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec78:	bfbc      	itt	lt
 800ec7a:	464b      	movlt	r3, r9
 800ec7c:	46a1      	movlt	r9, r4
 800ec7e:	4630      	mov	r0, r6
 800ec80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ec84:	bfba      	itte	lt
 800ec86:	461c      	movlt	r4, r3
 800ec88:	2501      	movlt	r5, #1
 800ec8a:	2500      	movge	r5, #0
 800ec8c:	f7ff fd40 	bl	800e710 <_Balloc>
 800ec90:	4602      	mov	r2, r0
 800ec92:	b918      	cbnz	r0, 800ec9c <__mdiff+0x60>
 800ec94:	4b31      	ldr	r3, [pc, #196]	@ (800ed5c <__mdiff+0x120>)
 800ec96:	f240 2145 	movw	r1, #581	@ 0x245
 800ec9a:	e7e3      	b.n	800ec64 <__mdiff+0x28>
 800ec9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eca0:	6926      	ldr	r6, [r4, #16]
 800eca2:	60c5      	str	r5, [r0, #12]
 800eca4:	f109 0310 	add.w	r3, r9, #16
 800eca8:	f109 0514 	add.w	r5, r9, #20
 800ecac:	f104 0e14 	add.w	lr, r4, #20
 800ecb0:	f100 0b14 	add.w	fp, r0, #20
 800ecb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ecb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ecbc:	9301      	str	r3, [sp, #4]
 800ecbe:	46d9      	mov	r9, fp
 800ecc0:	f04f 0c00 	mov.w	ip, #0
 800ecc4:	9b01      	ldr	r3, [sp, #4]
 800ecc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ecca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ecce:	9301      	str	r3, [sp, #4]
 800ecd0:	fa1f f38a 	uxth.w	r3, sl
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	b283      	uxth	r3, r0
 800ecd8:	1acb      	subs	r3, r1, r3
 800ecda:	0c00      	lsrs	r0, r0, #16
 800ecdc:	4463      	add	r3, ip
 800ecde:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ece2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ece6:	b29b      	uxth	r3, r3
 800ece8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ecec:	4576      	cmp	r6, lr
 800ecee:	f849 3b04 	str.w	r3, [r9], #4
 800ecf2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ecf6:	d8e5      	bhi.n	800ecc4 <__mdiff+0x88>
 800ecf8:	1b33      	subs	r3, r6, r4
 800ecfa:	3b15      	subs	r3, #21
 800ecfc:	f023 0303 	bic.w	r3, r3, #3
 800ed00:	3415      	adds	r4, #21
 800ed02:	3304      	adds	r3, #4
 800ed04:	42a6      	cmp	r6, r4
 800ed06:	bf38      	it	cc
 800ed08:	2304      	movcc	r3, #4
 800ed0a:	441d      	add	r5, r3
 800ed0c:	445b      	add	r3, fp
 800ed0e:	461e      	mov	r6, r3
 800ed10:	462c      	mov	r4, r5
 800ed12:	4544      	cmp	r4, r8
 800ed14:	d30e      	bcc.n	800ed34 <__mdiff+0xf8>
 800ed16:	f108 0103 	add.w	r1, r8, #3
 800ed1a:	1b49      	subs	r1, r1, r5
 800ed1c:	f021 0103 	bic.w	r1, r1, #3
 800ed20:	3d03      	subs	r5, #3
 800ed22:	45a8      	cmp	r8, r5
 800ed24:	bf38      	it	cc
 800ed26:	2100      	movcc	r1, #0
 800ed28:	440b      	add	r3, r1
 800ed2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed2e:	b191      	cbz	r1, 800ed56 <__mdiff+0x11a>
 800ed30:	6117      	str	r7, [r2, #16]
 800ed32:	e79d      	b.n	800ec70 <__mdiff+0x34>
 800ed34:	f854 1b04 	ldr.w	r1, [r4], #4
 800ed38:	46e6      	mov	lr, ip
 800ed3a:	0c08      	lsrs	r0, r1, #16
 800ed3c:	fa1c fc81 	uxtah	ip, ip, r1
 800ed40:	4471      	add	r1, lr
 800ed42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ed46:	b289      	uxth	r1, r1
 800ed48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ed4c:	f846 1b04 	str.w	r1, [r6], #4
 800ed50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ed54:	e7dd      	b.n	800ed12 <__mdiff+0xd6>
 800ed56:	3f01      	subs	r7, #1
 800ed58:	e7e7      	b.n	800ed2a <__mdiff+0xee>
 800ed5a:	bf00      	nop
 800ed5c:	08011cce 	.word	0x08011cce
 800ed60:	08011cdf 	.word	0x08011cdf

0800ed64 <__d2b>:
 800ed64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed68:	460f      	mov	r7, r1
 800ed6a:	2101      	movs	r1, #1
 800ed6c:	ec59 8b10 	vmov	r8, r9, d0
 800ed70:	4616      	mov	r6, r2
 800ed72:	f7ff fccd 	bl	800e710 <_Balloc>
 800ed76:	4604      	mov	r4, r0
 800ed78:	b930      	cbnz	r0, 800ed88 <__d2b+0x24>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	4b23      	ldr	r3, [pc, #140]	@ (800ee0c <__d2b+0xa8>)
 800ed7e:	4824      	ldr	r0, [pc, #144]	@ (800ee10 <__d2b+0xac>)
 800ed80:	f240 310f 	movw	r1, #783	@ 0x30f
 800ed84:	f000 fac8 	bl	800f318 <__assert_func>
 800ed88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ed8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed90:	b10d      	cbz	r5, 800ed96 <__d2b+0x32>
 800ed92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ed96:	9301      	str	r3, [sp, #4]
 800ed98:	f1b8 0300 	subs.w	r3, r8, #0
 800ed9c:	d023      	beq.n	800ede6 <__d2b+0x82>
 800ed9e:	4668      	mov	r0, sp
 800eda0:	9300      	str	r3, [sp, #0]
 800eda2:	f7ff fd7c 	bl	800e89e <__lo0bits>
 800eda6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800edaa:	b1d0      	cbz	r0, 800ede2 <__d2b+0x7e>
 800edac:	f1c0 0320 	rsb	r3, r0, #32
 800edb0:	fa02 f303 	lsl.w	r3, r2, r3
 800edb4:	430b      	orrs	r3, r1
 800edb6:	40c2      	lsrs	r2, r0
 800edb8:	6163      	str	r3, [r4, #20]
 800edba:	9201      	str	r2, [sp, #4]
 800edbc:	9b01      	ldr	r3, [sp, #4]
 800edbe:	61a3      	str	r3, [r4, #24]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	bf0c      	ite	eq
 800edc4:	2201      	moveq	r2, #1
 800edc6:	2202      	movne	r2, #2
 800edc8:	6122      	str	r2, [r4, #16]
 800edca:	b1a5      	cbz	r5, 800edf6 <__d2b+0x92>
 800edcc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800edd0:	4405      	add	r5, r0
 800edd2:	603d      	str	r5, [r7, #0]
 800edd4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800edd8:	6030      	str	r0, [r6, #0]
 800edda:	4620      	mov	r0, r4
 800eddc:	b003      	add	sp, #12
 800edde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ede2:	6161      	str	r1, [r4, #20]
 800ede4:	e7ea      	b.n	800edbc <__d2b+0x58>
 800ede6:	a801      	add	r0, sp, #4
 800ede8:	f7ff fd59 	bl	800e89e <__lo0bits>
 800edec:	9b01      	ldr	r3, [sp, #4]
 800edee:	6163      	str	r3, [r4, #20]
 800edf0:	3020      	adds	r0, #32
 800edf2:	2201      	movs	r2, #1
 800edf4:	e7e8      	b.n	800edc8 <__d2b+0x64>
 800edf6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800edfa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800edfe:	6038      	str	r0, [r7, #0]
 800ee00:	6918      	ldr	r0, [r3, #16]
 800ee02:	f7ff fd2d 	bl	800e860 <__hi0bits>
 800ee06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ee0a:	e7e5      	b.n	800edd8 <__d2b+0x74>
 800ee0c:	08011cce 	.word	0x08011cce
 800ee10:	08011cdf 	.word	0x08011cdf

0800ee14 <__sfputc_r>:
 800ee14:	6893      	ldr	r3, [r2, #8]
 800ee16:	3b01      	subs	r3, #1
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	b410      	push	{r4}
 800ee1c:	6093      	str	r3, [r2, #8]
 800ee1e:	da08      	bge.n	800ee32 <__sfputc_r+0x1e>
 800ee20:	6994      	ldr	r4, [r2, #24]
 800ee22:	42a3      	cmp	r3, r4
 800ee24:	db01      	blt.n	800ee2a <__sfputc_r+0x16>
 800ee26:	290a      	cmp	r1, #10
 800ee28:	d103      	bne.n	800ee32 <__sfputc_r+0x1e>
 800ee2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee2e:	f7fe bbf0 	b.w	800d612 <__swbuf_r>
 800ee32:	6813      	ldr	r3, [r2, #0]
 800ee34:	1c58      	adds	r0, r3, #1
 800ee36:	6010      	str	r0, [r2, #0]
 800ee38:	7019      	strb	r1, [r3, #0]
 800ee3a:	4608      	mov	r0, r1
 800ee3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee40:	4770      	bx	lr

0800ee42 <__sfputs_r>:
 800ee42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee44:	4606      	mov	r6, r0
 800ee46:	460f      	mov	r7, r1
 800ee48:	4614      	mov	r4, r2
 800ee4a:	18d5      	adds	r5, r2, r3
 800ee4c:	42ac      	cmp	r4, r5
 800ee4e:	d101      	bne.n	800ee54 <__sfputs_r+0x12>
 800ee50:	2000      	movs	r0, #0
 800ee52:	e007      	b.n	800ee64 <__sfputs_r+0x22>
 800ee54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee58:	463a      	mov	r2, r7
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	f7ff ffda 	bl	800ee14 <__sfputc_r>
 800ee60:	1c43      	adds	r3, r0, #1
 800ee62:	d1f3      	bne.n	800ee4c <__sfputs_r+0xa>
 800ee64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee68 <_vfiprintf_r>:
 800ee68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee6c:	460d      	mov	r5, r1
 800ee6e:	b09d      	sub	sp, #116	@ 0x74
 800ee70:	4614      	mov	r4, r2
 800ee72:	4698      	mov	r8, r3
 800ee74:	4606      	mov	r6, r0
 800ee76:	b118      	cbz	r0, 800ee80 <_vfiprintf_r+0x18>
 800ee78:	6a03      	ldr	r3, [r0, #32]
 800ee7a:	b90b      	cbnz	r3, 800ee80 <_vfiprintf_r+0x18>
 800ee7c:	f7fe fae0 	bl	800d440 <__sinit>
 800ee80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee82:	07d9      	lsls	r1, r3, #31
 800ee84:	d405      	bmi.n	800ee92 <_vfiprintf_r+0x2a>
 800ee86:	89ab      	ldrh	r3, [r5, #12]
 800ee88:	059a      	lsls	r2, r3, #22
 800ee8a:	d402      	bmi.n	800ee92 <_vfiprintf_r+0x2a>
 800ee8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee8e:	f7fe fce2 	bl	800d856 <__retarget_lock_acquire_recursive>
 800ee92:	89ab      	ldrh	r3, [r5, #12]
 800ee94:	071b      	lsls	r3, r3, #28
 800ee96:	d501      	bpl.n	800ee9c <_vfiprintf_r+0x34>
 800ee98:	692b      	ldr	r3, [r5, #16]
 800ee9a:	b99b      	cbnz	r3, 800eec4 <_vfiprintf_r+0x5c>
 800ee9c:	4629      	mov	r1, r5
 800ee9e:	4630      	mov	r0, r6
 800eea0:	f7fe fbf6 	bl	800d690 <__swsetup_r>
 800eea4:	b170      	cbz	r0, 800eec4 <_vfiprintf_r+0x5c>
 800eea6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eea8:	07dc      	lsls	r4, r3, #31
 800eeaa:	d504      	bpl.n	800eeb6 <_vfiprintf_r+0x4e>
 800eeac:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb0:	b01d      	add	sp, #116	@ 0x74
 800eeb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeb6:	89ab      	ldrh	r3, [r5, #12]
 800eeb8:	0598      	lsls	r0, r3, #22
 800eeba:	d4f7      	bmi.n	800eeac <_vfiprintf_r+0x44>
 800eebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eebe:	f7fe fccb 	bl	800d858 <__retarget_lock_release_recursive>
 800eec2:	e7f3      	b.n	800eeac <_vfiprintf_r+0x44>
 800eec4:	2300      	movs	r3, #0
 800eec6:	9309      	str	r3, [sp, #36]	@ 0x24
 800eec8:	2320      	movs	r3, #32
 800eeca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eece:	f8cd 800c 	str.w	r8, [sp, #12]
 800eed2:	2330      	movs	r3, #48	@ 0x30
 800eed4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f084 <_vfiprintf_r+0x21c>
 800eed8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eedc:	f04f 0901 	mov.w	r9, #1
 800eee0:	4623      	mov	r3, r4
 800eee2:	469a      	mov	sl, r3
 800eee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eee8:	b10a      	cbz	r2, 800eeee <_vfiprintf_r+0x86>
 800eeea:	2a25      	cmp	r2, #37	@ 0x25
 800eeec:	d1f9      	bne.n	800eee2 <_vfiprintf_r+0x7a>
 800eeee:	ebba 0b04 	subs.w	fp, sl, r4
 800eef2:	d00b      	beq.n	800ef0c <_vfiprintf_r+0xa4>
 800eef4:	465b      	mov	r3, fp
 800eef6:	4622      	mov	r2, r4
 800eef8:	4629      	mov	r1, r5
 800eefa:	4630      	mov	r0, r6
 800eefc:	f7ff ffa1 	bl	800ee42 <__sfputs_r>
 800ef00:	3001      	adds	r0, #1
 800ef02:	f000 80a7 	beq.w	800f054 <_vfiprintf_r+0x1ec>
 800ef06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef08:	445a      	add	r2, fp
 800ef0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	f000 809f 	beq.w	800f054 <_vfiprintf_r+0x1ec>
 800ef16:	2300      	movs	r3, #0
 800ef18:	f04f 32ff 	mov.w	r2, #4294967295
 800ef1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef20:	f10a 0a01 	add.w	sl, sl, #1
 800ef24:	9304      	str	r3, [sp, #16]
 800ef26:	9307      	str	r3, [sp, #28]
 800ef28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef2e:	4654      	mov	r4, sl
 800ef30:	2205      	movs	r2, #5
 800ef32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef36:	4853      	ldr	r0, [pc, #332]	@ (800f084 <_vfiprintf_r+0x21c>)
 800ef38:	f7f1 f952 	bl	80001e0 <memchr>
 800ef3c:	9a04      	ldr	r2, [sp, #16]
 800ef3e:	b9d8      	cbnz	r0, 800ef78 <_vfiprintf_r+0x110>
 800ef40:	06d1      	lsls	r1, r2, #27
 800ef42:	bf44      	itt	mi
 800ef44:	2320      	movmi	r3, #32
 800ef46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef4a:	0713      	lsls	r3, r2, #28
 800ef4c:	bf44      	itt	mi
 800ef4e:	232b      	movmi	r3, #43	@ 0x2b
 800ef50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef54:	f89a 3000 	ldrb.w	r3, [sl]
 800ef58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef5a:	d015      	beq.n	800ef88 <_vfiprintf_r+0x120>
 800ef5c:	9a07      	ldr	r2, [sp, #28]
 800ef5e:	4654      	mov	r4, sl
 800ef60:	2000      	movs	r0, #0
 800ef62:	f04f 0c0a 	mov.w	ip, #10
 800ef66:	4621      	mov	r1, r4
 800ef68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef6c:	3b30      	subs	r3, #48	@ 0x30
 800ef6e:	2b09      	cmp	r3, #9
 800ef70:	d94b      	bls.n	800f00a <_vfiprintf_r+0x1a2>
 800ef72:	b1b0      	cbz	r0, 800efa2 <_vfiprintf_r+0x13a>
 800ef74:	9207      	str	r2, [sp, #28]
 800ef76:	e014      	b.n	800efa2 <_vfiprintf_r+0x13a>
 800ef78:	eba0 0308 	sub.w	r3, r0, r8
 800ef7c:	fa09 f303 	lsl.w	r3, r9, r3
 800ef80:	4313      	orrs	r3, r2
 800ef82:	9304      	str	r3, [sp, #16]
 800ef84:	46a2      	mov	sl, r4
 800ef86:	e7d2      	b.n	800ef2e <_vfiprintf_r+0xc6>
 800ef88:	9b03      	ldr	r3, [sp, #12]
 800ef8a:	1d19      	adds	r1, r3, #4
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	9103      	str	r1, [sp, #12]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	bfbb      	ittet	lt
 800ef94:	425b      	neglt	r3, r3
 800ef96:	f042 0202 	orrlt.w	r2, r2, #2
 800ef9a:	9307      	strge	r3, [sp, #28]
 800ef9c:	9307      	strlt	r3, [sp, #28]
 800ef9e:	bfb8      	it	lt
 800efa0:	9204      	strlt	r2, [sp, #16]
 800efa2:	7823      	ldrb	r3, [r4, #0]
 800efa4:	2b2e      	cmp	r3, #46	@ 0x2e
 800efa6:	d10a      	bne.n	800efbe <_vfiprintf_r+0x156>
 800efa8:	7863      	ldrb	r3, [r4, #1]
 800efaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800efac:	d132      	bne.n	800f014 <_vfiprintf_r+0x1ac>
 800efae:	9b03      	ldr	r3, [sp, #12]
 800efb0:	1d1a      	adds	r2, r3, #4
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	9203      	str	r2, [sp, #12]
 800efb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800efba:	3402      	adds	r4, #2
 800efbc:	9305      	str	r3, [sp, #20]
 800efbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f094 <_vfiprintf_r+0x22c>
 800efc2:	7821      	ldrb	r1, [r4, #0]
 800efc4:	2203      	movs	r2, #3
 800efc6:	4650      	mov	r0, sl
 800efc8:	f7f1 f90a 	bl	80001e0 <memchr>
 800efcc:	b138      	cbz	r0, 800efde <_vfiprintf_r+0x176>
 800efce:	9b04      	ldr	r3, [sp, #16]
 800efd0:	eba0 000a 	sub.w	r0, r0, sl
 800efd4:	2240      	movs	r2, #64	@ 0x40
 800efd6:	4082      	lsls	r2, r0
 800efd8:	4313      	orrs	r3, r2
 800efda:	3401      	adds	r4, #1
 800efdc:	9304      	str	r3, [sp, #16]
 800efde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efe2:	4829      	ldr	r0, [pc, #164]	@ (800f088 <_vfiprintf_r+0x220>)
 800efe4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800efe8:	2206      	movs	r2, #6
 800efea:	f7f1 f8f9 	bl	80001e0 <memchr>
 800efee:	2800      	cmp	r0, #0
 800eff0:	d03f      	beq.n	800f072 <_vfiprintf_r+0x20a>
 800eff2:	4b26      	ldr	r3, [pc, #152]	@ (800f08c <_vfiprintf_r+0x224>)
 800eff4:	bb1b      	cbnz	r3, 800f03e <_vfiprintf_r+0x1d6>
 800eff6:	9b03      	ldr	r3, [sp, #12]
 800eff8:	3307      	adds	r3, #7
 800effa:	f023 0307 	bic.w	r3, r3, #7
 800effe:	3308      	adds	r3, #8
 800f000:	9303      	str	r3, [sp, #12]
 800f002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f004:	443b      	add	r3, r7
 800f006:	9309      	str	r3, [sp, #36]	@ 0x24
 800f008:	e76a      	b.n	800eee0 <_vfiprintf_r+0x78>
 800f00a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f00e:	460c      	mov	r4, r1
 800f010:	2001      	movs	r0, #1
 800f012:	e7a8      	b.n	800ef66 <_vfiprintf_r+0xfe>
 800f014:	2300      	movs	r3, #0
 800f016:	3401      	adds	r4, #1
 800f018:	9305      	str	r3, [sp, #20]
 800f01a:	4619      	mov	r1, r3
 800f01c:	f04f 0c0a 	mov.w	ip, #10
 800f020:	4620      	mov	r0, r4
 800f022:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f026:	3a30      	subs	r2, #48	@ 0x30
 800f028:	2a09      	cmp	r2, #9
 800f02a:	d903      	bls.n	800f034 <_vfiprintf_r+0x1cc>
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d0c6      	beq.n	800efbe <_vfiprintf_r+0x156>
 800f030:	9105      	str	r1, [sp, #20]
 800f032:	e7c4      	b.n	800efbe <_vfiprintf_r+0x156>
 800f034:	fb0c 2101 	mla	r1, ip, r1, r2
 800f038:	4604      	mov	r4, r0
 800f03a:	2301      	movs	r3, #1
 800f03c:	e7f0      	b.n	800f020 <_vfiprintf_r+0x1b8>
 800f03e:	ab03      	add	r3, sp, #12
 800f040:	9300      	str	r3, [sp, #0]
 800f042:	462a      	mov	r2, r5
 800f044:	4b12      	ldr	r3, [pc, #72]	@ (800f090 <_vfiprintf_r+0x228>)
 800f046:	a904      	add	r1, sp, #16
 800f048:	4630      	mov	r0, r6
 800f04a:	f7fd fdb5 	bl	800cbb8 <_printf_float>
 800f04e:	4607      	mov	r7, r0
 800f050:	1c78      	adds	r0, r7, #1
 800f052:	d1d6      	bne.n	800f002 <_vfiprintf_r+0x19a>
 800f054:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f056:	07d9      	lsls	r1, r3, #31
 800f058:	d405      	bmi.n	800f066 <_vfiprintf_r+0x1fe>
 800f05a:	89ab      	ldrh	r3, [r5, #12]
 800f05c:	059a      	lsls	r2, r3, #22
 800f05e:	d402      	bmi.n	800f066 <_vfiprintf_r+0x1fe>
 800f060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f062:	f7fe fbf9 	bl	800d858 <__retarget_lock_release_recursive>
 800f066:	89ab      	ldrh	r3, [r5, #12]
 800f068:	065b      	lsls	r3, r3, #25
 800f06a:	f53f af1f 	bmi.w	800eeac <_vfiprintf_r+0x44>
 800f06e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f070:	e71e      	b.n	800eeb0 <_vfiprintf_r+0x48>
 800f072:	ab03      	add	r3, sp, #12
 800f074:	9300      	str	r3, [sp, #0]
 800f076:	462a      	mov	r2, r5
 800f078:	4b05      	ldr	r3, [pc, #20]	@ (800f090 <_vfiprintf_r+0x228>)
 800f07a:	a904      	add	r1, sp, #16
 800f07c:	4630      	mov	r0, r6
 800f07e:	f7fe f833 	bl	800d0e8 <_printf_i>
 800f082:	e7e4      	b.n	800f04e <_vfiprintf_r+0x1e6>
 800f084:	08011e38 	.word	0x08011e38
 800f088:	08011e42 	.word	0x08011e42
 800f08c:	0800cbb9 	.word	0x0800cbb9
 800f090:	0800ee43 	.word	0x0800ee43
 800f094:	08011e3e 	.word	0x08011e3e

0800f098 <__sflush_r>:
 800f098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a0:	0716      	lsls	r6, r2, #28
 800f0a2:	4605      	mov	r5, r0
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	d454      	bmi.n	800f152 <__sflush_r+0xba>
 800f0a8:	684b      	ldr	r3, [r1, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	dc02      	bgt.n	800f0b4 <__sflush_r+0x1c>
 800f0ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	dd48      	ble.n	800f146 <__sflush_r+0xae>
 800f0b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f0b6:	2e00      	cmp	r6, #0
 800f0b8:	d045      	beq.n	800f146 <__sflush_r+0xae>
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f0c0:	682f      	ldr	r7, [r5, #0]
 800f0c2:	6a21      	ldr	r1, [r4, #32]
 800f0c4:	602b      	str	r3, [r5, #0]
 800f0c6:	d030      	beq.n	800f12a <__sflush_r+0x92>
 800f0c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f0ca:	89a3      	ldrh	r3, [r4, #12]
 800f0cc:	0759      	lsls	r1, r3, #29
 800f0ce:	d505      	bpl.n	800f0dc <__sflush_r+0x44>
 800f0d0:	6863      	ldr	r3, [r4, #4]
 800f0d2:	1ad2      	subs	r2, r2, r3
 800f0d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f0d6:	b10b      	cbz	r3, 800f0dc <__sflush_r+0x44>
 800f0d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f0da:	1ad2      	subs	r2, r2, r3
 800f0dc:	2300      	movs	r3, #0
 800f0de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f0e0:	6a21      	ldr	r1, [r4, #32]
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	47b0      	blx	r6
 800f0e6:	1c43      	adds	r3, r0, #1
 800f0e8:	89a3      	ldrh	r3, [r4, #12]
 800f0ea:	d106      	bne.n	800f0fa <__sflush_r+0x62>
 800f0ec:	6829      	ldr	r1, [r5, #0]
 800f0ee:	291d      	cmp	r1, #29
 800f0f0:	d82b      	bhi.n	800f14a <__sflush_r+0xb2>
 800f0f2:	4a2a      	ldr	r2, [pc, #168]	@ (800f19c <__sflush_r+0x104>)
 800f0f4:	410a      	asrs	r2, r1
 800f0f6:	07d6      	lsls	r6, r2, #31
 800f0f8:	d427      	bmi.n	800f14a <__sflush_r+0xb2>
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	6062      	str	r2, [r4, #4]
 800f0fe:	04d9      	lsls	r1, r3, #19
 800f100:	6922      	ldr	r2, [r4, #16]
 800f102:	6022      	str	r2, [r4, #0]
 800f104:	d504      	bpl.n	800f110 <__sflush_r+0x78>
 800f106:	1c42      	adds	r2, r0, #1
 800f108:	d101      	bne.n	800f10e <__sflush_r+0x76>
 800f10a:	682b      	ldr	r3, [r5, #0]
 800f10c:	b903      	cbnz	r3, 800f110 <__sflush_r+0x78>
 800f10e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f112:	602f      	str	r7, [r5, #0]
 800f114:	b1b9      	cbz	r1, 800f146 <__sflush_r+0xae>
 800f116:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f11a:	4299      	cmp	r1, r3
 800f11c:	d002      	beq.n	800f124 <__sflush_r+0x8c>
 800f11e:	4628      	mov	r0, r5
 800f120:	f7ff f9f6 	bl	800e510 <_free_r>
 800f124:	2300      	movs	r3, #0
 800f126:	6363      	str	r3, [r4, #52]	@ 0x34
 800f128:	e00d      	b.n	800f146 <__sflush_r+0xae>
 800f12a:	2301      	movs	r3, #1
 800f12c:	4628      	mov	r0, r5
 800f12e:	47b0      	blx	r6
 800f130:	4602      	mov	r2, r0
 800f132:	1c50      	adds	r0, r2, #1
 800f134:	d1c9      	bne.n	800f0ca <__sflush_r+0x32>
 800f136:	682b      	ldr	r3, [r5, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d0c6      	beq.n	800f0ca <__sflush_r+0x32>
 800f13c:	2b1d      	cmp	r3, #29
 800f13e:	d001      	beq.n	800f144 <__sflush_r+0xac>
 800f140:	2b16      	cmp	r3, #22
 800f142:	d11e      	bne.n	800f182 <__sflush_r+0xea>
 800f144:	602f      	str	r7, [r5, #0]
 800f146:	2000      	movs	r0, #0
 800f148:	e022      	b.n	800f190 <__sflush_r+0xf8>
 800f14a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f14e:	b21b      	sxth	r3, r3
 800f150:	e01b      	b.n	800f18a <__sflush_r+0xf2>
 800f152:	690f      	ldr	r7, [r1, #16]
 800f154:	2f00      	cmp	r7, #0
 800f156:	d0f6      	beq.n	800f146 <__sflush_r+0xae>
 800f158:	0793      	lsls	r3, r2, #30
 800f15a:	680e      	ldr	r6, [r1, #0]
 800f15c:	bf08      	it	eq
 800f15e:	694b      	ldreq	r3, [r1, #20]
 800f160:	600f      	str	r7, [r1, #0]
 800f162:	bf18      	it	ne
 800f164:	2300      	movne	r3, #0
 800f166:	eba6 0807 	sub.w	r8, r6, r7
 800f16a:	608b      	str	r3, [r1, #8]
 800f16c:	f1b8 0f00 	cmp.w	r8, #0
 800f170:	dde9      	ble.n	800f146 <__sflush_r+0xae>
 800f172:	6a21      	ldr	r1, [r4, #32]
 800f174:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f176:	4643      	mov	r3, r8
 800f178:	463a      	mov	r2, r7
 800f17a:	4628      	mov	r0, r5
 800f17c:	47b0      	blx	r6
 800f17e:	2800      	cmp	r0, #0
 800f180:	dc08      	bgt.n	800f194 <__sflush_r+0xfc>
 800f182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f18a:	81a3      	strh	r3, [r4, #12]
 800f18c:	f04f 30ff 	mov.w	r0, #4294967295
 800f190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f194:	4407      	add	r7, r0
 800f196:	eba8 0800 	sub.w	r8, r8, r0
 800f19a:	e7e7      	b.n	800f16c <__sflush_r+0xd4>
 800f19c:	dfbffffe 	.word	0xdfbffffe

0800f1a0 <_fflush_r>:
 800f1a0:	b538      	push	{r3, r4, r5, lr}
 800f1a2:	690b      	ldr	r3, [r1, #16]
 800f1a4:	4605      	mov	r5, r0
 800f1a6:	460c      	mov	r4, r1
 800f1a8:	b913      	cbnz	r3, 800f1b0 <_fflush_r+0x10>
 800f1aa:	2500      	movs	r5, #0
 800f1ac:	4628      	mov	r0, r5
 800f1ae:	bd38      	pop	{r3, r4, r5, pc}
 800f1b0:	b118      	cbz	r0, 800f1ba <_fflush_r+0x1a>
 800f1b2:	6a03      	ldr	r3, [r0, #32]
 800f1b4:	b90b      	cbnz	r3, 800f1ba <_fflush_r+0x1a>
 800f1b6:	f7fe f943 	bl	800d440 <__sinit>
 800f1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d0f3      	beq.n	800f1aa <_fflush_r+0xa>
 800f1c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f1c4:	07d0      	lsls	r0, r2, #31
 800f1c6:	d404      	bmi.n	800f1d2 <_fflush_r+0x32>
 800f1c8:	0599      	lsls	r1, r3, #22
 800f1ca:	d402      	bmi.n	800f1d2 <_fflush_r+0x32>
 800f1cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1ce:	f7fe fb42 	bl	800d856 <__retarget_lock_acquire_recursive>
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	4621      	mov	r1, r4
 800f1d6:	f7ff ff5f 	bl	800f098 <__sflush_r>
 800f1da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f1dc:	07da      	lsls	r2, r3, #31
 800f1de:	4605      	mov	r5, r0
 800f1e0:	d4e4      	bmi.n	800f1ac <_fflush_r+0xc>
 800f1e2:	89a3      	ldrh	r3, [r4, #12]
 800f1e4:	059b      	lsls	r3, r3, #22
 800f1e6:	d4e1      	bmi.n	800f1ac <_fflush_r+0xc>
 800f1e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1ea:	f7fe fb35 	bl	800d858 <__retarget_lock_release_recursive>
 800f1ee:	e7dd      	b.n	800f1ac <_fflush_r+0xc>

0800f1f0 <__swhatbuf_r>:
 800f1f0:	b570      	push	{r4, r5, r6, lr}
 800f1f2:	460c      	mov	r4, r1
 800f1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1f8:	2900      	cmp	r1, #0
 800f1fa:	b096      	sub	sp, #88	@ 0x58
 800f1fc:	4615      	mov	r5, r2
 800f1fe:	461e      	mov	r6, r3
 800f200:	da0d      	bge.n	800f21e <__swhatbuf_r+0x2e>
 800f202:	89a3      	ldrh	r3, [r4, #12]
 800f204:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f208:	f04f 0100 	mov.w	r1, #0
 800f20c:	bf14      	ite	ne
 800f20e:	2340      	movne	r3, #64	@ 0x40
 800f210:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f214:	2000      	movs	r0, #0
 800f216:	6031      	str	r1, [r6, #0]
 800f218:	602b      	str	r3, [r5, #0]
 800f21a:	b016      	add	sp, #88	@ 0x58
 800f21c:	bd70      	pop	{r4, r5, r6, pc}
 800f21e:	466a      	mov	r2, sp
 800f220:	f000 f848 	bl	800f2b4 <_fstat_r>
 800f224:	2800      	cmp	r0, #0
 800f226:	dbec      	blt.n	800f202 <__swhatbuf_r+0x12>
 800f228:	9901      	ldr	r1, [sp, #4]
 800f22a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f22e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f232:	4259      	negs	r1, r3
 800f234:	4159      	adcs	r1, r3
 800f236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f23a:	e7eb      	b.n	800f214 <__swhatbuf_r+0x24>

0800f23c <__smakebuf_r>:
 800f23c:	898b      	ldrh	r3, [r1, #12]
 800f23e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f240:	079d      	lsls	r5, r3, #30
 800f242:	4606      	mov	r6, r0
 800f244:	460c      	mov	r4, r1
 800f246:	d507      	bpl.n	800f258 <__smakebuf_r+0x1c>
 800f248:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f24c:	6023      	str	r3, [r4, #0]
 800f24e:	6123      	str	r3, [r4, #16]
 800f250:	2301      	movs	r3, #1
 800f252:	6163      	str	r3, [r4, #20]
 800f254:	b003      	add	sp, #12
 800f256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f258:	ab01      	add	r3, sp, #4
 800f25a:	466a      	mov	r2, sp
 800f25c:	f7ff ffc8 	bl	800f1f0 <__swhatbuf_r>
 800f260:	9f00      	ldr	r7, [sp, #0]
 800f262:	4605      	mov	r5, r0
 800f264:	4639      	mov	r1, r7
 800f266:	4630      	mov	r0, r6
 800f268:	f7ff f9c6 	bl	800e5f8 <_malloc_r>
 800f26c:	b948      	cbnz	r0, 800f282 <__smakebuf_r+0x46>
 800f26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f272:	059a      	lsls	r2, r3, #22
 800f274:	d4ee      	bmi.n	800f254 <__smakebuf_r+0x18>
 800f276:	f023 0303 	bic.w	r3, r3, #3
 800f27a:	f043 0302 	orr.w	r3, r3, #2
 800f27e:	81a3      	strh	r3, [r4, #12]
 800f280:	e7e2      	b.n	800f248 <__smakebuf_r+0xc>
 800f282:	89a3      	ldrh	r3, [r4, #12]
 800f284:	6020      	str	r0, [r4, #0]
 800f286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f28a:	81a3      	strh	r3, [r4, #12]
 800f28c:	9b01      	ldr	r3, [sp, #4]
 800f28e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f292:	b15b      	cbz	r3, 800f2ac <__smakebuf_r+0x70>
 800f294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f298:	4630      	mov	r0, r6
 800f29a:	f000 f81d 	bl	800f2d8 <_isatty_r>
 800f29e:	b128      	cbz	r0, 800f2ac <__smakebuf_r+0x70>
 800f2a0:	89a3      	ldrh	r3, [r4, #12]
 800f2a2:	f023 0303 	bic.w	r3, r3, #3
 800f2a6:	f043 0301 	orr.w	r3, r3, #1
 800f2aa:	81a3      	strh	r3, [r4, #12]
 800f2ac:	89a3      	ldrh	r3, [r4, #12]
 800f2ae:	431d      	orrs	r5, r3
 800f2b0:	81a5      	strh	r5, [r4, #12]
 800f2b2:	e7cf      	b.n	800f254 <__smakebuf_r+0x18>

0800f2b4 <_fstat_r>:
 800f2b4:	b538      	push	{r3, r4, r5, lr}
 800f2b6:	4d07      	ldr	r5, [pc, #28]	@ (800f2d4 <_fstat_r+0x20>)
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	4608      	mov	r0, r1
 800f2be:	4611      	mov	r1, r2
 800f2c0:	602b      	str	r3, [r5, #0]
 800f2c2:	f7f4 fbe5 	bl	8003a90 <_fstat>
 800f2c6:	1c43      	adds	r3, r0, #1
 800f2c8:	d102      	bne.n	800f2d0 <_fstat_r+0x1c>
 800f2ca:	682b      	ldr	r3, [r5, #0]
 800f2cc:	b103      	cbz	r3, 800f2d0 <_fstat_r+0x1c>
 800f2ce:	6023      	str	r3, [r4, #0]
 800f2d0:	bd38      	pop	{r3, r4, r5, pc}
 800f2d2:	bf00      	nop
 800f2d4:	20004674 	.word	0x20004674

0800f2d8 <_isatty_r>:
 800f2d8:	b538      	push	{r3, r4, r5, lr}
 800f2da:	4d06      	ldr	r5, [pc, #24]	@ (800f2f4 <_isatty_r+0x1c>)
 800f2dc:	2300      	movs	r3, #0
 800f2de:	4604      	mov	r4, r0
 800f2e0:	4608      	mov	r0, r1
 800f2e2:	602b      	str	r3, [r5, #0]
 800f2e4:	f7f4 fbe4 	bl	8003ab0 <_isatty>
 800f2e8:	1c43      	adds	r3, r0, #1
 800f2ea:	d102      	bne.n	800f2f2 <_isatty_r+0x1a>
 800f2ec:	682b      	ldr	r3, [r5, #0]
 800f2ee:	b103      	cbz	r3, 800f2f2 <_isatty_r+0x1a>
 800f2f0:	6023      	str	r3, [r4, #0]
 800f2f2:	bd38      	pop	{r3, r4, r5, pc}
 800f2f4:	20004674 	.word	0x20004674

0800f2f8 <_sbrk_r>:
 800f2f8:	b538      	push	{r3, r4, r5, lr}
 800f2fa:	4d06      	ldr	r5, [pc, #24]	@ (800f314 <_sbrk_r+0x1c>)
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	4604      	mov	r4, r0
 800f300:	4608      	mov	r0, r1
 800f302:	602b      	str	r3, [r5, #0]
 800f304:	f7f4 fbec 	bl	8003ae0 <_sbrk>
 800f308:	1c43      	adds	r3, r0, #1
 800f30a:	d102      	bne.n	800f312 <_sbrk_r+0x1a>
 800f30c:	682b      	ldr	r3, [r5, #0]
 800f30e:	b103      	cbz	r3, 800f312 <_sbrk_r+0x1a>
 800f310:	6023      	str	r3, [r4, #0]
 800f312:	bd38      	pop	{r3, r4, r5, pc}
 800f314:	20004674 	.word	0x20004674

0800f318 <__assert_func>:
 800f318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f31a:	4614      	mov	r4, r2
 800f31c:	461a      	mov	r2, r3
 800f31e:	4b09      	ldr	r3, [pc, #36]	@ (800f344 <__assert_func+0x2c>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	4605      	mov	r5, r0
 800f324:	68d8      	ldr	r0, [r3, #12]
 800f326:	b954      	cbnz	r4, 800f33e <__assert_func+0x26>
 800f328:	4b07      	ldr	r3, [pc, #28]	@ (800f348 <__assert_func+0x30>)
 800f32a:	461c      	mov	r4, r3
 800f32c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f330:	9100      	str	r1, [sp, #0]
 800f332:	462b      	mov	r3, r5
 800f334:	4905      	ldr	r1, [pc, #20]	@ (800f34c <__assert_func+0x34>)
 800f336:	f000 f841 	bl	800f3bc <fiprintf>
 800f33a:	f000 f851 	bl	800f3e0 <abort>
 800f33e:	4b04      	ldr	r3, [pc, #16]	@ (800f350 <__assert_func+0x38>)
 800f340:	e7f4      	b.n	800f32c <__assert_func+0x14>
 800f342:	bf00      	nop
 800f344:	20000064 	.word	0x20000064
 800f348:	08011e8e 	.word	0x08011e8e
 800f34c:	08011e60 	.word	0x08011e60
 800f350:	08011e53 	.word	0x08011e53

0800f354 <_calloc_r>:
 800f354:	b570      	push	{r4, r5, r6, lr}
 800f356:	fba1 5402 	umull	r5, r4, r1, r2
 800f35a:	b93c      	cbnz	r4, 800f36c <_calloc_r+0x18>
 800f35c:	4629      	mov	r1, r5
 800f35e:	f7ff f94b 	bl	800e5f8 <_malloc_r>
 800f362:	4606      	mov	r6, r0
 800f364:	b928      	cbnz	r0, 800f372 <_calloc_r+0x1e>
 800f366:	2600      	movs	r6, #0
 800f368:	4630      	mov	r0, r6
 800f36a:	bd70      	pop	{r4, r5, r6, pc}
 800f36c:	220c      	movs	r2, #12
 800f36e:	6002      	str	r2, [r0, #0]
 800f370:	e7f9      	b.n	800f366 <_calloc_r+0x12>
 800f372:	462a      	mov	r2, r5
 800f374:	4621      	mov	r1, r4
 800f376:	f7fe f9f1 	bl	800d75c <memset>
 800f37a:	e7f5      	b.n	800f368 <_calloc_r+0x14>

0800f37c <__ascii_mbtowc>:
 800f37c:	b082      	sub	sp, #8
 800f37e:	b901      	cbnz	r1, 800f382 <__ascii_mbtowc+0x6>
 800f380:	a901      	add	r1, sp, #4
 800f382:	b142      	cbz	r2, 800f396 <__ascii_mbtowc+0x1a>
 800f384:	b14b      	cbz	r3, 800f39a <__ascii_mbtowc+0x1e>
 800f386:	7813      	ldrb	r3, [r2, #0]
 800f388:	600b      	str	r3, [r1, #0]
 800f38a:	7812      	ldrb	r2, [r2, #0]
 800f38c:	1e10      	subs	r0, r2, #0
 800f38e:	bf18      	it	ne
 800f390:	2001      	movne	r0, #1
 800f392:	b002      	add	sp, #8
 800f394:	4770      	bx	lr
 800f396:	4610      	mov	r0, r2
 800f398:	e7fb      	b.n	800f392 <__ascii_mbtowc+0x16>
 800f39a:	f06f 0001 	mvn.w	r0, #1
 800f39e:	e7f8      	b.n	800f392 <__ascii_mbtowc+0x16>

0800f3a0 <__ascii_wctomb>:
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	4608      	mov	r0, r1
 800f3a4:	b141      	cbz	r1, 800f3b8 <__ascii_wctomb+0x18>
 800f3a6:	2aff      	cmp	r2, #255	@ 0xff
 800f3a8:	d904      	bls.n	800f3b4 <__ascii_wctomb+0x14>
 800f3aa:	228a      	movs	r2, #138	@ 0x8a
 800f3ac:	601a      	str	r2, [r3, #0]
 800f3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f3b2:	4770      	bx	lr
 800f3b4:	700a      	strb	r2, [r1, #0]
 800f3b6:	2001      	movs	r0, #1
 800f3b8:	4770      	bx	lr
	...

0800f3bc <fiprintf>:
 800f3bc:	b40e      	push	{r1, r2, r3}
 800f3be:	b503      	push	{r0, r1, lr}
 800f3c0:	4601      	mov	r1, r0
 800f3c2:	ab03      	add	r3, sp, #12
 800f3c4:	4805      	ldr	r0, [pc, #20]	@ (800f3dc <fiprintf+0x20>)
 800f3c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3ca:	6800      	ldr	r0, [r0, #0]
 800f3cc:	9301      	str	r3, [sp, #4]
 800f3ce:	f7ff fd4b 	bl	800ee68 <_vfiprintf_r>
 800f3d2:	b002      	add	sp, #8
 800f3d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3d8:	b003      	add	sp, #12
 800f3da:	4770      	bx	lr
 800f3dc:	20000064 	.word	0x20000064

0800f3e0 <abort>:
 800f3e0:	b508      	push	{r3, lr}
 800f3e2:	2006      	movs	r0, #6
 800f3e4:	f000 f82c 	bl	800f440 <raise>
 800f3e8:	2001      	movs	r0, #1
 800f3ea:	f7f4 fb01 	bl	80039f0 <_exit>

0800f3ee <_raise_r>:
 800f3ee:	291f      	cmp	r1, #31
 800f3f0:	b538      	push	{r3, r4, r5, lr}
 800f3f2:	4605      	mov	r5, r0
 800f3f4:	460c      	mov	r4, r1
 800f3f6:	d904      	bls.n	800f402 <_raise_r+0x14>
 800f3f8:	2316      	movs	r3, #22
 800f3fa:	6003      	str	r3, [r0, #0]
 800f3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f400:	bd38      	pop	{r3, r4, r5, pc}
 800f402:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f404:	b112      	cbz	r2, 800f40c <_raise_r+0x1e>
 800f406:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f40a:	b94b      	cbnz	r3, 800f420 <_raise_r+0x32>
 800f40c:	4628      	mov	r0, r5
 800f40e:	f000 f831 	bl	800f474 <_getpid_r>
 800f412:	4622      	mov	r2, r4
 800f414:	4601      	mov	r1, r0
 800f416:	4628      	mov	r0, r5
 800f418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f41c:	f000 b818 	b.w	800f450 <_kill_r>
 800f420:	2b01      	cmp	r3, #1
 800f422:	d00a      	beq.n	800f43a <_raise_r+0x4c>
 800f424:	1c59      	adds	r1, r3, #1
 800f426:	d103      	bne.n	800f430 <_raise_r+0x42>
 800f428:	2316      	movs	r3, #22
 800f42a:	6003      	str	r3, [r0, #0]
 800f42c:	2001      	movs	r0, #1
 800f42e:	e7e7      	b.n	800f400 <_raise_r+0x12>
 800f430:	2100      	movs	r1, #0
 800f432:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f436:	4620      	mov	r0, r4
 800f438:	4798      	blx	r3
 800f43a:	2000      	movs	r0, #0
 800f43c:	e7e0      	b.n	800f400 <_raise_r+0x12>
	...

0800f440 <raise>:
 800f440:	4b02      	ldr	r3, [pc, #8]	@ (800f44c <raise+0xc>)
 800f442:	4601      	mov	r1, r0
 800f444:	6818      	ldr	r0, [r3, #0]
 800f446:	f7ff bfd2 	b.w	800f3ee <_raise_r>
 800f44a:	bf00      	nop
 800f44c:	20000064 	.word	0x20000064

0800f450 <_kill_r>:
 800f450:	b538      	push	{r3, r4, r5, lr}
 800f452:	4d07      	ldr	r5, [pc, #28]	@ (800f470 <_kill_r+0x20>)
 800f454:	2300      	movs	r3, #0
 800f456:	4604      	mov	r4, r0
 800f458:	4608      	mov	r0, r1
 800f45a:	4611      	mov	r1, r2
 800f45c:	602b      	str	r3, [r5, #0]
 800f45e:	f7f4 fab7 	bl	80039d0 <_kill>
 800f462:	1c43      	adds	r3, r0, #1
 800f464:	d102      	bne.n	800f46c <_kill_r+0x1c>
 800f466:	682b      	ldr	r3, [r5, #0]
 800f468:	b103      	cbz	r3, 800f46c <_kill_r+0x1c>
 800f46a:	6023      	str	r3, [r4, #0]
 800f46c:	bd38      	pop	{r3, r4, r5, pc}
 800f46e:	bf00      	nop
 800f470:	20004674 	.word	0x20004674

0800f474 <_getpid_r>:
 800f474:	f7f4 baa4 	b.w	80039c0 <_getpid>

0800f478 <atan2>:
 800f478:	f000 b9d6 	b.w	800f828 <__ieee754_atan2>

0800f47c <sqrt>:
 800f47c:	b538      	push	{r3, r4, r5, lr}
 800f47e:	ed2d 8b02 	vpush	{d8}
 800f482:	ec55 4b10 	vmov	r4, r5, d0
 800f486:	f000 f8f3 	bl	800f670 <__ieee754_sqrt>
 800f48a:	4622      	mov	r2, r4
 800f48c:	462b      	mov	r3, r5
 800f48e:	4620      	mov	r0, r4
 800f490:	4629      	mov	r1, r5
 800f492:	eeb0 8a40 	vmov.f32	s16, s0
 800f496:	eef0 8a60 	vmov.f32	s17, s1
 800f49a:	f7f1 fb4f 	bl	8000b3c <__aeabi_dcmpun>
 800f49e:	b990      	cbnz	r0, 800f4c6 <sqrt+0x4a>
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	f7f1 fb20 	bl	8000aec <__aeabi_dcmplt>
 800f4ac:	b158      	cbz	r0, 800f4c6 <sqrt+0x4a>
 800f4ae:	f7fe f9a7 	bl	800d800 <__errno>
 800f4b2:	2321      	movs	r3, #33	@ 0x21
 800f4b4:	6003      	str	r3, [r0, #0]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	4610      	mov	r0, r2
 800f4bc:	4619      	mov	r1, r3
 800f4be:	f7f1 f9cd 	bl	800085c <__aeabi_ddiv>
 800f4c2:	ec41 0b18 	vmov	d8, r0, r1
 800f4c6:	eeb0 0a48 	vmov.f32	s0, s16
 800f4ca:	eef0 0a68 	vmov.f32	s1, s17
 800f4ce:	ecbd 8b02 	vpop	{d8}
 800f4d2:	bd38      	pop	{r3, r4, r5, pc}

0800f4d4 <fabs>:
 800f4d4:	ec51 0b10 	vmov	r0, r1, d0
 800f4d8:	4602      	mov	r2, r0
 800f4da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f4de:	ec43 2b10 	vmov	d0, r2, r3
 800f4e2:	4770      	bx	lr

0800f4e4 <asinf>:
 800f4e4:	b508      	push	{r3, lr}
 800f4e6:	ed2d 8b02 	vpush	{d8}
 800f4ea:	eeb0 8a40 	vmov.f32	s16, s0
 800f4ee:	f000 fc9b 	bl	800fe28 <__ieee754_asinf>
 800f4f2:	eeb4 8a48 	vcmp.f32	s16, s16
 800f4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fa:	eef0 8a40 	vmov.f32	s17, s0
 800f4fe:	d615      	bvs.n	800f52c <asinf+0x48>
 800f500:	eeb0 0a48 	vmov.f32	s0, s16
 800f504:	f000 f860 	bl	800f5c8 <fabsf>
 800f508:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f50c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f514:	dd0a      	ble.n	800f52c <asinf+0x48>
 800f516:	f7fe f973 	bl	800d800 <__errno>
 800f51a:	ecbd 8b02 	vpop	{d8}
 800f51e:	2321      	movs	r3, #33	@ 0x21
 800f520:	6003      	str	r3, [r0, #0]
 800f522:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f526:	4804      	ldr	r0, [pc, #16]	@ (800f538 <asinf+0x54>)
 800f528:	f000 b89c 	b.w	800f664 <nanf>
 800f52c:	eeb0 0a68 	vmov.f32	s0, s17
 800f530:	ecbd 8b02 	vpop	{d8}
 800f534:	bd08      	pop	{r3, pc}
 800f536:	bf00      	nop
 800f538:	08011e8e 	.word	0x08011e8e

0800f53c <atan2f>:
 800f53c:	f000 bd5a 	b.w	800fff4 <__ieee754_atan2f>

0800f540 <cosf>:
 800f540:	ee10 3a10 	vmov	r3, s0
 800f544:	b507      	push	{r0, r1, r2, lr}
 800f546:	4a1e      	ldr	r2, [pc, #120]	@ (800f5c0 <cosf+0x80>)
 800f548:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d806      	bhi.n	800f55e <cosf+0x1e>
 800f550:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f5c4 <cosf+0x84>
 800f554:	b003      	add	sp, #12
 800f556:	f85d eb04 	ldr.w	lr, [sp], #4
 800f55a:	f000 bbc5 	b.w	800fce8 <__kernel_cosf>
 800f55e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f562:	d304      	bcc.n	800f56e <cosf+0x2e>
 800f564:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f568:	b003      	add	sp, #12
 800f56a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f56e:	4668      	mov	r0, sp
 800f570:	f000 fde0 	bl	8010134 <__ieee754_rem_pio2f>
 800f574:	f000 0003 	and.w	r0, r0, #3
 800f578:	2801      	cmp	r0, #1
 800f57a:	d009      	beq.n	800f590 <cosf+0x50>
 800f57c:	2802      	cmp	r0, #2
 800f57e:	d010      	beq.n	800f5a2 <cosf+0x62>
 800f580:	b9b0      	cbnz	r0, 800f5b0 <cosf+0x70>
 800f582:	eddd 0a01 	vldr	s1, [sp, #4]
 800f586:	ed9d 0a00 	vldr	s0, [sp]
 800f58a:	f000 fbad 	bl	800fce8 <__kernel_cosf>
 800f58e:	e7eb      	b.n	800f568 <cosf+0x28>
 800f590:	eddd 0a01 	vldr	s1, [sp, #4]
 800f594:	ed9d 0a00 	vldr	s0, [sp]
 800f598:	f000 fbfe 	bl	800fd98 <__kernel_sinf>
 800f59c:	eeb1 0a40 	vneg.f32	s0, s0
 800f5a0:	e7e2      	b.n	800f568 <cosf+0x28>
 800f5a2:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5a6:	ed9d 0a00 	vldr	s0, [sp]
 800f5aa:	f000 fb9d 	bl	800fce8 <__kernel_cosf>
 800f5ae:	e7f5      	b.n	800f59c <cosf+0x5c>
 800f5b0:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5b4:	ed9d 0a00 	vldr	s0, [sp]
 800f5b8:	2001      	movs	r0, #1
 800f5ba:	f000 fbed 	bl	800fd98 <__kernel_sinf>
 800f5be:	e7d3      	b.n	800f568 <cosf+0x28>
 800f5c0:	3f490fd8 	.word	0x3f490fd8
 800f5c4:	00000000 	.word	0x00000000

0800f5c8 <fabsf>:
 800f5c8:	ee10 3a10 	vmov	r3, s0
 800f5cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f5d0:	ee00 3a10 	vmov	s0, r3
 800f5d4:	4770      	bx	lr
	...

0800f5d8 <sinf>:
 800f5d8:	ee10 3a10 	vmov	r3, s0
 800f5dc:	b507      	push	{r0, r1, r2, lr}
 800f5de:	4a1f      	ldr	r2, [pc, #124]	@ (800f65c <sinf+0x84>)
 800f5e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d807      	bhi.n	800f5f8 <sinf+0x20>
 800f5e8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f660 <sinf+0x88>
 800f5ec:	2000      	movs	r0, #0
 800f5ee:	b003      	add	sp, #12
 800f5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5f4:	f000 bbd0 	b.w	800fd98 <__kernel_sinf>
 800f5f8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f5fc:	d304      	bcc.n	800f608 <sinf+0x30>
 800f5fe:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f602:	b003      	add	sp, #12
 800f604:	f85d fb04 	ldr.w	pc, [sp], #4
 800f608:	4668      	mov	r0, sp
 800f60a:	f000 fd93 	bl	8010134 <__ieee754_rem_pio2f>
 800f60e:	f000 0003 	and.w	r0, r0, #3
 800f612:	2801      	cmp	r0, #1
 800f614:	d00a      	beq.n	800f62c <sinf+0x54>
 800f616:	2802      	cmp	r0, #2
 800f618:	d00f      	beq.n	800f63a <sinf+0x62>
 800f61a:	b9c0      	cbnz	r0, 800f64e <sinf+0x76>
 800f61c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f620:	ed9d 0a00 	vldr	s0, [sp]
 800f624:	2001      	movs	r0, #1
 800f626:	f000 fbb7 	bl	800fd98 <__kernel_sinf>
 800f62a:	e7ea      	b.n	800f602 <sinf+0x2a>
 800f62c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f630:	ed9d 0a00 	vldr	s0, [sp]
 800f634:	f000 fb58 	bl	800fce8 <__kernel_cosf>
 800f638:	e7e3      	b.n	800f602 <sinf+0x2a>
 800f63a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f63e:	ed9d 0a00 	vldr	s0, [sp]
 800f642:	2001      	movs	r0, #1
 800f644:	f000 fba8 	bl	800fd98 <__kernel_sinf>
 800f648:	eeb1 0a40 	vneg.f32	s0, s0
 800f64c:	e7d9      	b.n	800f602 <sinf+0x2a>
 800f64e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f652:	ed9d 0a00 	vldr	s0, [sp]
 800f656:	f000 fb47 	bl	800fce8 <__kernel_cosf>
 800f65a:	e7f5      	b.n	800f648 <sinf+0x70>
 800f65c:	3f490fd8 	.word	0x3f490fd8
 800f660:	00000000 	.word	0x00000000

0800f664 <nanf>:
 800f664:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f66c <nanf+0x8>
 800f668:	4770      	bx	lr
 800f66a:	bf00      	nop
 800f66c:	7fc00000 	.word	0x7fc00000

0800f670 <__ieee754_sqrt>:
 800f670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f674:	4a68      	ldr	r2, [pc, #416]	@ (800f818 <__ieee754_sqrt+0x1a8>)
 800f676:	ec55 4b10 	vmov	r4, r5, d0
 800f67a:	43aa      	bics	r2, r5
 800f67c:	462b      	mov	r3, r5
 800f67e:	4621      	mov	r1, r4
 800f680:	d110      	bne.n	800f6a4 <__ieee754_sqrt+0x34>
 800f682:	4622      	mov	r2, r4
 800f684:	4620      	mov	r0, r4
 800f686:	4629      	mov	r1, r5
 800f688:	f7f0 ffbe 	bl	8000608 <__aeabi_dmul>
 800f68c:	4602      	mov	r2, r0
 800f68e:	460b      	mov	r3, r1
 800f690:	4620      	mov	r0, r4
 800f692:	4629      	mov	r1, r5
 800f694:	f7f0 fe02 	bl	800029c <__adddf3>
 800f698:	4604      	mov	r4, r0
 800f69a:	460d      	mov	r5, r1
 800f69c:	ec45 4b10 	vmov	d0, r4, r5
 800f6a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6a4:	2d00      	cmp	r5, #0
 800f6a6:	dc0e      	bgt.n	800f6c6 <__ieee754_sqrt+0x56>
 800f6a8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f6ac:	4322      	orrs	r2, r4
 800f6ae:	d0f5      	beq.n	800f69c <__ieee754_sqrt+0x2c>
 800f6b0:	b19d      	cbz	r5, 800f6da <__ieee754_sqrt+0x6a>
 800f6b2:	4622      	mov	r2, r4
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	4629      	mov	r1, r5
 800f6b8:	f7f0 fdee 	bl	8000298 <__aeabi_dsub>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	460b      	mov	r3, r1
 800f6c0:	f7f1 f8cc 	bl	800085c <__aeabi_ddiv>
 800f6c4:	e7e8      	b.n	800f698 <__ieee754_sqrt+0x28>
 800f6c6:	152a      	asrs	r2, r5, #20
 800f6c8:	d115      	bne.n	800f6f6 <__ieee754_sqrt+0x86>
 800f6ca:	2000      	movs	r0, #0
 800f6cc:	e009      	b.n	800f6e2 <__ieee754_sqrt+0x72>
 800f6ce:	0acb      	lsrs	r3, r1, #11
 800f6d0:	3a15      	subs	r2, #21
 800f6d2:	0549      	lsls	r1, r1, #21
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d0fa      	beq.n	800f6ce <__ieee754_sqrt+0x5e>
 800f6d8:	e7f7      	b.n	800f6ca <__ieee754_sqrt+0x5a>
 800f6da:	462a      	mov	r2, r5
 800f6dc:	e7fa      	b.n	800f6d4 <__ieee754_sqrt+0x64>
 800f6de:	005b      	lsls	r3, r3, #1
 800f6e0:	3001      	adds	r0, #1
 800f6e2:	02dc      	lsls	r4, r3, #11
 800f6e4:	d5fb      	bpl.n	800f6de <__ieee754_sqrt+0x6e>
 800f6e6:	1e44      	subs	r4, r0, #1
 800f6e8:	1b12      	subs	r2, r2, r4
 800f6ea:	f1c0 0420 	rsb	r4, r0, #32
 800f6ee:	fa21 f404 	lsr.w	r4, r1, r4
 800f6f2:	4323      	orrs	r3, r4
 800f6f4:	4081      	lsls	r1, r0
 800f6f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6fa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f6fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f702:	07d2      	lsls	r2, r2, #31
 800f704:	bf5c      	itt	pl
 800f706:	005b      	lslpl	r3, r3, #1
 800f708:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f70c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f710:	bf58      	it	pl
 800f712:	0049      	lslpl	r1, r1, #1
 800f714:	2600      	movs	r6, #0
 800f716:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f71a:	106d      	asrs	r5, r5, #1
 800f71c:	0049      	lsls	r1, r1, #1
 800f71e:	2016      	movs	r0, #22
 800f720:	4632      	mov	r2, r6
 800f722:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f726:	1917      	adds	r7, r2, r4
 800f728:	429f      	cmp	r7, r3
 800f72a:	bfde      	ittt	le
 800f72c:	193a      	addle	r2, r7, r4
 800f72e:	1bdb      	suble	r3, r3, r7
 800f730:	1936      	addle	r6, r6, r4
 800f732:	0fcf      	lsrs	r7, r1, #31
 800f734:	3801      	subs	r0, #1
 800f736:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f73a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f73e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f742:	d1f0      	bne.n	800f726 <__ieee754_sqrt+0xb6>
 800f744:	4604      	mov	r4, r0
 800f746:	2720      	movs	r7, #32
 800f748:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f74c:	429a      	cmp	r2, r3
 800f74e:	eb00 0e0c 	add.w	lr, r0, ip
 800f752:	db02      	blt.n	800f75a <__ieee754_sqrt+0xea>
 800f754:	d113      	bne.n	800f77e <__ieee754_sqrt+0x10e>
 800f756:	458e      	cmp	lr, r1
 800f758:	d811      	bhi.n	800f77e <__ieee754_sqrt+0x10e>
 800f75a:	f1be 0f00 	cmp.w	lr, #0
 800f75e:	eb0e 000c 	add.w	r0, lr, ip
 800f762:	da42      	bge.n	800f7ea <__ieee754_sqrt+0x17a>
 800f764:	2800      	cmp	r0, #0
 800f766:	db40      	blt.n	800f7ea <__ieee754_sqrt+0x17a>
 800f768:	f102 0801 	add.w	r8, r2, #1
 800f76c:	1a9b      	subs	r3, r3, r2
 800f76e:	458e      	cmp	lr, r1
 800f770:	bf88      	it	hi
 800f772:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f776:	eba1 010e 	sub.w	r1, r1, lr
 800f77a:	4464      	add	r4, ip
 800f77c:	4642      	mov	r2, r8
 800f77e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f782:	3f01      	subs	r7, #1
 800f784:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f788:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f78c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f790:	d1dc      	bne.n	800f74c <__ieee754_sqrt+0xdc>
 800f792:	4319      	orrs	r1, r3
 800f794:	d01b      	beq.n	800f7ce <__ieee754_sqrt+0x15e>
 800f796:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f81c <__ieee754_sqrt+0x1ac>
 800f79a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f820 <__ieee754_sqrt+0x1b0>
 800f79e:	e9da 0100 	ldrd	r0, r1, [sl]
 800f7a2:	e9db 2300 	ldrd	r2, r3, [fp]
 800f7a6:	f7f0 fd77 	bl	8000298 <__aeabi_dsub>
 800f7aa:	e9da 8900 	ldrd	r8, r9, [sl]
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	460b      	mov	r3, r1
 800f7b2:	4640      	mov	r0, r8
 800f7b4:	4649      	mov	r1, r9
 800f7b6:	f7f1 f9a3 	bl	8000b00 <__aeabi_dcmple>
 800f7ba:	b140      	cbz	r0, 800f7ce <__ieee754_sqrt+0x15e>
 800f7bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f7c0:	e9da 0100 	ldrd	r0, r1, [sl]
 800f7c4:	e9db 2300 	ldrd	r2, r3, [fp]
 800f7c8:	d111      	bne.n	800f7ee <__ieee754_sqrt+0x17e>
 800f7ca:	3601      	adds	r6, #1
 800f7cc:	463c      	mov	r4, r7
 800f7ce:	1072      	asrs	r2, r6, #1
 800f7d0:	0863      	lsrs	r3, r4, #1
 800f7d2:	07f1      	lsls	r1, r6, #31
 800f7d4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f7d8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f7dc:	bf48      	it	mi
 800f7de:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f7e2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	e756      	b.n	800f698 <__ieee754_sqrt+0x28>
 800f7ea:	4690      	mov	r8, r2
 800f7ec:	e7be      	b.n	800f76c <__ieee754_sqrt+0xfc>
 800f7ee:	f7f0 fd55 	bl	800029c <__adddf3>
 800f7f2:	e9da 8900 	ldrd	r8, r9, [sl]
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	460b      	mov	r3, r1
 800f7fa:	4640      	mov	r0, r8
 800f7fc:	4649      	mov	r1, r9
 800f7fe:	f7f1 f975 	bl	8000aec <__aeabi_dcmplt>
 800f802:	b120      	cbz	r0, 800f80e <__ieee754_sqrt+0x19e>
 800f804:	1ca0      	adds	r0, r4, #2
 800f806:	bf08      	it	eq
 800f808:	3601      	addeq	r6, #1
 800f80a:	3402      	adds	r4, #2
 800f80c:	e7df      	b.n	800f7ce <__ieee754_sqrt+0x15e>
 800f80e:	1c63      	adds	r3, r4, #1
 800f810:	f023 0401 	bic.w	r4, r3, #1
 800f814:	e7db      	b.n	800f7ce <__ieee754_sqrt+0x15e>
 800f816:	bf00      	nop
 800f818:	7ff00000 	.word	0x7ff00000
 800f81c:	20000228 	.word	0x20000228
 800f820:	20000220 	.word	0x20000220
 800f824:	00000000 	.word	0x00000000

0800f828 <__ieee754_atan2>:
 800f828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f82c:	ec57 6b11 	vmov	r6, r7, d1
 800f830:	4273      	negs	r3, r6
 800f832:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800f9b0 <__ieee754_atan2+0x188>
 800f836:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800f83a:	4333      	orrs	r3, r6
 800f83c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f840:	4543      	cmp	r3, r8
 800f842:	ec51 0b10 	vmov	r0, r1, d0
 800f846:	4635      	mov	r5, r6
 800f848:	d809      	bhi.n	800f85e <__ieee754_atan2+0x36>
 800f84a:	4244      	negs	r4, r0
 800f84c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f850:	4304      	orrs	r4, r0
 800f852:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f856:	4544      	cmp	r4, r8
 800f858:	468e      	mov	lr, r1
 800f85a:	4681      	mov	r9, r0
 800f85c:	d907      	bls.n	800f86e <__ieee754_atan2+0x46>
 800f85e:	4632      	mov	r2, r6
 800f860:	463b      	mov	r3, r7
 800f862:	f7f0 fd1b 	bl	800029c <__adddf3>
 800f866:	ec41 0b10 	vmov	d0, r0, r1
 800f86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f86e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800f872:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800f876:	4334      	orrs	r4, r6
 800f878:	d103      	bne.n	800f882 <__ieee754_atan2+0x5a>
 800f87a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f87e:	f000 b89b 	b.w	800f9b8 <atan>
 800f882:	17bc      	asrs	r4, r7, #30
 800f884:	f004 0402 	and.w	r4, r4, #2
 800f888:	ea53 0909 	orrs.w	r9, r3, r9
 800f88c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f890:	d107      	bne.n	800f8a2 <__ieee754_atan2+0x7a>
 800f892:	2c02      	cmp	r4, #2
 800f894:	d05f      	beq.n	800f956 <__ieee754_atan2+0x12e>
 800f896:	2c03      	cmp	r4, #3
 800f898:	d1e5      	bne.n	800f866 <__ieee754_atan2+0x3e>
 800f89a:	a141      	add	r1, pc, #260	@ (adr r1, 800f9a0 <__ieee754_atan2+0x178>)
 800f89c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8a0:	e7e1      	b.n	800f866 <__ieee754_atan2+0x3e>
 800f8a2:	4315      	orrs	r5, r2
 800f8a4:	d106      	bne.n	800f8b4 <__ieee754_atan2+0x8c>
 800f8a6:	f1be 0f00 	cmp.w	lr, #0
 800f8aa:	da5f      	bge.n	800f96c <__ieee754_atan2+0x144>
 800f8ac:	a13e      	add	r1, pc, #248	@ (adr r1, 800f9a8 <__ieee754_atan2+0x180>)
 800f8ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8b2:	e7d8      	b.n	800f866 <__ieee754_atan2+0x3e>
 800f8b4:	4542      	cmp	r2, r8
 800f8b6:	d10f      	bne.n	800f8d8 <__ieee754_atan2+0xb0>
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	f104 34ff 	add.w	r4, r4, #4294967295
 800f8be:	d107      	bne.n	800f8d0 <__ieee754_atan2+0xa8>
 800f8c0:	2c02      	cmp	r4, #2
 800f8c2:	d84c      	bhi.n	800f95e <__ieee754_atan2+0x136>
 800f8c4:	4b34      	ldr	r3, [pc, #208]	@ (800f998 <__ieee754_atan2+0x170>)
 800f8c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f8ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f8ce:	e7ca      	b.n	800f866 <__ieee754_atan2+0x3e>
 800f8d0:	2c02      	cmp	r4, #2
 800f8d2:	d848      	bhi.n	800f966 <__ieee754_atan2+0x13e>
 800f8d4:	4b31      	ldr	r3, [pc, #196]	@ (800f99c <__ieee754_atan2+0x174>)
 800f8d6:	e7f6      	b.n	800f8c6 <__ieee754_atan2+0x9e>
 800f8d8:	4543      	cmp	r3, r8
 800f8da:	d0e4      	beq.n	800f8a6 <__ieee754_atan2+0x7e>
 800f8dc:	1a9b      	subs	r3, r3, r2
 800f8de:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800f8e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f8e6:	da1e      	bge.n	800f926 <__ieee754_atan2+0xfe>
 800f8e8:	2f00      	cmp	r7, #0
 800f8ea:	da01      	bge.n	800f8f0 <__ieee754_atan2+0xc8>
 800f8ec:	323c      	adds	r2, #60	@ 0x3c
 800f8ee:	db1e      	blt.n	800f92e <__ieee754_atan2+0x106>
 800f8f0:	4632      	mov	r2, r6
 800f8f2:	463b      	mov	r3, r7
 800f8f4:	f7f0 ffb2 	bl	800085c <__aeabi_ddiv>
 800f8f8:	ec41 0b10 	vmov	d0, r0, r1
 800f8fc:	f7ff fdea 	bl	800f4d4 <fabs>
 800f900:	f000 f85a 	bl	800f9b8 <atan>
 800f904:	ec51 0b10 	vmov	r0, r1, d0
 800f908:	2c01      	cmp	r4, #1
 800f90a:	d013      	beq.n	800f934 <__ieee754_atan2+0x10c>
 800f90c:	2c02      	cmp	r4, #2
 800f90e:	d015      	beq.n	800f93c <__ieee754_atan2+0x114>
 800f910:	2c00      	cmp	r4, #0
 800f912:	d0a8      	beq.n	800f866 <__ieee754_atan2+0x3e>
 800f914:	a318      	add	r3, pc, #96	@ (adr r3, 800f978 <__ieee754_atan2+0x150>)
 800f916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91a:	f7f0 fcbd 	bl	8000298 <__aeabi_dsub>
 800f91e:	a318      	add	r3, pc, #96	@ (adr r3, 800f980 <__ieee754_atan2+0x158>)
 800f920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f924:	e014      	b.n	800f950 <__ieee754_atan2+0x128>
 800f926:	a118      	add	r1, pc, #96	@ (adr r1, 800f988 <__ieee754_atan2+0x160>)
 800f928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f92c:	e7ec      	b.n	800f908 <__ieee754_atan2+0xe0>
 800f92e:	2000      	movs	r0, #0
 800f930:	2100      	movs	r1, #0
 800f932:	e7e9      	b.n	800f908 <__ieee754_atan2+0xe0>
 800f934:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f938:	4619      	mov	r1, r3
 800f93a:	e794      	b.n	800f866 <__ieee754_atan2+0x3e>
 800f93c:	a30e      	add	r3, pc, #56	@ (adr r3, 800f978 <__ieee754_atan2+0x150>)
 800f93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f942:	f7f0 fca9 	bl	8000298 <__aeabi_dsub>
 800f946:	4602      	mov	r2, r0
 800f948:	460b      	mov	r3, r1
 800f94a:	a10d      	add	r1, pc, #52	@ (adr r1, 800f980 <__ieee754_atan2+0x158>)
 800f94c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f950:	f7f0 fca2 	bl	8000298 <__aeabi_dsub>
 800f954:	e787      	b.n	800f866 <__ieee754_atan2+0x3e>
 800f956:	a10a      	add	r1, pc, #40	@ (adr r1, 800f980 <__ieee754_atan2+0x158>)
 800f958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f95c:	e783      	b.n	800f866 <__ieee754_atan2+0x3e>
 800f95e:	a10c      	add	r1, pc, #48	@ (adr r1, 800f990 <__ieee754_atan2+0x168>)
 800f960:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f964:	e77f      	b.n	800f866 <__ieee754_atan2+0x3e>
 800f966:	2000      	movs	r0, #0
 800f968:	2100      	movs	r1, #0
 800f96a:	e77c      	b.n	800f866 <__ieee754_atan2+0x3e>
 800f96c:	a106      	add	r1, pc, #24	@ (adr r1, 800f988 <__ieee754_atan2+0x160>)
 800f96e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f972:	e778      	b.n	800f866 <__ieee754_atan2+0x3e>
 800f974:	f3af 8000 	nop.w
 800f978:	33145c07 	.word	0x33145c07
 800f97c:	3ca1a626 	.word	0x3ca1a626
 800f980:	54442d18 	.word	0x54442d18
 800f984:	400921fb 	.word	0x400921fb
 800f988:	54442d18 	.word	0x54442d18
 800f98c:	3ff921fb 	.word	0x3ff921fb
 800f990:	54442d18 	.word	0x54442d18
 800f994:	3fe921fb 	.word	0x3fe921fb
 800f998:	08011fa8 	.word	0x08011fa8
 800f99c:	08011f90 	.word	0x08011f90
 800f9a0:	54442d18 	.word	0x54442d18
 800f9a4:	c00921fb 	.word	0xc00921fb
 800f9a8:	54442d18 	.word	0x54442d18
 800f9ac:	bff921fb 	.word	0xbff921fb
 800f9b0:	7ff00000 	.word	0x7ff00000
 800f9b4:	00000000 	.word	0x00000000

0800f9b8 <atan>:
 800f9b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9bc:	ec55 4b10 	vmov	r4, r5, d0
 800f9c0:	4bbf      	ldr	r3, [pc, #764]	@ (800fcc0 <atan+0x308>)
 800f9c2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f9c6:	429e      	cmp	r6, r3
 800f9c8:	46ab      	mov	fp, r5
 800f9ca:	d918      	bls.n	800f9fe <atan+0x46>
 800f9cc:	4bbd      	ldr	r3, [pc, #756]	@ (800fcc4 <atan+0x30c>)
 800f9ce:	429e      	cmp	r6, r3
 800f9d0:	d801      	bhi.n	800f9d6 <atan+0x1e>
 800f9d2:	d109      	bne.n	800f9e8 <atan+0x30>
 800f9d4:	b144      	cbz	r4, 800f9e8 <atan+0x30>
 800f9d6:	4622      	mov	r2, r4
 800f9d8:	462b      	mov	r3, r5
 800f9da:	4620      	mov	r0, r4
 800f9dc:	4629      	mov	r1, r5
 800f9de:	f7f0 fc5d 	bl	800029c <__adddf3>
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	460d      	mov	r5, r1
 800f9e6:	e006      	b.n	800f9f6 <atan+0x3e>
 800f9e8:	f1bb 0f00 	cmp.w	fp, #0
 800f9ec:	f340 812b 	ble.w	800fc46 <atan+0x28e>
 800f9f0:	a597      	add	r5, pc, #604	@ (adr r5, 800fc50 <atan+0x298>)
 800f9f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f9f6:	ec45 4b10 	vmov	d0, r4, r5
 800f9fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9fe:	4bb2      	ldr	r3, [pc, #712]	@ (800fcc8 <atan+0x310>)
 800fa00:	429e      	cmp	r6, r3
 800fa02:	d813      	bhi.n	800fa2c <atan+0x74>
 800fa04:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800fa08:	429e      	cmp	r6, r3
 800fa0a:	d80c      	bhi.n	800fa26 <atan+0x6e>
 800fa0c:	a392      	add	r3, pc, #584	@ (adr r3, 800fc58 <atan+0x2a0>)
 800fa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa12:	4620      	mov	r0, r4
 800fa14:	4629      	mov	r1, r5
 800fa16:	f7f0 fc41 	bl	800029c <__adddf3>
 800fa1a:	4bac      	ldr	r3, [pc, #688]	@ (800fccc <atan+0x314>)
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	f7f1 f883 	bl	8000b28 <__aeabi_dcmpgt>
 800fa22:	2800      	cmp	r0, #0
 800fa24:	d1e7      	bne.n	800f9f6 <atan+0x3e>
 800fa26:	f04f 3aff 	mov.w	sl, #4294967295
 800fa2a:	e029      	b.n	800fa80 <atan+0xc8>
 800fa2c:	f7ff fd52 	bl	800f4d4 <fabs>
 800fa30:	4ba7      	ldr	r3, [pc, #668]	@ (800fcd0 <atan+0x318>)
 800fa32:	429e      	cmp	r6, r3
 800fa34:	ec55 4b10 	vmov	r4, r5, d0
 800fa38:	f200 80bc 	bhi.w	800fbb4 <atan+0x1fc>
 800fa3c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800fa40:	429e      	cmp	r6, r3
 800fa42:	f200 809e 	bhi.w	800fb82 <atan+0x1ca>
 800fa46:	4622      	mov	r2, r4
 800fa48:	462b      	mov	r3, r5
 800fa4a:	4620      	mov	r0, r4
 800fa4c:	4629      	mov	r1, r5
 800fa4e:	f7f0 fc25 	bl	800029c <__adddf3>
 800fa52:	4b9e      	ldr	r3, [pc, #632]	@ (800fccc <atan+0x314>)
 800fa54:	2200      	movs	r2, #0
 800fa56:	f7f0 fc1f 	bl	8000298 <__aeabi_dsub>
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	4606      	mov	r6, r0
 800fa5e:	460f      	mov	r7, r1
 800fa60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fa64:	4620      	mov	r0, r4
 800fa66:	4629      	mov	r1, r5
 800fa68:	f7f0 fc18 	bl	800029c <__adddf3>
 800fa6c:	4602      	mov	r2, r0
 800fa6e:	460b      	mov	r3, r1
 800fa70:	4630      	mov	r0, r6
 800fa72:	4639      	mov	r1, r7
 800fa74:	f7f0 fef2 	bl	800085c <__aeabi_ddiv>
 800fa78:	f04f 0a00 	mov.w	sl, #0
 800fa7c:	4604      	mov	r4, r0
 800fa7e:	460d      	mov	r5, r1
 800fa80:	4622      	mov	r2, r4
 800fa82:	462b      	mov	r3, r5
 800fa84:	4620      	mov	r0, r4
 800fa86:	4629      	mov	r1, r5
 800fa88:	f7f0 fdbe 	bl	8000608 <__aeabi_dmul>
 800fa8c:	4602      	mov	r2, r0
 800fa8e:	460b      	mov	r3, r1
 800fa90:	4680      	mov	r8, r0
 800fa92:	4689      	mov	r9, r1
 800fa94:	f7f0 fdb8 	bl	8000608 <__aeabi_dmul>
 800fa98:	a371      	add	r3, pc, #452	@ (adr r3, 800fc60 <atan+0x2a8>)
 800fa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9e:	4606      	mov	r6, r0
 800faa0:	460f      	mov	r7, r1
 800faa2:	f7f0 fdb1 	bl	8000608 <__aeabi_dmul>
 800faa6:	a370      	add	r3, pc, #448	@ (adr r3, 800fc68 <atan+0x2b0>)
 800faa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faac:	f7f0 fbf6 	bl	800029c <__adddf3>
 800fab0:	4632      	mov	r2, r6
 800fab2:	463b      	mov	r3, r7
 800fab4:	f7f0 fda8 	bl	8000608 <__aeabi_dmul>
 800fab8:	a36d      	add	r3, pc, #436	@ (adr r3, 800fc70 <atan+0x2b8>)
 800faba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabe:	f7f0 fbed 	bl	800029c <__adddf3>
 800fac2:	4632      	mov	r2, r6
 800fac4:	463b      	mov	r3, r7
 800fac6:	f7f0 fd9f 	bl	8000608 <__aeabi_dmul>
 800faca:	a36b      	add	r3, pc, #428	@ (adr r3, 800fc78 <atan+0x2c0>)
 800facc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad0:	f7f0 fbe4 	bl	800029c <__adddf3>
 800fad4:	4632      	mov	r2, r6
 800fad6:	463b      	mov	r3, r7
 800fad8:	f7f0 fd96 	bl	8000608 <__aeabi_dmul>
 800fadc:	a368      	add	r3, pc, #416	@ (adr r3, 800fc80 <atan+0x2c8>)
 800fade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae2:	f7f0 fbdb 	bl	800029c <__adddf3>
 800fae6:	4632      	mov	r2, r6
 800fae8:	463b      	mov	r3, r7
 800faea:	f7f0 fd8d 	bl	8000608 <__aeabi_dmul>
 800faee:	a366      	add	r3, pc, #408	@ (adr r3, 800fc88 <atan+0x2d0>)
 800faf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf4:	f7f0 fbd2 	bl	800029c <__adddf3>
 800faf8:	4642      	mov	r2, r8
 800fafa:	464b      	mov	r3, r9
 800fafc:	f7f0 fd84 	bl	8000608 <__aeabi_dmul>
 800fb00:	a363      	add	r3, pc, #396	@ (adr r3, 800fc90 <atan+0x2d8>)
 800fb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb06:	4680      	mov	r8, r0
 800fb08:	4689      	mov	r9, r1
 800fb0a:	4630      	mov	r0, r6
 800fb0c:	4639      	mov	r1, r7
 800fb0e:	f7f0 fd7b 	bl	8000608 <__aeabi_dmul>
 800fb12:	a361      	add	r3, pc, #388	@ (adr r3, 800fc98 <atan+0x2e0>)
 800fb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb18:	f7f0 fbbe 	bl	8000298 <__aeabi_dsub>
 800fb1c:	4632      	mov	r2, r6
 800fb1e:	463b      	mov	r3, r7
 800fb20:	f7f0 fd72 	bl	8000608 <__aeabi_dmul>
 800fb24:	a35e      	add	r3, pc, #376	@ (adr r3, 800fca0 <atan+0x2e8>)
 800fb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2a:	f7f0 fbb5 	bl	8000298 <__aeabi_dsub>
 800fb2e:	4632      	mov	r2, r6
 800fb30:	463b      	mov	r3, r7
 800fb32:	f7f0 fd69 	bl	8000608 <__aeabi_dmul>
 800fb36:	a35c      	add	r3, pc, #368	@ (adr r3, 800fca8 <atan+0x2f0>)
 800fb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3c:	f7f0 fbac 	bl	8000298 <__aeabi_dsub>
 800fb40:	4632      	mov	r2, r6
 800fb42:	463b      	mov	r3, r7
 800fb44:	f7f0 fd60 	bl	8000608 <__aeabi_dmul>
 800fb48:	a359      	add	r3, pc, #356	@ (adr r3, 800fcb0 <atan+0x2f8>)
 800fb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4e:	f7f0 fba3 	bl	8000298 <__aeabi_dsub>
 800fb52:	4632      	mov	r2, r6
 800fb54:	463b      	mov	r3, r7
 800fb56:	f7f0 fd57 	bl	8000608 <__aeabi_dmul>
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	4640      	mov	r0, r8
 800fb60:	4649      	mov	r1, r9
 800fb62:	f7f0 fb9b 	bl	800029c <__adddf3>
 800fb66:	4622      	mov	r2, r4
 800fb68:	462b      	mov	r3, r5
 800fb6a:	f7f0 fd4d 	bl	8000608 <__aeabi_dmul>
 800fb6e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fb72:	4602      	mov	r2, r0
 800fb74:	460b      	mov	r3, r1
 800fb76:	d148      	bne.n	800fc0a <atan+0x252>
 800fb78:	4620      	mov	r0, r4
 800fb7a:	4629      	mov	r1, r5
 800fb7c:	f7f0 fb8c 	bl	8000298 <__aeabi_dsub>
 800fb80:	e72f      	b.n	800f9e2 <atan+0x2a>
 800fb82:	4b52      	ldr	r3, [pc, #328]	@ (800fccc <atan+0x314>)
 800fb84:	2200      	movs	r2, #0
 800fb86:	4620      	mov	r0, r4
 800fb88:	4629      	mov	r1, r5
 800fb8a:	f7f0 fb85 	bl	8000298 <__aeabi_dsub>
 800fb8e:	4b4f      	ldr	r3, [pc, #316]	@ (800fccc <atan+0x314>)
 800fb90:	4606      	mov	r6, r0
 800fb92:	460f      	mov	r7, r1
 800fb94:	2200      	movs	r2, #0
 800fb96:	4620      	mov	r0, r4
 800fb98:	4629      	mov	r1, r5
 800fb9a:	f7f0 fb7f 	bl	800029c <__adddf3>
 800fb9e:	4602      	mov	r2, r0
 800fba0:	460b      	mov	r3, r1
 800fba2:	4630      	mov	r0, r6
 800fba4:	4639      	mov	r1, r7
 800fba6:	f7f0 fe59 	bl	800085c <__aeabi_ddiv>
 800fbaa:	f04f 0a01 	mov.w	sl, #1
 800fbae:	4604      	mov	r4, r0
 800fbb0:	460d      	mov	r5, r1
 800fbb2:	e765      	b.n	800fa80 <atan+0xc8>
 800fbb4:	4b47      	ldr	r3, [pc, #284]	@ (800fcd4 <atan+0x31c>)
 800fbb6:	429e      	cmp	r6, r3
 800fbb8:	d21c      	bcs.n	800fbf4 <atan+0x23c>
 800fbba:	4b47      	ldr	r3, [pc, #284]	@ (800fcd8 <atan+0x320>)
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	4629      	mov	r1, r5
 800fbc2:	f7f0 fb69 	bl	8000298 <__aeabi_dsub>
 800fbc6:	4b44      	ldr	r3, [pc, #272]	@ (800fcd8 <atan+0x320>)
 800fbc8:	4606      	mov	r6, r0
 800fbca:	460f      	mov	r7, r1
 800fbcc:	2200      	movs	r2, #0
 800fbce:	4620      	mov	r0, r4
 800fbd0:	4629      	mov	r1, r5
 800fbd2:	f7f0 fd19 	bl	8000608 <__aeabi_dmul>
 800fbd6:	4b3d      	ldr	r3, [pc, #244]	@ (800fccc <atan+0x314>)
 800fbd8:	2200      	movs	r2, #0
 800fbda:	f7f0 fb5f 	bl	800029c <__adddf3>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	4630      	mov	r0, r6
 800fbe4:	4639      	mov	r1, r7
 800fbe6:	f7f0 fe39 	bl	800085c <__aeabi_ddiv>
 800fbea:	f04f 0a02 	mov.w	sl, #2
 800fbee:	4604      	mov	r4, r0
 800fbf0:	460d      	mov	r5, r1
 800fbf2:	e745      	b.n	800fa80 <atan+0xc8>
 800fbf4:	4622      	mov	r2, r4
 800fbf6:	462b      	mov	r3, r5
 800fbf8:	4938      	ldr	r1, [pc, #224]	@ (800fcdc <atan+0x324>)
 800fbfa:	2000      	movs	r0, #0
 800fbfc:	f7f0 fe2e 	bl	800085c <__aeabi_ddiv>
 800fc00:	f04f 0a03 	mov.w	sl, #3
 800fc04:	4604      	mov	r4, r0
 800fc06:	460d      	mov	r5, r1
 800fc08:	e73a      	b.n	800fa80 <atan+0xc8>
 800fc0a:	4b35      	ldr	r3, [pc, #212]	@ (800fce0 <atan+0x328>)
 800fc0c:	4e35      	ldr	r6, [pc, #212]	@ (800fce4 <atan+0x32c>)
 800fc0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc16:	f7f0 fb3f 	bl	8000298 <__aeabi_dsub>
 800fc1a:	4622      	mov	r2, r4
 800fc1c:	462b      	mov	r3, r5
 800fc1e:	f7f0 fb3b 	bl	8000298 <__aeabi_dsub>
 800fc22:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fc26:	4602      	mov	r2, r0
 800fc28:	460b      	mov	r3, r1
 800fc2a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fc2e:	f7f0 fb33 	bl	8000298 <__aeabi_dsub>
 800fc32:	f1bb 0f00 	cmp.w	fp, #0
 800fc36:	4604      	mov	r4, r0
 800fc38:	460d      	mov	r5, r1
 800fc3a:	f6bf aedc 	bge.w	800f9f6 <atan+0x3e>
 800fc3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fc42:	461d      	mov	r5, r3
 800fc44:	e6d7      	b.n	800f9f6 <atan+0x3e>
 800fc46:	a51c      	add	r5, pc, #112	@ (adr r5, 800fcb8 <atan+0x300>)
 800fc48:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fc4c:	e6d3      	b.n	800f9f6 <atan+0x3e>
 800fc4e:	bf00      	nop
 800fc50:	54442d18 	.word	0x54442d18
 800fc54:	3ff921fb 	.word	0x3ff921fb
 800fc58:	8800759c 	.word	0x8800759c
 800fc5c:	7e37e43c 	.word	0x7e37e43c
 800fc60:	e322da11 	.word	0xe322da11
 800fc64:	3f90ad3a 	.word	0x3f90ad3a
 800fc68:	24760deb 	.word	0x24760deb
 800fc6c:	3fa97b4b 	.word	0x3fa97b4b
 800fc70:	a0d03d51 	.word	0xa0d03d51
 800fc74:	3fb10d66 	.word	0x3fb10d66
 800fc78:	c54c206e 	.word	0xc54c206e
 800fc7c:	3fb745cd 	.word	0x3fb745cd
 800fc80:	920083ff 	.word	0x920083ff
 800fc84:	3fc24924 	.word	0x3fc24924
 800fc88:	5555550d 	.word	0x5555550d
 800fc8c:	3fd55555 	.word	0x3fd55555
 800fc90:	2c6a6c2f 	.word	0x2c6a6c2f
 800fc94:	bfa2b444 	.word	0xbfa2b444
 800fc98:	52defd9a 	.word	0x52defd9a
 800fc9c:	3fadde2d 	.word	0x3fadde2d
 800fca0:	af749a6d 	.word	0xaf749a6d
 800fca4:	3fb3b0f2 	.word	0x3fb3b0f2
 800fca8:	fe231671 	.word	0xfe231671
 800fcac:	3fbc71c6 	.word	0x3fbc71c6
 800fcb0:	9998ebc4 	.word	0x9998ebc4
 800fcb4:	3fc99999 	.word	0x3fc99999
 800fcb8:	54442d18 	.word	0x54442d18
 800fcbc:	bff921fb 	.word	0xbff921fb
 800fcc0:	440fffff 	.word	0x440fffff
 800fcc4:	7ff00000 	.word	0x7ff00000
 800fcc8:	3fdbffff 	.word	0x3fdbffff
 800fccc:	3ff00000 	.word	0x3ff00000
 800fcd0:	3ff2ffff 	.word	0x3ff2ffff
 800fcd4:	40038000 	.word	0x40038000
 800fcd8:	3ff80000 	.word	0x3ff80000
 800fcdc:	bff00000 	.word	0xbff00000
 800fce0:	08011fc0 	.word	0x08011fc0
 800fce4:	08011fe0 	.word	0x08011fe0

0800fce8 <__kernel_cosf>:
 800fce8:	ee10 3a10 	vmov	r3, s0
 800fcec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fcf0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800fcf4:	eef0 6a40 	vmov.f32	s13, s0
 800fcf8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fcfc:	d204      	bcs.n	800fd08 <__kernel_cosf+0x20>
 800fcfe:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800fd02:	ee17 2a90 	vmov	r2, s15
 800fd06:	b342      	cbz	r2, 800fd5a <__kernel_cosf+0x72>
 800fd08:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fd0c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800fd78 <__kernel_cosf+0x90>
 800fd10:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800fd7c <__kernel_cosf+0x94>
 800fd14:	4a1a      	ldr	r2, [pc, #104]	@ (800fd80 <__kernel_cosf+0x98>)
 800fd16:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fd84 <__kernel_cosf+0x9c>
 800fd20:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fd24:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800fd88 <__kernel_cosf+0xa0>
 800fd28:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fd2c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800fd8c <__kernel_cosf+0xa4>
 800fd30:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fd34:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800fd90 <__kernel_cosf+0xa8>
 800fd38:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fd3c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800fd40:	ee26 6a07 	vmul.f32	s12, s12, s14
 800fd44:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fd48:	eee7 0a06 	vfma.f32	s1, s14, s12
 800fd4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd50:	d804      	bhi.n	800fd5c <__kernel_cosf+0x74>
 800fd52:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800fd56:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fd5a:	4770      	bx	lr
 800fd5c:	4a0d      	ldr	r2, [pc, #52]	@ (800fd94 <__kernel_cosf+0xac>)
 800fd5e:	4293      	cmp	r3, r2
 800fd60:	bf9a      	itte	ls
 800fd62:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800fd66:	ee07 3a10 	vmovls	s14, r3
 800fd6a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800fd6e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fd72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd76:	e7ec      	b.n	800fd52 <__kernel_cosf+0x6a>
 800fd78:	ad47d74e 	.word	0xad47d74e
 800fd7c:	310f74f6 	.word	0x310f74f6
 800fd80:	3e999999 	.word	0x3e999999
 800fd84:	b493f27c 	.word	0xb493f27c
 800fd88:	37d00d01 	.word	0x37d00d01
 800fd8c:	bab60b61 	.word	0xbab60b61
 800fd90:	3d2aaaab 	.word	0x3d2aaaab
 800fd94:	3f480000 	.word	0x3f480000

0800fd98 <__kernel_sinf>:
 800fd98:	ee10 3a10 	vmov	r3, s0
 800fd9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fda0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800fda4:	d204      	bcs.n	800fdb0 <__kernel_sinf+0x18>
 800fda6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fdaa:	ee17 3a90 	vmov	r3, s15
 800fdae:	b35b      	cbz	r3, 800fe08 <__kernel_sinf+0x70>
 800fdb0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fdb4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800fe0c <__kernel_sinf+0x74>
 800fdb8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800fe10 <__kernel_sinf+0x78>
 800fdbc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fdc0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800fe14 <__kernel_sinf+0x7c>
 800fdc4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fdc8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800fe18 <__kernel_sinf+0x80>
 800fdcc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fdd0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800fe1c <__kernel_sinf+0x84>
 800fdd4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800fdd8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fddc:	b930      	cbnz	r0, 800fdec <__kernel_sinf+0x54>
 800fdde:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800fe20 <__kernel_sinf+0x88>
 800fde2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fde6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fdea:	4770      	bx	lr
 800fdec:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fdf0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800fdf4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800fdf8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800fdfc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800fe24 <__kernel_sinf+0x8c>
 800fe00:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800fe04:	ee30 0a60 	vsub.f32	s0, s0, s1
 800fe08:	4770      	bx	lr
 800fe0a:	bf00      	nop
 800fe0c:	2f2ec9d3 	.word	0x2f2ec9d3
 800fe10:	b2d72f34 	.word	0xb2d72f34
 800fe14:	3638ef1b 	.word	0x3638ef1b
 800fe18:	b9500d01 	.word	0xb9500d01
 800fe1c:	3c088889 	.word	0x3c088889
 800fe20:	be2aaaab 	.word	0xbe2aaaab
 800fe24:	3e2aaaab 	.word	0x3e2aaaab

0800fe28 <__ieee754_asinf>:
 800fe28:	b538      	push	{r3, r4, r5, lr}
 800fe2a:	ee10 5a10 	vmov	r5, s0
 800fe2e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800fe32:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800fe36:	ed2d 8b04 	vpush	{d8-d9}
 800fe3a:	d10c      	bne.n	800fe56 <__ieee754_asinf+0x2e>
 800fe3c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800ffb4 <__ieee754_asinf+0x18c>
 800fe40:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800ffb8 <__ieee754_asinf+0x190>
 800fe44:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fe48:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fe4c:	eeb0 0a67 	vmov.f32	s0, s15
 800fe50:	ecbd 8b04 	vpop	{d8-d9}
 800fe54:	bd38      	pop	{r3, r4, r5, pc}
 800fe56:	d904      	bls.n	800fe62 <__ieee754_asinf+0x3a>
 800fe58:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fe5c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800fe60:	e7f6      	b.n	800fe50 <__ieee754_asinf+0x28>
 800fe62:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800fe66:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800fe6a:	d20b      	bcs.n	800fe84 <__ieee754_asinf+0x5c>
 800fe6c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800fe70:	d252      	bcs.n	800ff18 <__ieee754_asinf+0xf0>
 800fe72:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800ffbc <__ieee754_asinf+0x194>
 800fe76:	ee70 7a27 	vadd.f32	s15, s0, s15
 800fe7a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800fe7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe82:	dce5      	bgt.n	800fe50 <__ieee754_asinf+0x28>
 800fe84:	f7ff fba0 	bl	800f5c8 <fabsf>
 800fe88:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800fe8c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fe90:	ee28 8a27 	vmul.f32	s16, s16, s15
 800fe94:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800ffc0 <__ieee754_asinf+0x198>
 800fe98:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800ffc4 <__ieee754_asinf+0x19c>
 800fe9c:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800ffc8 <__ieee754_asinf+0x1a0>
 800fea0:	eea8 7a27 	vfma.f32	s14, s16, s15
 800fea4:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800ffcc <__ieee754_asinf+0x1a4>
 800fea8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800feac:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800ffd0 <__ieee754_asinf+0x1a8>
 800feb0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800feb4:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800ffd4 <__ieee754_asinf+0x1ac>
 800feb8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800febc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800ffd8 <__ieee754_asinf+0x1b0>
 800fec0:	eea7 9a88 	vfma.f32	s18, s15, s16
 800fec4:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800ffdc <__ieee754_asinf+0x1b4>
 800fec8:	eee8 7a07 	vfma.f32	s15, s16, s14
 800fecc:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800ffe0 <__ieee754_asinf+0x1b8>
 800fed0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800fed4:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800ffe4 <__ieee754_asinf+0x1bc>
 800fed8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800fedc:	eeb0 0a48 	vmov.f32	s0, s16
 800fee0:	eee7 8a88 	vfma.f32	s17, s15, s16
 800fee4:	f000 fb2a 	bl	801053c <__ieee754_sqrtf>
 800fee8:	4b3f      	ldr	r3, [pc, #252]	@ (800ffe8 <__ieee754_asinf+0x1c0>)
 800feea:	ee29 9a08 	vmul.f32	s18, s18, s16
 800feee:	429c      	cmp	r4, r3
 800fef0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800fef4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800fef8:	d93d      	bls.n	800ff76 <__ieee754_asinf+0x14e>
 800fefa:	eea0 0a06 	vfma.f32	s0, s0, s12
 800fefe:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800ffec <__ieee754_asinf+0x1c4>
 800ff02:	eee0 7a26 	vfma.f32	s15, s0, s13
 800ff06:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800ffb8 <__ieee754_asinf+0x190>
 800ff0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ff0e:	2d00      	cmp	r5, #0
 800ff10:	bfd8      	it	le
 800ff12:	eeb1 0a40 	vnegle.f32	s0, s0
 800ff16:	e79b      	b.n	800fe50 <__ieee754_asinf+0x28>
 800ff18:	ee60 7a00 	vmul.f32	s15, s0, s0
 800ff1c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800ffc4 <__ieee754_asinf+0x19c>
 800ff20:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800ffc0 <__ieee754_asinf+0x198>
 800ff24:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800ffd8 <__ieee754_asinf+0x1b0>
 800ff28:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ff2c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800ffcc <__ieee754_asinf+0x1a4>
 800ff30:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ff34:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800ffd0 <__ieee754_asinf+0x1a8>
 800ff38:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ff3c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800ffd4 <__ieee754_asinf+0x1ac>
 800ff40:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ff44:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800ffc8 <__ieee754_asinf+0x1a0>
 800ff48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ff4c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800ffdc <__ieee754_asinf+0x1b4>
 800ff50:	eee7 6a86 	vfma.f32	s13, s15, s12
 800ff54:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800ffe0 <__ieee754_asinf+0x1b8>
 800ff58:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800ff5c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800ffe4 <__ieee754_asinf+0x1bc>
 800ff60:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ff64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff68:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800ff6c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800ff70:	eea0 0a27 	vfma.f32	s0, s0, s15
 800ff74:	e76c      	b.n	800fe50 <__ieee754_asinf+0x28>
 800ff76:	ee10 3a10 	vmov	r3, s0
 800ff7a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800ff7e:	f023 030f 	bic.w	r3, r3, #15
 800ff82:	ee07 3a10 	vmov	s14, r3
 800ff86:	eea7 8a47 	vfms.f32	s16, s14, s14
 800ff8a:	ee70 5a00 	vadd.f32	s11, s0, s0
 800ff8e:	ee30 0a07 	vadd.f32	s0, s0, s14
 800ff92:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ffb4 <__ieee754_asinf+0x18c>
 800ff96:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800ff9a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800fff0 <__ieee754_asinf+0x1c8>
 800ff9e:	eee5 7a66 	vfms.f32	s15, s10, s13
 800ffa2:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800ffa6:	eeb0 6a40 	vmov.f32	s12, s0
 800ffaa:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ffae:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ffb2:	e7aa      	b.n	800ff0a <__ieee754_asinf+0xe2>
 800ffb4:	b33bbd2e 	.word	0xb33bbd2e
 800ffb8:	3fc90fdb 	.word	0x3fc90fdb
 800ffbc:	7149f2ca 	.word	0x7149f2ca
 800ffc0:	3a4f7f04 	.word	0x3a4f7f04
 800ffc4:	3811ef08 	.word	0x3811ef08
 800ffc8:	3e2aaaab 	.word	0x3e2aaaab
 800ffcc:	bd241146 	.word	0xbd241146
 800ffd0:	3e4e0aa8 	.word	0x3e4e0aa8
 800ffd4:	bea6b090 	.word	0xbea6b090
 800ffd8:	3d9dc62e 	.word	0x3d9dc62e
 800ffdc:	bf303361 	.word	0xbf303361
 800ffe0:	4001572d 	.word	0x4001572d
 800ffe4:	c019d139 	.word	0xc019d139
 800ffe8:	3f799999 	.word	0x3f799999
 800ffec:	333bbd2e 	.word	0x333bbd2e
 800fff0:	3f490fdb 	.word	0x3f490fdb

0800fff4 <__ieee754_atan2f>:
 800fff4:	ee10 2a90 	vmov	r2, s1
 800fff8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800fffc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010000:	b510      	push	{r4, lr}
 8010002:	eef0 7a40 	vmov.f32	s15, s0
 8010006:	d806      	bhi.n	8010016 <__ieee754_atan2f+0x22>
 8010008:	ee10 0a10 	vmov	r0, s0
 801000c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010010:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010014:	d904      	bls.n	8010020 <__ieee754_atan2f+0x2c>
 8010016:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801001a:	eeb0 0a67 	vmov.f32	s0, s15
 801001e:	bd10      	pop	{r4, pc}
 8010020:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8010024:	d103      	bne.n	801002e <__ieee754_atan2f+0x3a>
 8010026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801002a:	f000 b9b3 	b.w	8010394 <atanf>
 801002e:	1794      	asrs	r4, r2, #30
 8010030:	f004 0402 	and.w	r4, r4, #2
 8010034:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010038:	b943      	cbnz	r3, 801004c <__ieee754_atan2f+0x58>
 801003a:	2c02      	cmp	r4, #2
 801003c:	d05e      	beq.n	80100fc <__ieee754_atan2f+0x108>
 801003e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010110 <__ieee754_atan2f+0x11c>
 8010042:	2c03      	cmp	r4, #3
 8010044:	bf08      	it	eq
 8010046:	eef0 7a47 	vmoveq.f32	s15, s14
 801004a:	e7e6      	b.n	801001a <__ieee754_atan2f+0x26>
 801004c:	b941      	cbnz	r1, 8010060 <__ieee754_atan2f+0x6c>
 801004e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8010114 <__ieee754_atan2f+0x120>
 8010052:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010118 <__ieee754_atan2f+0x124>
 8010056:	2800      	cmp	r0, #0
 8010058:	bfb8      	it	lt
 801005a:	eef0 7a47 	vmovlt.f32	s15, s14
 801005e:	e7dc      	b.n	801001a <__ieee754_atan2f+0x26>
 8010060:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010064:	d110      	bne.n	8010088 <__ieee754_atan2f+0x94>
 8010066:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801006a:	f104 34ff 	add.w	r4, r4, #4294967295
 801006e:	d107      	bne.n	8010080 <__ieee754_atan2f+0x8c>
 8010070:	2c02      	cmp	r4, #2
 8010072:	d846      	bhi.n	8010102 <__ieee754_atan2f+0x10e>
 8010074:	4b29      	ldr	r3, [pc, #164]	@ (801011c <__ieee754_atan2f+0x128>)
 8010076:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801007a:	edd3 7a00 	vldr	s15, [r3]
 801007e:	e7cc      	b.n	801001a <__ieee754_atan2f+0x26>
 8010080:	2c02      	cmp	r4, #2
 8010082:	d841      	bhi.n	8010108 <__ieee754_atan2f+0x114>
 8010084:	4b26      	ldr	r3, [pc, #152]	@ (8010120 <__ieee754_atan2f+0x12c>)
 8010086:	e7f6      	b.n	8010076 <__ieee754_atan2f+0x82>
 8010088:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801008c:	d0df      	beq.n	801004e <__ieee754_atan2f+0x5a>
 801008e:	1a5b      	subs	r3, r3, r1
 8010090:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8010094:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010098:	da1a      	bge.n	80100d0 <__ieee754_atan2f+0xdc>
 801009a:	2a00      	cmp	r2, #0
 801009c:	da01      	bge.n	80100a2 <__ieee754_atan2f+0xae>
 801009e:	313c      	adds	r1, #60	@ 0x3c
 80100a0:	db19      	blt.n	80100d6 <__ieee754_atan2f+0xe2>
 80100a2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80100a6:	f7ff fa8f 	bl	800f5c8 <fabsf>
 80100aa:	f000 f973 	bl	8010394 <atanf>
 80100ae:	eef0 7a40 	vmov.f32	s15, s0
 80100b2:	2c01      	cmp	r4, #1
 80100b4:	d012      	beq.n	80100dc <__ieee754_atan2f+0xe8>
 80100b6:	2c02      	cmp	r4, #2
 80100b8:	d017      	beq.n	80100ea <__ieee754_atan2f+0xf6>
 80100ba:	2c00      	cmp	r4, #0
 80100bc:	d0ad      	beq.n	801001a <__ieee754_atan2f+0x26>
 80100be:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8010124 <__ieee754_atan2f+0x130>
 80100c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80100c6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8010128 <__ieee754_atan2f+0x134>
 80100ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80100ce:	e7a4      	b.n	801001a <__ieee754_atan2f+0x26>
 80100d0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010114 <__ieee754_atan2f+0x120>
 80100d4:	e7ed      	b.n	80100b2 <__ieee754_atan2f+0xbe>
 80100d6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801012c <__ieee754_atan2f+0x138>
 80100da:	e7ea      	b.n	80100b2 <__ieee754_atan2f+0xbe>
 80100dc:	ee17 3a90 	vmov	r3, s15
 80100e0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80100e4:	ee07 3a90 	vmov	s15, r3
 80100e8:	e797      	b.n	801001a <__ieee754_atan2f+0x26>
 80100ea:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8010124 <__ieee754_atan2f+0x130>
 80100ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80100f2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8010128 <__ieee754_atan2f+0x134>
 80100f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80100fa:	e78e      	b.n	801001a <__ieee754_atan2f+0x26>
 80100fc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010128 <__ieee754_atan2f+0x134>
 8010100:	e78b      	b.n	801001a <__ieee754_atan2f+0x26>
 8010102:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8010130 <__ieee754_atan2f+0x13c>
 8010106:	e788      	b.n	801001a <__ieee754_atan2f+0x26>
 8010108:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801012c <__ieee754_atan2f+0x138>
 801010c:	e785      	b.n	801001a <__ieee754_atan2f+0x26>
 801010e:	bf00      	nop
 8010110:	c0490fdb 	.word	0xc0490fdb
 8010114:	3fc90fdb 	.word	0x3fc90fdb
 8010118:	bfc90fdb 	.word	0xbfc90fdb
 801011c:	0801200c 	.word	0x0801200c
 8010120:	08012000 	.word	0x08012000
 8010124:	33bbbd2e 	.word	0x33bbbd2e
 8010128:	40490fdb 	.word	0x40490fdb
 801012c:	00000000 	.word	0x00000000
 8010130:	3f490fdb 	.word	0x3f490fdb

08010134 <__ieee754_rem_pio2f>:
 8010134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010136:	ee10 6a10 	vmov	r6, s0
 801013a:	4b88      	ldr	r3, [pc, #544]	@ (801035c <__ieee754_rem_pio2f+0x228>)
 801013c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8010140:	429d      	cmp	r5, r3
 8010142:	b087      	sub	sp, #28
 8010144:	4604      	mov	r4, r0
 8010146:	d805      	bhi.n	8010154 <__ieee754_rem_pio2f+0x20>
 8010148:	2300      	movs	r3, #0
 801014a:	ed80 0a00 	vstr	s0, [r0]
 801014e:	6043      	str	r3, [r0, #4]
 8010150:	2000      	movs	r0, #0
 8010152:	e022      	b.n	801019a <__ieee754_rem_pio2f+0x66>
 8010154:	4b82      	ldr	r3, [pc, #520]	@ (8010360 <__ieee754_rem_pio2f+0x22c>)
 8010156:	429d      	cmp	r5, r3
 8010158:	d83a      	bhi.n	80101d0 <__ieee754_rem_pio2f+0x9c>
 801015a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801015e:	2e00      	cmp	r6, #0
 8010160:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8010364 <__ieee754_rem_pio2f+0x230>
 8010164:	4a80      	ldr	r2, [pc, #512]	@ (8010368 <__ieee754_rem_pio2f+0x234>)
 8010166:	f023 030f 	bic.w	r3, r3, #15
 801016a:	dd18      	ble.n	801019e <__ieee754_rem_pio2f+0x6a>
 801016c:	4293      	cmp	r3, r2
 801016e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8010172:	bf09      	itett	eq
 8010174:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801036c <__ieee754_rem_pio2f+0x238>
 8010178:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8010370 <__ieee754_rem_pio2f+0x23c>
 801017c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8010374 <__ieee754_rem_pio2f+0x240>
 8010180:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8010184:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8010188:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801018c:	ed80 7a00 	vstr	s14, [r0]
 8010190:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010194:	edc0 7a01 	vstr	s15, [r0, #4]
 8010198:	2001      	movs	r0, #1
 801019a:	b007      	add	sp, #28
 801019c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801019e:	4293      	cmp	r3, r2
 80101a0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80101a4:	bf09      	itett	eq
 80101a6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801036c <__ieee754_rem_pio2f+0x238>
 80101aa:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8010370 <__ieee754_rem_pio2f+0x23c>
 80101ae:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8010374 <__ieee754_rem_pio2f+0x240>
 80101b2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80101b6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80101ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80101be:	ed80 7a00 	vstr	s14, [r0]
 80101c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101c6:	edc0 7a01 	vstr	s15, [r0, #4]
 80101ca:	f04f 30ff 	mov.w	r0, #4294967295
 80101ce:	e7e4      	b.n	801019a <__ieee754_rem_pio2f+0x66>
 80101d0:	4b69      	ldr	r3, [pc, #420]	@ (8010378 <__ieee754_rem_pio2f+0x244>)
 80101d2:	429d      	cmp	r5, r3
 80101d4:	d873      	bhi.n	80102be <__ieee754_rem_pio2f+0x18a>
 80101d6:	f7ff f9f7 	bl	800f5c8 <fabsf>
 80101da:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801037c <__ieee754_rem_pio2f+0x248>
 80101de:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80101e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80101e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80101ee:	ee17 0a90 	vmov	r0, s15
 80101f2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010364 <__ieee754_rem_pio2f+0x230>
 80101f6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80101fa:	281f      	cmp	r0, #31
 80101fc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010370 <__ieee754_rem_pio2f+0x23c>
 8010200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010204:	eeb1 6a47 	vneg.f32	s12, s14
 8010208:	ee70 6a67 	vsub.f32	s13, s0, s15
 801020c:	ee16 1a90 	vmov	r1, s13
 8010210:	dc09      	bgt.n	8010226 <__ieee754_rem_pio2f+0xf2>
 8010212:	4a5b      	ldr	r2, [pc, #364]	@ (8010380 <__ieee754_rem_pio2f+0x24c>)
 8010214:	1e47      	subs	r7, r0, #1
 8010216:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801021a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801021e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010222:	4293      	cmp	r3, r2
 8010224:	d107      	bne.n	8010236 <__ieee754_rem_pio2f+0x102>
 8010226:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801022a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801022e:	2a08      	cmp	r2, #8
 8010230:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010234:	dc14      	bgt.n	8010260 <__ieee754_rem_pio2f+0x12c>
 8010236:	6021      	str	r1, [r4, #0]
 8010238:	ed94 7a00 	vldr	s14, [r4]
 801023c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010240:	2e00      	cmp	r6, #0
 8010242:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010246:	ed84 0a01 	vstr	s0, [r4, #4]
 801024a:	daa6      	bge.n	801019a <__ieee754_rem_pio2f+0x66>
 801024c:	eeb1 7a47 	vneg.f32	s14, s14
 8010250:	eeb1 0a40 	vneg.f32	s0, s0
 8010254:	ed84 7a00 	vstr	s14, [r4]
 8010258:	ed84 0a01 	vstr	s0, [r4, #4]
 801025c:	4240      	negs	r0, r0
 801025e:	e79c      	b.n	801019a <__ieee754_rem_pio2f+0x66>
 8010260:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801036c <__ieee754_rem_pio2f+0x238>
 8010264:	eef0 6a40 	vmov.f32	s13, s0
 8010268:	eee6 6a25 	vfma.f32	s13, s12, s11
 801026c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8010270:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010274:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8010374 <__ieee754_rem_pio2f+0x240>
 8010278:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801027c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010280:	ee15 2a90 	vmov	r2, s11
 8010284:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010288:	1a5b      	subs	r3, r3, r1
 801028a:	2b19      	cmp	r3, #25
 801028c:	dc04      	bgt.n	8010298 <__ieee754_rem_pio2f+0x164>
 801028e:	edc4 5a00 	vstr	s11, [r4]
 8010292:	eeb0 0a66 	vmov.f32	s0, s13
 8010296:	e7cf      	b.n	8010238 <__ieee754_rem_pio2f+0x104>
 8010298:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8010384 <__ieee754_rem_pio2f+0x250>
 801029c:	eeb0 0a66 	vmov.f32	s0, s13
 80102a0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80102a4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80102a8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8010388 <__ieee754_rem_pio2f+0x254>
 80102ac:	eee6 7a25 	vfma.f32	s15, s12, s11
 80102b0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80102b4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80102b8:	ed84 7a00 	vstr	s14, [r4]
 80102bc:	e7bc      	b.n	8010238 <__ieee754_rem_pio2f+0x104>
 80102be:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80102c2:	d306      	bcc.n	80102d2 <__ieee754_rem_pio2f+0x19e>
 80102c4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80102c8:	edc0 7a01 	vstr	s15, [r0, #4]
 80102cc:	edc0 7a00 	vstr	s15, [r0]
 80102d0:	e73e      	b.n	8010150 <__ieee754_rem_pio2f+0x1c>
 80102d2:	15ea      	asrs	r2, r5, #23
 80102d4:	3a86      	subs	r2, #134	@ 0x86
 80102d6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80102da:	ee07 3a90 	vmov	s15, r3
 80102de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80102e2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801038c <__ieee754_rem_pio2f+0x258>
 80102e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80102ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80102ee:	ed8d 7a03 	vstr	s14, [sp, #12]
 80102f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80102f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80102fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80102fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010302:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010306:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801030a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801030e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010312:	edcd 7a05 	vstr	s15, [sp, #20]
 8010316:	d11e      	bne.n	8010356 <__ieee754_rem_pio2f+0x222>
 8010318:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801031c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010320:	bf0c      	ite	eq
 8010322:	2301      	moveq	r3, #1
 8010324:	2302      	movne	r3, #2
 8010326:	491a      	ldr	r1, [pc, #104]	@ (8010390 <__ieee754_rem_pio2f+0x25c>)
 8010328:	9101      	str	r1, [sp, #4]
 801032a:	2102      	movs	r1, #2
 801032c:	9100      	str	r1, [sp, #0]
 801032e:	a803      	add	r0, sp, #12
 8010330:	4621      	mov	r1, r4
 8010332:	f000 f907 	bl	8010544 <__kernel_rem_pio2f>
 8010336:	2e00      	cmp	r6, #0
 8010338:	f6bf af2f 	bge.w	801019a <__ieee754_rem_pio2f+0x66>
 801033c:	edd4 7a00 	vldr	s15, [r4]
 8010340:	eef1 7a67 	vneg.f32	s15, s15
 8010344:	edc4 7a00 	vstr	s15, [r4]
 8010348:	edd4 7a01 	vldr	s15, [r4, #4]
 801034c:	eef1 7a67 	vneg.f32	s15, s15
 8010350:	edc4 7a01 	vstr	s15, [r4, #4]
 8010354:	e782      	b.n	801025c <__ieee754_rem_pio2f+0x128>
 8010356:	2303      	movs	r3, #3
 8010358:	e7e5      	b.n	8010326 <__ieee754_rem_pio2f+0x1f2>
 801035a:	bf00      	nop
 801035c:	3f490fd8 	.word	0x3f490fd8
 8010360:	4016cbe3 	.word	0x4016cbe3
 8010364:	3fc90f80 	.word	0x3fc90f80
 8010368:	3fc90fd0 	.word	0x3fc90fd0
 801036c:	37354400 	.word	0x37354400
 8010370:	37354443 	.word	0x37354443
 8010374:	2e85a308 	.word	0x2e85a308
 8010378:	43490f80 	.word	0x43490f80
 801037c:	3f22f984 	.word	0x3f22f984
 8010380:	08012018 	.word	0x08012018
 8010384:	2e85a300 	.word	0x2e85a300
 8010388:	248d3132 	.word	0x248d3132
 801038c:	43800000 	.word	0x43800000
 8010390:	08012098 	.word	0x08012098

08010394 <atanf>:
 8010394:	b538      	push	{r3, r4, r5, lr}
 8010396:	ee10 5a10 	vmov	r5, s0
 801039a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801039e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80103a2:	eef0 7a40 	vmov.f32	s15, s0
 80103a6:	d310      	bcc.n	80103ca <atanf+0x36>
 80103a8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80103ac:	d904      	bls.n	80103b8 <atanf+0x24>
 80103ae:	ee70 7a00 	vadd.f32	s15, s0, s0
 80103b2:	eeb0 0a67 	vmov.f32	s0, s15
 80103b6:	bd38      	pop	{r3, r4, r5, pc}
 80103b8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80104f0 <atanf+0x15c>
 80103bc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80104f4 <atanf+0x160>
 80103c0:	2d00      	cmp	r5, #0
 80103c2:	bfc8      	it	gt
 80103c4:	eef0 7a47 	vmovgt.f32	s15, s14
 80103c8:	e7f3      	b.n	80103b2 <atanf+0x1e>
 80103ca:	4b4b      	ldr	r3, [pc, #300]	@ (80104f8 <atanf+0x164>)
 80103cc:	429c      	cmp	r4, r3
 80103ce:	d810      	bhi.n	80103f2 <atanf+0x5e>
 80103d0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80103d4:	d20a      	bcs.n	80103ec <atanf+0x58>
 80103d6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80104fc <atanf+0x168>
 80103da:	ee30 7a07 	vadd.f32	s14, s0, s14
 80103de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80103e2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80103e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ea:	dce2      	bgt.n	80103b2 <atanf+0x1e>
 80103ec:	f04f 33ff 	mov.w	r3, #4294967295
 80103f0:	e013      	b.n	801041a <atanf+0x86>
 80103f2:	f7ff f8e9 	bl	800f5c8 <fabsf>
 80103f6:	4b42      	ldr	r3, [pc, #264]	@ (8010500 <atanf+0x16c>)
 80103f8:	429c      	cmp	r4, r3
 80103fa:	d84f      	bhi.n	801049c <atanf+0x108>
 80103fc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8010400:	429c      	cmp	r4, r3
 8010402:	d841      	bhi.n	8010488 <atanf+0xf4>
 8010404:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010408:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801040c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010410:	2300      	movs	r3, #0
 8010412:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010416:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801041a:	1c5a      	adds	r2, r3, #1
 801041c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010420:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8010504 <atanf+0x170>
 8010424:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8010508 <atanf+0x174>
 8010428:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 801050c <atanf+0x178>
 801042c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010430:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010434:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8010510 <atanf+0x17c>
 8010438:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801043c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8010514 <atanf+0x180>
 8010440:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010444:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010518 <atanf+0x184>
 8010448:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801044c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801051c <atanf+0x188>
 8010450:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010454:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8010520 <atanf+0x18c>
 8010458:	eea6 5a87 	vfma.f32	s10, s13, s14
 801045c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010524 <atanf+0x190>
 8010460:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010464:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8010528 <atanf+0x194>
 8010468:	eea7 5a26 	vfma.f32	s10, s14, s13
 801046c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801052c <atanf+0x198>
 8010470:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010474:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010478:	eea5 7a86 	vfma.f32	s14, s11, s12
 801047c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010480:	d121      	bne.n	80104c6 <atanf+0x132>
 8010482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010486:	e794      	b.n	80103b2 <atanf+0x1e>
 8010488:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801048c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010490:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010494:	2301      	movs	r3, #1
 8010496:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801049a:	e7be      	b.n	801041a <atanf+0x86>
 801049c:	4b24      	ldr	r3, [pc, #144]	@ (8010530 <atanf+0x19c>)
 801049e:	429c      	cmp	r4, r3
 80104a0:	d80b      	bhi.n	80104ba <atanf+0x126>
 80104a2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80104a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80104aa:	eea0 7a27 	vfma.f32	s14, s0, s15
 80104ae:	2302      	movs	r3, #2
 80104b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80104b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80104b8:	e7af      	b.n	801041a <atanf+0x86>
 80104ba:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80104be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80104c2:	2303      	movs	r3, #3
 80104c4:	e7a9      	b.n	801041a <atanf+0x86>
 80104c6:	4a1b      	ldr	r2, [pc, #108]	@ (8010534 <atanf+0x1a0>)
 80104c8:	491b      	ldr	r1, [pc, #108]	@ (8010538 <atanf+0x1a4>)
 80104ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80104ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80104d2:	edd3 6a00 	vldr	s13, [r3]
 80104d6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80104da:	2d00      	cmp	r5, #0
 80104dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80104e0:	edd2 7a00 	vldr	s15, [r2]
 80104e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80104e8:	bfb8      	it	lt
 80104ea:	eef1 7a67 	vneglt.f32	s15, s15
 80104ee:	e760      	b.n	80103b2 <atanf+0x1e>
 80104f0:	bfc90fdb 	.word	0xbfc90fdb
 80104f4:	3fc90fdb 	.word	0x3fc90fdb
 80104f8:	3edfffff 	.word	0x3edfffff
 80104fc:	7149f2ca 	.word	0x7149f2ca
 8010500:	3f97ffff 	.word	0x3f97ffff
 8010504:	3c8569d7 	.word	0x3c8569d7
 8010508:	3d4bda59 	.word	0x3d4bda59
 801050c:	bd6ef16b 	.word	0xbd6ef16b
 8010510:	3d886b35 	.word	0x3d886b35
 8010514:	3dba2e6e 	.word	0x3dba2e6e
 8010518:	3e124925 	.word	0x3e124925
 801051c:	3eaaaaab 	.word	0x3eaaaaab
 8010520:	bd15a221 	.word	0xbd15a221
 8010524:	bd9d8795 	.word	0xbd9d8795
 8010528:	bde38e38 	.word	0xbde38e38
 801052c:	be4ccccd 	.word	0xbe4ccccd
 8010530:	401bffff 	.word	0x401bffff
 8010534:	080123c0 	.word	0x080123c0
 8010538:	080123b0 	.word	0x080123b0

0801053c <__ieee754_sqrtf>:
 801053c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010540:	4770      	bx	lr
	...

08010544 <__kernel_rem_pio2f>:
 8010544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010548:	ed2d 8b04 	vpush	{d8-d9}
 801054c:	b0d9      	sub	sp, #356	@ 0x164
 801054e:	4690      	mov	r8, r2
 8010550:	9001      	str	r0, [sp, #4]
 8010552:	4ab9      	ldr	r2, [pc, #740]	@ (8010838 <__kernel_rem_pio2f+0x2f4>)
 8010554:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8010556:	f118 0f04 	cmn.w	r8, #4
 801055a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801055e:	460f      	mov	r7, r1
 8010560:	f103 3bff 	add.w	fp, r3, #4294967295
 8010564:	db27      	blt.n	80105b6 <__kernel_rem_pio2f+0x72>
 8010566:	f1b8 0203 	subs.w	r2, r8, #3
 801056a:	bf48      	it	mi
 801056c:	f108 0204 	addmi.w	r2, r8, #4
 8010570:	10d2      	asrs	r2, r2, #3
 8010572:	1c55      	adds	r5, r2, #1
 8010574:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010576:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8010848 <__kernel_rem_pio2f+0x304>
 801057a:	00e8      	lsls	r0, r5, #3
 801057c:	eba2 060b 	sub.w	r6, r2, fp
 8010580:	9002      	str	r0, [sp, #8]
 8010582:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8010586:	eb0a 0c0b 	add.w	ip, sl, fp
 801058a:	ac1c      	add	r4, sp, #112	@ 0x70
 801058c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010590:	2000      	movs	r0, #0
 8010592:	4560      	cmp	r0, ip
 8010594:	dd11      	ble.n	80105ba <__kernel_rem_pio2f+0x76>
 8010596:	a91c      	add	r1, sp, #112	@ 0x70
 8010598:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801059c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80105a0:	f04f 0c00 	mov.w	ip, #0
 80105a4:	45d4      	cmp	ip, sl
 80105a6:	dc27      	bgt.n	80105f8 <__kernel_rem_pio2f+0xb4>
 80105a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80105ac:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8010848 <__kernel_rem_pio2f+0x304>
 80105b0:	4606      	mov	r6, r0
 80105b2:	2400      	movs	r4, #0
 80105b4:	e016      	b.n	80105e4 <__kernel_rem_pio2f+0xa0>
 80105b6:	2200      	movs	r2, #0
 80105b8:	e7db      	b.n	8010572 <__kernel_rem_pio2f+0x2e>
 80105ba:	42c6      	cmn	r6, r0
 80105bc:	bf5d      	ittte	pl
 80105be:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80105c2:	ee07 1a90 	vmovpl	s15, r1
 80105c6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80105ca:	eef0 7a47 	vmovmi.f32	s15, s14
 80105ce:	ece4 7a01 	vstmia	r4!, {s15}
 80105d2:	3001      	adds	r0, #1
 80105d4:	e7dd      	b.n	8010592 <__kernel_rem_pio2f+0x4e>
 80105d6:	ecfe 6a01 	vldmia	lr!, {s13}
 80105da:	ed96 7a00 	vldr	s14, [r6]
 80105de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80105e2:	3401      	adds	r4, #1
 80105e4:	455c      	cmp	r4, fp
 80105e6:	f1a6 0604 	sub.w	r6, r6, #4
 80105ea:	ddf4      	ble.n	80105d6 <__kernel_rem_pio2f+0x92>
 80105ec:	ece9 7a01 	vstmia	r9!, {s15}
 80105f0:	f10c 0c01 	add.w	ip, ip, #1
 80105f4:	3004      	adds	r0, #4
 80105f6:	e7d5      	b.n	80105a4 <__kernel_rem_pio2f+0x60>
 80105f8:	a908      	add	r1, sp, #32
 80105fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80105fe:	9104      	str	r1, [sp, #16]
 8010600:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010602:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8010844 <__kernel_rem_pio2f+0x300>
 8010606:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8010840 <__kernel_rem_pio2f+0x2fc>
 801060a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801060e:	9203      	str	r2, [sp, #12]
 8010610:	4654      	mov	r4, sl
 8010612:	00a2      	lsls	r2, r4, #2
 8010614:	9205      	str	r2, [sp, #20]
 8010616:	aa58      	add	r2, sp, #352	@ 0x160
 8010618:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801061c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010620:	a944      	add	r1, sp, #272	@ 0x110
 8010622:	aa08      	add	r2, sp, #32
 8010624:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010628:	4694      	mov	ip, r2
 801062a:	4626      	mov	r6, r4
 801062c:	2e00      	cmp	r6, #0
 801062e:	f1a0 0004 	sub.w	r0, r0, #4
 8010632:	dc4c      	bgt.n	80106ce <__kernel_rem_pio2f+0x18a>
 8010634:	4628      	mov	r0, r5
 8010636:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801063a:	f000 f9f5 	bl	8010a28 <scalbnf>
 801063e:	eeb0 8a40 	vmov.f32	s16, s0
 8010642:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8010646:	ee28 0a00 	vmul.f32	s0, s16, s0
 801064a:	f000 fa53 	bl	8010af4 <floorf>
 801064e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010652:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010656:	2d00      	cmp	r5, #0
 8010658:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801065c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010660:	ee17 9a90 	vmov	r9, s15
 8010664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010668:	ee38 8a67 	vsub.f32	s16, s16, s15
 801066c:	dd41      	ble.n	80106f2 <__kernel_rem_pio2f+0x1ae>
 801066e:	f104 3cff 	add.w	ip, r4, #4294967295
 8010672:	a908      	add	r1, sp, #32
 8010674:	f1c5 0e08 	rsb	lr, r5, #8
 8010678:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801067c:	fa46 f00e 	asr.w	r0, r6, lr
 8010680:	4481      	add	r9, r0
 8010682:	fa00 f00e 	lsl.w	r0, r0, lr
 8010686:	1a36      	subs	r6, r6, r0
 8010688:	f1c5 0007 	rsb	r0, r5, #7
 801068c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010690:	4106      	asrs	r6, r0
 8010692:	2e00      	cmp	r6, #0
 8010694:	dd3c      	ble.n	8010710 <__kernel_rem_pio2f+0x1cc>
 8010696:	f04f 0e00 	mov.w	lr, #0
 801069a:	f109 0901 	add.w	r9, r9, #1
 801069e:	4670      	mov	r0, lr
 80106a0:	4574      	cmp	r4, lr
 80106a2:	dc68      	bgt.n	8010776 <__kernel_rem_pio2f+0x232>
 80106a4:	2d00      	cmp	r5, #0
 80106a6:	dd03      	ble.n	80106b0 <__kernel_rem_pio2f+0x16c>
 80106a8:	2d01      	cmp	r5, #1
 80106aa:	d074      	beq.n	8010796 <__kernel_rem_pio2f+0x252>
 80106ac:	2d02      	cmp	r5, #2
 80106ae:	d07d      	beq.n	80107ac <__kernel_rem_pio2f+0x268>
 80106b0:	2e02      	cmp	r6, #2
 80106b2:	d12d      	bne.n	8010710 <__kernel_rem_pio2f+0x1cc>
 80106b4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80106b8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80106bc:	b340      	cbz	r0, 8010710 <__kernel_rem_pio2f+0x1cc>
 80106be:	4628      	mov	r0, r5
 80106c0:	9306      	str	r3, [sp, #24]
 80106c2:	f000 f9b1 	bl	8010a28 <scalbnf>
 80106c6:	9b06      	ldr	r3, [sp, #24]
 80106c8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80106cc:	e020      	b.n	8010710 <__kernel_rem_pio2f+0x1cc>
 80106ce:	ee60 7a28 	vmul.f32	s15, s0, s17
 80106d2:	3e01      	subs	r6, #1
 80106d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80106d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106dc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80106e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80106e4:	ecac 0a01 	vstmia	ip!, {s0}
 80106e8:	ed90 0a00 	vldr	s0, [r0]
 80106ec:	ee37 0a80 	vadd.f32	s0, s15, s0
 80106f0:	e79c      	b.n	801062c <__kernel_rem_pio2f+0xe8>
 80106f2:	d105      	bne.n	8010700 <__kernel_rem_pio2f+0x1bc>
 80106f4:	1e60      	subs	r0, r4, #1
 80106f6:	a908      	add	r1, sp, #32
 80106f8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80106fc:	11f6      	asrs	r6, r6, #7
 80106fe:	e7c8      	b.n	8010692 <__kernel_rem_pio2f+0x14e>
 8010700:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010704:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801070c:	da31      	bge.n	8010772 <__kernel_rem_pio2f+0x22e>
 801070e:	2600      	movs	r6, #0
 8010710:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010718:	f040 8098 	bne.w	801084c <__kernel_rem_pio2f+0x308>
 801071c:	1e60      	subs	r0, r4, #1
 801071e:	2200      	movs	r2, #0
 8010720:	4550      	cmp	r0, sl
 8010722:	da4b      	bge.n	80107bc <__kernel_rem_pio2f+0x278>
 8010724:	2a00      	cmp	r2, #0
 8010726:	d065      	beq.n	80107f4 <__kernel_rem_pio2f+0x2b0>
 8010728:	3c01      	subs	r4, #1
 801072a:	ab08      	add	r3, sp, #32
 801072c:	3d08      	subs	r5, #8
 801072e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d0f8      	beq.n	8010728 <__kernel_rem_pio2f+0x1e4>
 8010736:	4628      	mov	r0, r5
 8010738:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801073c:	f000 f974 	bl	8010a28 <scalbnf>
 8010740:	1c63      	adds	r3, r4, #1
 8010742:	aa44      	add	r2, sp, #272	@ 0x110
 8010744:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8010844 <__kernel_rem_pio2f+0x300>
 8010748:	0099      	lsls	r1, r3, #2
 801074a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801074e:	4623      	mov	r3, r4
 8010750:	2b00      	cmp	r3, #0
 8010752:	f280 80a9 	bge.w	80108a8 <__kernel_rem_pio2f+0x364>
 8010756:	4623      	mov	r3, r4
 8010758:	2b00      	cmp	r3, #0
 801075a:	f2c0 80c7 	blt.w	80108ec <__kernel_rem_pio2f+0x3a8>
 801075e:	aa44      	add	r2, sp, #272	@ 0x110
 8010760:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010764:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801083c <__kernel_rem_pio2f+0x2f8>
 8010768:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8010848 <__kernel_rem_pio2f+0x304>
 801076c:	2000      	movs	r0, #0
 801076e:	1ae2      	subs	r2, r4, r3
 8010770:	e0b1      	b.n	80108d6 <__kernel_rem_pio2f+0x392>
 8010772:	2602      	movs	r6, #2
 8010774:	e78f      	b.n	8010696 <__kernel_rem_pio2f+0x152>
 8010776:	f852 1b04 	ldr.w	r1, [r2], #4
 801077a:	b948      	cbnz	r0, 8010790 <__kernel_rem_pio2f+0x24c>
 801077c:	b121      	cbz	r1, 8010788 <__kernel_rem_pio2f+0x244>
 801077e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8010782:	f842 1c04 	str.w	r1, [r2, #-4]
 8010786:	2101      	movs	r1, #1
 8010788:	f10e 0e01 	add.w	lr, lr, #1
 801078c:	4608      	mov	r0, r1
 801078e:	e787      	b.n	80106a0 <__kernel_rem_pio2f+0x15c>
 8010790:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8010794:	e7f5      	b.n	8010782 <__kernel_rem_pio2f+0x23e>
 8010796:	f104 3cff 	add.w	ip, r4, #4294967295
 801079a:	aa08      	add	r2, sp, #32
 801079c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80107a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80107a4:	a908      	add	r1, sp, #32
 80107a6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80107aa:	e781      	b.n	80106b0 <__kernel_rem_pio2f+0x16c>
 80107ac:	f104 3cff 	add.w	ip, r4, #4294967295
 80107b0:	aa08      	add	r2, sp, #32
 80107b2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80107b6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80107ba:	e7f3      	b.n	80107a4 <__kernel_rem_pio2f+0x260>
 80107bc:	a908      	add	r1, sp, #32
 80107be:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80107c2:	3801      	subs	r0, #1
 80107c4:	430a      	orrs	r2, r1
 80107c6:	e7ab      	b.n	8010720 <__kernel_rem_pio2f+0x1dc>
 80107c8:	3201      	adds	r2, #1
 80107ca:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80107ce:	2e00      	cmp	r6, #0
 80107d0:	d0fa      	beq.n	80107c8 <__kernel_rem_pio2f+0x284>
 80107d2:	9905      	ldr	r1, [sp, #20]
 80107d4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80107d8:	eb0d 0001 	add.w	r0, sp, r1
 80107dc:	18e6      	adds	r6, r4, r3
 80107de:	a91c      	add	r1, sp, #112	@ 0x70
 80107e0:	f104 0c01 	add.w	ip, r4, #1
 80107e4:	384c      	subs	r0, #76	@ 0x4c
 80107e6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80107ea:	4422      	add	r2, r4
 80107ec:	4562      	cmp	r2, ip
 80107ee:	da04      	bge.n	80107fa <__kernel_rem_pio2f+0x2b6>
 80107f0:	4614      	mov	r4, r2
 80107f2:	e70e      	b.n	8010612 <__kernel_rem_pio2f+0xce>
 80107f4:	9804      	ldr	r0, [sp, #16]
 80107f6:	2201      	movs	r2, #1
 80107f8:	e7e7      	b.n	80107ca <__kernel_rem_pio2f+0x286>
 80107fa:	9903      	ldr	r1, [sp, #12]
 80107fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010800:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8010804:	9105      	str	r1, [sp, #20]
 8010806:	ee07 1a90 	vmov	s15, r1
 801080a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801080e:	2400      	movs	r4, #0
 8010810:	ece6 7a01 	vstmia	r6!, {s15}
 8010814:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8010848 <__kernel_rem_pio2f+0x304>
 8010818:	46b1      	mov	r9, r6
 801081a:	455c      	cmp	r4, fp
 801081c:	dd04      	ble.n	8010828 <__kernel_rem_pio2f+0x2e4>
 801081e:	ece0 7a01 	vstmia	r0!, {s15}
 8010822:	f10c 0c01 	add.w	ip, ip, #1
 8010826:	e7e1      	b.n	80107ec <__kernel_rem_pio2f+0x2a8>
 8010828:	ecfe 6a01 	vldmia	lr!, {s13}
 801082c:	ed39 7a01 	vldmdb	r9!, {s14}
 8010830:	3401      	adds	r4, #1
 8010832:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010836:	e7f0      	b.n	801081a <__kernel_rem_pio2f+0x2d6>
 8010838:	080123fc 	.word	0x080123fc
 801083c:	080123d0 	.word	0x080123d0
 8010840:	43800000 	.word	0x43800000
 8010844:	3b800000 	.word	0x3b800000
 8010848:	00000000 	.word	0x00000000
 801084c:	9b02      	ldr	r3, [sp, #8]
 801084e:	eeb0 0a48 	vmov.f32	s0, s16
 8010852:	eba3 0008 	sub.w	r0, r3, r8
 8010856:	f000 f8e7 	bl	8010a28 <scalbnf>
 801085a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8010840 <__kernel_rem_pio2f+0x2fc>
 801085e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010866:	db19      	blt.n	801089c <__kernel_rem_pio2f+0x358>
 8010868:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8010844 <__kernel_rem_pio2f+0x300>
 801086c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010870:	aa08      	add	r2, sp, #32
 8010872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010876:	3508      	adds	r5, #8
 8010878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801087c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010884:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010888:	ee10 3a10 	vmov	r3, s0
 801088c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010890:	ee17 3a90 	vmov	r3, s15
 8010894:	3401      	adds	r4, #1
 8010896:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801089a:	e74c      	b.n	8010736 <__kernel_rem_pio2f+0x1f2>
 801089c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80108a0:	aa08      	add	r2, sp, #32
 80108a2:	ee10 3a10 	vmov	r3, s0
 80108a6:	e7f6      	b.n	8010896 <__kernel_rem_pio2f+0x352>
 80108a8:	a808      	add	r0, sp, #32
 80108aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80108ae:	9001      	str	r0, [sp, #4]
 80108b0:	ee07 0a90 	vmov	s15, r0
 80108b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80108b8:	3b01      	subs	r3, #1
 80108ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 80108be:	ee20 0a07 	vmul.f32	s0, s0, s14
 80108c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80108c6:	e743      	b.n	8010750 <__kernel_rem_pio2f+0x20c>
 80108c8:	ecfc 6a01 	vldmia	ip!, {s13}
 80108cc:	ecb5 7a01 	vldmia	r5!, {s14}
 80108d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80108d4:	3001      	adds	r0, #1
 80108d6:	4550      	cmp	r0, sl
 80108d8:	dc01      	bgt.n	80108de <__kernel_rem_pio2f+0x39a>
 80108da:	4282      	cmp	r2, r0
 80108dc:	daf4      	bge.n	80108c8 <__kernel_rem_pio2f+0x384>
 80108de:	a858      	add	r0, sp, #352	@ 0x160
 80108e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80108e4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80108e8:	3b01      	subs	r3, #1
 80108ea:	e735      	b.n	8010758 <__kernel_rem_pio2f+0x214>
 80108ec:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80108ee:	2b02      	cmp	r3, #2
 80108f0:	dc09      	bgt.n	8010906 <__kernel_rem_pio2f+0x3c2>
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	dc2b      	bgt.n	801094e <__kernel_rem_pio2f+0x40a>
 80108f6:	d044      	beq.n	8010982 <__kernel_rem_pio2f+0x43e>
 80108f8:	f009 0007 	and.w	r0, r9, #7
 80108fc:	b059      	add	sp, #356	@ 0x164
 80108fe:	ecbd 8b04 	vpop	{d8-d9}
 8010902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010906:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010908:	2b03      	cmp	r3, #3
 801090a:	d1f5      	bne.n	80108f8 <__kernel_rem_pio2f+0x3b4>
 801090c:	aa30      	add	r2, sp, #192	@ 0xc0
 801090e:	1f0b      	subs	r3, r1, #4
 8010910:	4413      	add	r3, r2
 8010912:	461a      	mov	r2, r3
 8010914:	4620      	mov	r0, r4
 8010916:	2800      	cmp	r0, #0
 8010918:	f1a2 0204 	sub.w	r2, r2, #4
 801091c:	dc52      	bgt.n	80109c4 <__kernel_rem_pio2f+0x480>
 801091e:	4622      	mov	r2, r4
 8010920:	2a01      	cmp	r2, #1
 8010922:	f1a3 0304 	sub.w	r3, r3, #4
 8010926:	dc5d      	bgt.n	80109e4 <__kernel_rem_pio2f+0x4a0>
 8010928:	ab30      	add	r3, sp, #192	@ 0xc0
 801092a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8010848 <__kernel_rem_pio2f+0x304>
 801092e:	440b      	add	r3, r1
 8010930:	2c01      	cmp	r4, #1
 8010932:	dc67      	bgt.n	8010a04 <__kernel_rem_pio2f+0x4c0>
 8010934:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8010938:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801093c:	2e00      	cmp	r6, #0
 801093e:	d167      	bne.n	8010a10 <__kernel_rem_pio2f+0x4cc>
 8010940:	edc7 6a00 	vstr	s13, [r7]
 8010944:	ed87 7a01 	vstr	s14, [r7, #4]
 8010948:	edc7 7a02 	vstr	s15, [r7, #8]
 801094c:	e7d4      	b.n	80108f8 <__kernel_rem_pio2f+0x3b4>
 801094e:	ab30      	add	r3, sp, #192	@ 0xc0
 8010950:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8010848 <__kernel_rem_pio2f+0x304>
 8010954:	440b      	add	r3, r1
 8010956:	4622      	mov	r2, r4
 8010958:	2a00      	cmp	r2, #0
 801095a:	da24      	bge.n	80109a6 <__kernel_rem_pio2f+0x462>
 801095c:	b34e      	cbz	r6, 80109b2 <__kernel_rem_pio2f+0x46e>
 801095e:	eef1 7a47 	vneg.f32	s15, s14
 8010962:	edc7 7a00 	vstr	s15, [r7]
 8010966:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801096a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801096e:	aa31      	add	r2, sp, #196	@ 0xc4
 8010970:	2301      	movs	r3, #1
 8010972:	429c      	cmp	r4, r3
 8010974:	da20      	bge.n	80109b8 <__kernel_rem_pio2f+0x474>
 8010976:	b10e      	cbz	r6, 801097c <__kernel_rem_pio2f+0x438>
 8010978:	eef1 7a67 	vneg.f32	s15, s15
 801097c:	edc7 7a01 	vstr	s15, [r7, #4]
 8010980:	e7ba      	b.n	80108f8 <__kernel_rem_pio2f+0x3b4>
 8010982:	ab30      	add	r3, sp, #192	@ 0xc0
 8010984:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8010848 <__kernel_rem_pio2f+0x304>
 8010988:	440b      	add	r3, r1
 801098a:	2c00      	cmp	r4, #0
 801098c:	da05      	bge.n	801099a <__kernel_rem_pio2f+0x456>
 801098e:	b10e      	cbz	r6, 8010994 <__kernel_rem_pio2f+0x450>
 8010990:	eef1 7a67 	vneg.f32	s15, s15
 8010994:	edc7 7a00 	vstr	s15, [r7]
 8010998:	e7ae      	b.n	80108f8 <__kernel_rem_pio2f+0x3b4>
 801099a:	ed33 7a01 	vldmdb	r3!, {s14}
 801099e:	3c01      	subs	r4, #1
 80109a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80109a4:	e7f1      	b.n	801098a <__kernel_rem_pio2f+0x446>
 80109a6:	ed73 7a01 	vldmdb	r3!, {s15}
 80109aa:	3a01      	subs	r2, #1
 80109ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80109b0:	e7d2      	b.n	8010958 <__kernel_rem_pio2f+0x414>
 80109b2:	eef0 7a47 	vmov.f32	s15, s14
 80109b6:	e7d4      	b.n	8010962 <__kernel_rem_pio2f+0x41e>
 80109b8:	ecb2 7a01 	vldmia	r2!, {s14}
 80109bc:	3301      	adds	r3, #1
 80109be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80109c2:	e7d6      	b.n	8010972 <__kernel_rem_pio2f+0x42e>
 80109c4:	edd2 7a00 	vldr	s15, [r2]
 80109c8:	edd2 6a01 	vldr	s13, [r2, #4]
 80109cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80109d0:	3801      	subs	r0, #1
 80109d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80109d6:	ed82 7a00 	vstr	s14, [r2]
 80109da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109de:	edc2 7a01 	vstr	s15, [r2, #4]
 80109e2:	e798      	b.n	8010916 <__kernel_rem_pio2f+0x3d2>
 80109e4:	edd3 7a00 	vldr	s15, [r3]
 80109e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80109ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80109f0:	3a01      	subs	r2, #1
 80109f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80109f6:	ed83 7a00 	vstr	s14, [r3]
 80109fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109fe:	edc3 7a01 	vstr	s15, [r3, #4]
 8010a02:	e78d      	b.n	8010920 <__kernel_rem_pio2f+0x3dc>
 8010a04:	ed33 7a01 	vldmdb	r3!, {s14}
 8010a08:	3c01      	subs	r4, #1
 8010a0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010a0e:	e78f      	b.n	8010930 <__kernel_rem_pio2f+0x3ec>
 8010a10:	eef1 6a66 	vneg.f32	s13, s13
 8010a14:	eeb1 7a47 	vneg.f32	s14, s14
 8010a18:	edc7 6a00 	vstr	s13, [r7]
 8010a1c:	ed87 7a01 	vstr	s14, [r7, #4]
 8010a20:	eef1 7a67 	vneg.f32	s15, s15
 8010a24:	e790      	b.n	8010948 <__kernel_rem_pio2f+0x404>
 8010a26:	bf00      	nop

08010a28 <scalbnf>:
 8010a28:	ee10 3a10 	vmov	r3, s0
 8010a2c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010a30:	d02b      	beq.n	8010a8a <scalbnf+0x62>
 8010a32:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010a36:	d302      	bcc.n	8010a3e <scalbnf+0x16>
 8010a38:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010a3c:	4770      	bx	lr
 8010a3e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010a42:	d123      	bne.n	8010a8c <scalbnf+0x64>
 8010a44:	4b24      	ldr	r3, [pc, #144]	@ (8010ad8 <scalbnf+0xb0>)
 8010a46:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010adc <scalbnf+0xb4>
 8010a4a:	4298      	cmp	r0, r3
 8010a4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010a50:	db17      	blt.n	8010a82 <scalbnf+0x5a>
 8010a52:	ee10 3a10 	vmov	r3, s0
 8010a56:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010a5a:	3a19      	subs	r2, #25
 8010a5c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010a60:	4288      	cmp	r0, r1
 8010a62:	dd15      	ble.n	8010a90 <scalbnf+0x68>
 8010a64:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010ae0 <scalbnf+0xb8>
 8010a68:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010ae4 <scalbnf+0xbc>
 8010a6c:	ee10 3a10 	vmov	r3, s0
 8010a70:	eeb0 7a67 	vmov.f32	s14, s15
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	bfb8      	it	lt
 8010a78:	eef0 7a66 	vmovlt.f32	s15, s13
 8010a7c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010a80:	4770      	bx	lr
 8010a82:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010ae8 <scalbnf+0xc0>
 8010a86:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010a8a:	4770      	bx	lr
 8010a8c:	0dd2      	lsrs	r2, r2, #23
 8010a8e:	e7e5      	b.n	8010a5c <scalbnf+0x34>
 8010a90:	4410      	add	r0, r2
 8010a92:	28fe      	cmp	r0, #254	@ 0xfe
 8010a94:	dce6      	bgt.n	8010a64 <scalbnf+0x3c>
 8010a96:	2800      	cmp	r0, #0
 8010a98:	dd06      	ble.n	8010aa8 <scalbnf+0x80>
 8010a9a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010a9e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010aa2:	ee00 3a10 	vmov	s0, r3
 8010aa6:	4770      	bx	lr
 8010aa8:	f110 0f16 	cmn.w	r0, #22
 8010aac:	da09      	bge.n	8010ac2 <scalbnf+0x9a>
 8010aae:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010ae8 <scalbnf+0xc0>
 8010ab2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010aec <scalbnf+0xc4>
 8010ab6:	ee10 3a10 	vmov	r3, s0
 8010aba:	eeb0 7a67 	vmov.f32	s14, s15
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	e7d9      	b.n	8010a76 <scalbnf+0x4e>
 8010ac2:	3019      	adds	r0, #25
 8010ac4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010ac8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010acc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010af0 <scalbnf+0xc8>
 8010ad0:	ee07 3a90 	vmov	s15, r3
 8010ad4:	e7d7      	b.n	8010a86 <scalbnf+0x5e>
 8010ad6:	bf00      	nop
 8010ad8:	ffff3cb0 	.word	0xffff3cb0
 8010adc:	4c000000 	.word	0x4c000000
 8010ae0:	7149f2ca 	.word	0x7149f2ca
 8010ae4:	f149f2ca 	.word	0xf149f2ca
 8010ae8:	0da24260 	.word	0x0da24260
 8010aec:	8da24260 	.word	0x8da24260
 8010af0:	33000000 	.word	0x33000000

08010af4 <floorf>:
 8010af4:	ee10 3a10 	vmov	r3, s0
 8010af8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010afc:	3a7f      	subs	r2, #127	@ 0x7f
 8010afe:	2a16      	cmp	r2, #22
 8010b00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010b04:	dc2b      	bgt.n	8010b5e <floorf+0x6a>
 8010b06:	2a00      	cmp	r2, #0
 8010b08:	da12      	bge.n	8010b30 <floorf+0x3c>
 8010b0a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010b70 <floorf+0x7c>
 8010b0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b1a:	dd06      	ble.n	8010b2a <floorf+0x36>
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	da24      	bge.n	8010b6a <floorf+0x76>
 8010b20:	2900      	cmp	r1, #0
 8010b22:	4b14      	ldr	r3, [pc, #80]	@ (8010b74 <floorf+0x80>)
 8010b24:	bf08      	it	eq
 8010b26:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010b2a:	ee00 3a10 	vmov	s0, r3
 8010b2e:	4770      	bx	lr
 8010b30:	4911      	ldr	r1, [pc, #68]	@ (8010b78 <floorf+0x84>)
 8010b32:	4111      	asrs	r1, r2
 8010b34:	420b      	tst	r3, r1
 8010b36:	d0fa      	beq.n	8010b2e <floorf+0x3a>
 8010b38:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010b70 <floorf+0x7c>
 8010b3c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b48:	ddef      	ble.n	8010b2a <floorf+0x36>
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	bfbe      	ittt	lt
 8010b4e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8010b52:	fa40 f202 	asrlt.w	r2, r0, r2
 8010b56:	189b      	addlt	r3, r3, r2
 8010b58:	ea23 0301 	bic.w	r3, r3, r1
 8010b5c:	e7e5      	b.n	8010b2a <floorf+0x36>
 8010b5e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010b62:	d3e4      	bcc.n	8010b2e <floorf+0x3a>
 8010b64:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010b68:	4770      	bx	lr
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	e7dd      	b.n	8010b2a <floorf+0x36>
 8010b6e:	bf00      	nop
 8010b70:	7149f2ca 	.word	0x7149f2ca
 8010b74:	bf800000 	.word	0xbf800000
 8010b78:	007fffff 	.word	0x007fffff

08010b7c <_init>:
 8010b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b7e:	bf00      	nop
 8010b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b82:	bc08      	pop	{r3}
 8010b84:	469e      	mov	lr, r3
 8010b86:	4770      	bx	lr

08010b88 <_fini>:
 8010b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b8a:	bf00      	nop
 8010b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b8e:	bc08      	pop	{r3}
 8010b90:	469e      	mov	lr, r3
 8010b92:	4770      	bx	lr
